import React, {Component} from 'react';
import {
  View,
  SafeAreaView,
  Image,
  Keyboard,
  TouchableOpacity,
  Platform,
  Text,
  FlatList,
  Alert,
  Linking,
  BackHandler,
  Dimensions,
  ScrollView,
  AsyncStorage,
  PermissionsAndroid,
  DeviceEventEmitter,
  ToastAndroid,
  StyleSheet,
  ActivityIndicator,
  TextInput,
} from 'react-native';
import {connect} from 'react-redux';
import {Icon, Input, normalize, CheckBox} from 'react-native-elements';
import Pdf from 'react-native-pdf';
import NavigatorService from '../../router/NavigatorService';
import Share from 'react-native-share';
import Geolocation from 'react-native-geolocation-service';
import {apiRoot} from '../../actions/login';
import RadioForm, {
  RadioButton,
  RadioButtonInput,
  RadioButtonLabel,
} from 'react-native-simple-radio-button';
import {
  stepOne,
  stepTwo,
  getReports,
  getProfile,
  failedCall,
  getBillAmount,
  getDashboardDetails,
  getMahagramDetails,
  getIciciReports,
  iciciPosTransfer,
  mahagramMPosTransfer,
  getMahagramReports,
  ksebRequest_billPayment,
  WaterAuthoriy_Request_billPayment,
  bsnl_Multi_billPayment,
  asianet_payment_billPayment,
  getProviderList_MobileDthRecharge,
  getRegionList_MobileDthRecharge,
  mobileRechargeRequest_MobileDthRecharge,
  DthRechargeRequest_MobileDthRecharge,
  getDTHList_MobileDthRecharge,
  mobileHistoryList_BillPayment,
  dthHistoryList_BillPayment,
  listBeneficiaryList_MoneyTransfer,
  deleteFromList_MoneyTransfer,
  addBeneficiary_MoneyTransfer,
  walletRequest_MoneyTransfer,
  moneyTransferRequest_MoneyTransfer,
  moneyTransferList_MoneyTransfer,
  settlementHistoryList_Settlement,
  walletList_MoneyTransfer,
  settlementSetupValidation,
  makeSettlement_Settlement,
  allTransactionHistoryList,
  getCompanyDetails_commission_request_vehicle,
  getCompanyDetails_commission_request_travel,
  getCompanyDetails_commission_request_health,
  commission_request_vehicle_postData,
  commission_request_health_postData,
  commission_request_travel_postData,
  travelCommissionHistoryList_Insurance,
  vehicleCommissionHistoryList_Insurance,
  healthCommissionHistoryList_Insurance,
  getNewFastagList,
  getNewFastagCategoryList,
  newFastag_Fastag,
  getFastagRechargeUserList,
  getIndividual_FastagRecharge_UserDetails,
  fastagRecharge_fastag,
  fastagRegistrationHistoryList_Fastag,
  fastagRechargeHistoryList_Fastag,
  teacherIndRegistration,
  getTeacherIndRegistrationHistory_TeacherInd,
  getAEPSReports,
  getBCCertificateFile,
  updateKYCDetails,
  fastag_icici_billPayment,
  fastagRechargeHistoryList_Icici_Fastag,
  agentHistory_Dashboard,
  verifyNo_MoneyTransfer,
  verifyOTP_MoneyTransfer,
  resendOTP_MoneyTransfer
} from '../../actions/forms';
import MainButton from '../../components/MainButton';
import RNHTMLtoPDF from 'react-native-html-to-pdf';
import ViewShot from 'react-native-view-shot';
import HomeHeader from './Header';
import Modal from 'react-native-modal';
import RNFetchBlob from 'rn-fetch-blob';
import AwesomeAlert from 'react-native-awesome-alerts';
import LinearGradient from 'react-native-linear-gradient';
import CenterLoading from '../../components/CenterLoading';
import CenterRefresh from '../../components/CenterRefresh';
import {createAppContainer} from 'react-navigation';
import aceAlert from '../../components/aceAlert';
import moment from 'moment';
import DatePicker from '@react-native-community/datetimepicker';
import DocumentPicker from 'react-native-document-picker';
import _ from 'lodash';
import RNFS from 'react-native-fs';
import ModalDropDownMenu from '../../components/DropDownMenu';
import ModalSelectorInput from '../../components/ModalSelectorInput';
import HistoryComponent from './HistoryComponent';
import store from '../../store';
import PlusButton from '../../components/PlusButton';
import {
  DotIndicator,
  BallIndicator,
  WaveIndicator,
} from 'react-native-indicators';
import Mahagram from '../../../Payment';
import BleManager from 'react-native-ble-manager';
import AndroidOpenSettings from 'react-native-android-open-settings';
import NetInfo from '@react-native-community/netinfo';
import Toast from 'react-native-simple-toast';
import MoneyTransferComponent from './MoneyTransferComponent';
import {getAccountBalance} from '../../actions/forms';
import Swiper from 'react-native-swiper';
import {KsebHistoryList_BillPayment} from '../../actions/forms';
import {WaterAuthorityHistoryList_BillPayment} from '../../actions/forms';
import {AsianetHistoryList_BillPayment} from '../../actions/forms';
import {BsnlHistoryList_BillPayment} from '../../actions/forms';
import CustomIcon from '../../../theme/CustomIcon';
const {width: SCREEN_WIDTH, height: SCREEN_HEIGHT} = Dimensions.get('window');
//pageDepth highest ==74
class HomeScreen extends Component {
  constructor(props) {
    super(props);
    this.state = {
      superAgent_Header: false,
      activated_tabs: {},
      profile_data: {},
      profile_editing_mode: false,
      profilePreviousDepth: 0,
      buttonLoading: false,
      showPassword: false,
      keyboardOpen: false,
      boxDimension: 0,
      username: '',
      mpinpassword: '',
      servicesData: [],
      tempData: [],
      settingsLoading: false,
      pageDepth: 0,
      previousDepth: 0,
      tempPageDepth: [],
      CenterRefreshing: false,
      headerName: ['HOME'],
      pageDepthColor: [],
      inHomePage: true,
      searchKey: '',
      searchList: [],
      searching: false,
      searchDepth: [],
      searchHeaderName: ['SEARCH RESULT'],
      searchData: [],
      beforeSearchData: [],
      modalOpen: false,
      name: '',
      mobile: '',
      changingPage: false,
      modalRecieptOpen: false,
      modalRecieptOpen_three: false,
      netInfoChange: false,
      prepaidCardNumber: '',
      confirmprepaidCardNumber: '',
      file_type_name: '',
      settingsLoading: false,
      refreshing: false,
      refreshingValue: false,
      historyData: [],
      searchKey: '',
      searchData: [],
      tempData: [],
      searching: false,
      modalOpen: false,
      fromDate: '',
      fromDatePicker: false,
      toDate: '',
      toDatePicker: false,
      minimumDate: '',
      maximumDate: '',
      tempFromDate: '',
      tempToDate: '',
      filteredData: [],
      settingFilter: false,
      keyboardOpen: false,
      type: 'BOTH',
      tempType: 'BOTH',
      tempData: [],
      mainData: [],
      singleDateInModal: false,
      singleDatePicker: false,
      singleOption: false,
      singleOption_tempSingleDate: '',
      singleOption_tempFromDate: '',
      singleOption_tempTODate: '',
      deleteLoaderId: '',
      profile_values_set: false,
      orderId: '',
      stepTwoDate: moment().format('DD-MM-YYYY'),
      stepTwoDatePicker: false,
      amount: 0,
      insertedId: '',
      modalProfileOpen: false,
      account_balance: 0,
      agentName: '',
      agent_email: '',
      profileLoading: false,
      profile_contact_details: [],
      transactionData: {
        amount: '',
        bankremarks: '',
        cardno: '',
        date: '',
        invoicenumber: '',
        mid: '',
        refstan: '',
        requesttxn: '',
        respcode: '',
        rrn: '',
        tid: '',
        txnamount: '',
        udf1: '',
        udf2: '',
        udf3: '',
        udf4: '',
        vendorid: '',
      },
      reportLoading: true,
      index: 0,
      district_list: [
        {id: 1, name: 'Alappuzha'},
        {id: 2, name: 'Ernakulam'},
        {id: 3, name: 'Idukki'},
        {id: 4, name: 'Kannur'},
        {id: 5, name: 'Kasaragod'},
        {id: 6, name: 'Kollam'},
        {id: 7, name: 'Kottayam'},
        {id: 8, name: 'Kozhikode'},
        {id: 9, name: 'Malappuram'},
        {id: 10, name: 'Palakkad'},
        {id: 11, name: 'Pathanamthitta'},
        {id: 12, name: 'Thiruvananthapuram'},
        {id: 13, name: 'Thrissur'},
        {id: 14, name: 'Wayanad'},
      ],
      showBCPage: false,
      showDashboard: false,
      bcCertificateUrl: '',
      pdf_download_loading: false,
      pdf_share_loading: false,
      show_all_transaction_history: false,
      awesomeAlertShow: false,
      awesomeAlertMessage: '',
      awesomeErrorAlertShow: false,
      awesomeErrorAlertMessage: '',
      awesomeGeneralAlertShow: false,
      awesomeGeneralAlertMessage: '',
      awesomeBluetoothAlertShow: false,
      awesomeLogoutAlertShow: false,
      awesomeDetailsAlertShow: false,
      awesomeDetailsAlertMessage: '',
      //aweome Details alert Temperory pageDEpth storage
      awesomeDetailsAlerpageDepth: 43,
      //All Transaction history values
      allhistory_refreshing: false,
      allhistory_refreshingValue: false,
      allhistory_historyData: [],
      allhistory_searchKey: '',
      allhistory_searchData: [],
      allhistory_tempData: [],
      allhistory_searching: false,
      allhistory_modalOpen: false,
      allhistory_fromDate: '',
      allhistory_fromDatePicker: false,
      allhistory_toDate: '',
      allhistory_toDatePicker: false,
      allhistory_minimumDate: '',
      allhistory_maximumDate: '',
      allhistory_tempFromDate: '',
      allhistory_tempToDate: '',
      allhistory_filteredData: [],
      allhistory_settingFilter: false,
      allhistory_keyboardOpen: false,
      allhistory_type: 'BOTH',
      allhistory_tempType: 'BOTH',
      allhistory_tempData: [],
      allhistory_mainData: [],
      allhistory_singleDateInModal: false,
      allhistory_singleDatePicker: false,
      allhistory_singleOption: false,
      allhistory_singleOption_tempSingleDate: '',
      allhistory_singleOption_tempFromDate: '',
      allhistory_singleOption_tempTODate: '',

      //PDF downlad and share in history page
      allhistory_pdf_refreshing: false,
      allhistory_pdf_refreshingValue: false,
      allhistory_pdf_historyData: [],
      allhistory_pdf_searchKey: '',
      allhistory_pdf_searchData: [],
      allhistory_pdf_tempData: [],
      allhistory_pdf_searching: false,
      allhistory_pdf_modalOpen: false,
      allhistory_pdf_fromDate: '',
      allhistory_pdf_fromDatePicker: false,
      allhistory_pdf_toDate: '',
      allhistory_pdf_toDatePicker: false,
      allhistory_pdf_minimumDate: '',
      allhistory_pdf_maximumDate: '',
      allhistory_pdf_tempFromDate: '',
      allhistory_pdf_tempToDate: '',
      allhistory_pdf_filteredData: [],
      allhistory_pdf_settingFilter: false,
      allhistory_pdf_keyboardOpen: false,
      allhistory_pdf_type: 'BOTH',
      allhistory_pdf_tempType: 'BOTH',
      allhistory_pdf_tempData: [],
      allhistory_pdf_mainData: [],
      allhistory_pdf_singleDateInModal: false,
      allhistory_pdf_singleDatePicker: false,
      allhistory_pdf_singleOption: false,
      allhistory_pdf_singleOption_tempSingleDate: '',
      allhistory_pdf_singleOption_tempFromDate: '',
      allhistory_pdf_singleOption_tempTODate: '',
      allhistory_pdf_download_loading: false,
      allhistory_pdf_share_loading: false,
      allhistory_pdf_singleDate_default: false,

      //Profile Account Details
      profile_accno_name: '',
      profile_accno_no: '',
      profile_bank_name: '',
      profile_bank_banch: '',
      profile_ifsc_code: '',

      // KSEB values
      kseb_showPassword: false,
      kseb_keyboardOpen: false,
      kseb_boxDimension: 0,
      kseb_Beneficiaryname: '',
      kseb_settingsLoading: false,
      kseb_modalOpen: false,
      kseb_moneyTransferPageType: 'Money Transfer',
      kseb_moneyTrasferPageEditable: false,
      kseb_changeDateOfPayment: false,
      kseb_dueDate: moment().format('DD-MM-YYYY'),
      kseb_date: moment().format('DD-MM-YYYY'),
      kseb_Name: '',
      kseb_consumerId: '',
      kseb_mobileNumber: '',
      kseb_billNumber: '',
      kseb_amount: '0',
      kseb_place: '',
      kseb_serviceCharge: 0,
      kseb_amount_loading: false,
      // Water Authority values
      water_auth_showPassword: false,
      water_auth_keyboardOpen: false,
      water_auth_boxDimension: 0,
      water_auth_Beneficiaryname: '',
      water_auth_settingsLoading: false,
      water_auth_modalOpen: false,
      water_auth_moneyTransferPageType: 'Money Transfer',
      water_auth_moneyTrasferPageEditable: false,
      water_auth_changeDateOfPayment: false,
      water_auth_dueDate: moment().format('DD-MM-YYYY'),
      water_auth_Name: '',
      water_auth_consumerId: '',
      water_auth_mobileNumber: '',
      water_auth_consumerNumber: '',
      water_auth_billNumber: '',
      water_auth_section: '',
      water_auth_amount: '0',
      water_auth_serviceCharge: 0,
      water_auth_amount_loading: false,
      // BSNL values
      bsnl_showPassword: false,
      bsnl_keyboardOpen: false,
      bsnl_boxDimension: 0,
      bsnl_Beneficiaryname: '',
      bsnl_settingsLoading: false,
      bsnl_modalOpen: false,
      bsnl_moneyTransferPageType: 'Money Transfer',
      bsnl_moneyTrasferPageEditable: false,
      bsnl_connectionType: 'Landline Individual',
      bsnl_changeDateOfPayment: false,
      bsnl_dueDate: moment().format('DD-MM-YYYY'),
      bsnl_Name: '',
      bsnl_mobileNumber: '',
      bsnl_landlineWthCode: '',
      bsnl_accountNumber: '',
      bsnl_selectedOperator: '',
      bsnl_selectedOperatorList: [
        {name: 'AIRCEL POSTPAID'},
        {name: 'AIRTEL BROADBAND(DSL)'},
        {name: 'AIRTEL LANDLINE'},
        {name: 'AIRTEL POSTPAID'},
        {name: 'BP-HATHWAY BROADBAND'},
        {name: 'BSNL LANDLINE'},
        {name: 'BSNL POSTPAID'},
        {name: 'CONNECT BROADBAND'},
        {name: 'IDEA POSTPAID'},
        {name: 'JIO POSTPAID'},
        {name: 'MTNL DELHI LANDLINE'},
        {name: 'MTS POSTPAID'},
        {name: 'RELIANCE POSTPAID'},
        {name: 'TAPPP / DITTO TV'},
        {name: 'TATA DOCOMO POSTPAID'},
        {name: 'TATA INDICOM LANDLINE'},
        {name: 'TIKONA POSTPAID'},
        {name: 'VODAFONE POSTPAID'},
      ],
      bsnl_amount: '0',
      bsnl_amount_loading: false,
      bsnl_date: moment().format('DD-MM-YYYY'),
      // Asianet valuse
      asianet_showPassword: false,
      asianet_keyboardOpen: false,
      asianet_boxDimension: 0,
      asianet_Beneficiaryname: '',
      asianet_settingsLoading: false,
      asianet_modalOpen: false,
      asianet_moneyTransferPageType: 'Money Transfer',
      asianet_moneyTrasferPageEditable: false,
      asianet_type: 'Broadband',
      asianet_customerName: '',
      asianet_mobileNumber: '',
      asianet_address: '',
      asianet_subscriberId: '',
      asianet_amount: 0,
      //Mobile values
      mobile_mobileNumber: 0,
      mobile_keyboardOpen: false,
      mobile_settingsLoading: false,
      mobile_providerList: [],
      mobile_providerName: '',
      mobile_regionList: [],
      mobile_regionName: 'Kerala',
      mobile_amount: 0,
      mobile_providerId: '',
      mobile_providerListActivity: false,
      mobile_regionListActivity: false,

      //Dth values
      dth_prepaidCardNumber: '',
      dth_confirmprepaidCardNumber: '',
      dth_file_type_name: '',
      dth_DthList: [],
      dth_DthName: '',
      dth_keyboardOpen: false,
      dth_customerId: '',
      dth_DthProviderId: '',
      dth_providerListActivity: false,
      dth_amount: 0,

      //Money Transfer List
      money_transfer_list_showPassword: false,
      money_transfer_list_keyboardOpen: false,
      money_transfer_list_boxDimension: 0,
      money_transfer_list_username: '',
      money_transfer_list_password: '',
      money_transfer_list_settingsLoading: false,
      money_transfer_list_refreshingValue: false,
      money_transfer_list_modalOpen: false,
      money_transfer_list_moneyTransferPageType: 'Money Transfer',
      money_transfer_list_moneyTrasferPageEditable: false,
      money_transfer_list_userData: [],
      money_transfer_list_searchKey: '',
      money_transfer_list_tempData: [],
      money_transfer_list_searching: false,
      money_transfer_list_searchData: [],
      money_transfer_list_acccount_balance: '',
      money_transfer_list_refreshing: true,

      //Money Transfer number verification
      money_transfer_verify_name:'',
      money_transfer_verify_number:'',
      money_transfer_verify_number_status:false,
      money_transfer_verify_otp:'',
      money_transfer_verify_otp_status:false,
      
      //To add or edit Beneficary Money Transfer
      money_transfer_add_edit_mode: 'add',

      //Add Beneficiary Money Transfer
      money_transfer_add_showPassword: false,
      money_transfer_add_keyboardOpen: false,
      money_transfer_add_boxDimension: 0,
      money_transfer_add_settingsLoading: false,
      money_transfer_add_modalOpen: false,
      money_transfer_add_moneyTransferPageType: 'Money Transfer',
      money_transfer_add_moneyTrasferPageEditable: false,
      money_transfer_add_Beneficiaryname: '',
      money_transfer_add_BeneficiaryAccNo: '',
      money_transfer_add_BeneficiaryBank: '',
      money_transfer_add_BeneficiaryBranch: '',
      money_transfer_add_BeneficiaryIfsc: '',
      money_transfer_edit_id: '',

      //Transfer to beneficiary --Money Transfer
      money_transfer_transfer_showPassword: false,
      money_transfer_transfer_keyboardOpen: false,
      money_transfer_transfer_boxDimension: 0,
      money_transfer_transfer_settingsLoading: false,
      money_transfer_transfer_modalOpen: false,
      money_transfer_transfer_moneyTransferPageType: 'Money Transfer',
      money_transfer_transfer_moneyTrasferPageEditable: false,
      money_transfer_transfer_Beneficiaryname: '',
      money_transfer_transfer_BeneficiaryAccNo: '',
      money_transfer_transfer_BeneficiaryBank: '',
      money_transfer_transfer_BeneficiaryBranch: '',
      money_transfer_transfer_BeneficiaryIfsc: '',
      money_transfer_transfer_amount: 0,
      money_transfer_transfer_sender_name: '',
      money_transfer_transfer_sender_mobile_no: '',
      money_transfer_transfer_purpose: '',
      money_transfer_transfer_ServiceCharge: 0,
      money_transfer_transfer_id: '',
      money_transfer_transfer_DateofPayment: moment().format('DD-MM-YYYY'),
      money_transfer_transfer_changeDateOfPayment: false,
      money_transfer_invoice_data: null,

      //Wallet Request
      wallet_request_showPassword: false,
      wallet_request_keyboardOpen: false,
      wallet_request_boxDimension: 0,
      wallet_request_settingsLoading: false,
      wallet_request_modalOpen: false,
      wallet_request_moneyTransferPageType: 'Money Transfer',
      wallet_request_moneyTrasferPageEditable: false,
      wallet_request_Bankname: '',
      wallet_request_Amount: 0,
      wallet_request_PaymentMethod: '',
      wallet_request_type: '',
      wallet_request_DateofPayment: moment().format('DD-MM-YYYY'),
      wallet_request_BankReferenceNumber: '',
      wallet_request_Message: '',
      wallet_request_changeDateOfPayment: false,

      //Settlements Setup
      settlement_setup_settlement_activated: 'notset',
      settlement_setup_upload_image: null,
      settlement_setup_base64: '',
      settlement_setup_account_name: '',
      settlement_setup_account_number: '',
      settlement_setup_bank_name: '',
      settlement_setup_bank_branch: '',
      settlement_setup_ifsc_code: '',

      //Settlement Transfer Amount
      settlement_transfer_amount: 0,
      settlement_transfer_service_charge: 0,
      settlement_transfer_limit: 0,
      settlement_transfer_status_loading: false,
      //Connect to microAtm
      connect_to_micro_atm_radio_button_value: 1,
      connect_to_micro_atm_username: '',
      connect_to_micro_atm_password: '',
      connect_to_micro_atm_mobileno: '',
      connect_to_micro_atm_amount: 0,
      connect_to_micro_atm_remarks: '',
      connect_to_micro_atm_showPassword: false,
      connect_to_micro_atm_username_set: false,
      connect_to_micro_atm_password_set: false,
      connect_to_micro_atm_mobileno_set: false,
      //Vehicle Commission Request
      commission_request_vehicle_company_list: [],
      commission_request_vehicle_company_id: 1,
      commission_request_vehicle_company_name: 'Covernest',
      commission_request_vehicle_name: 'Two Wheeler',
      commission_request_vehicle_name_list: [
        {name: 'Two Wheeler'},
        {name: 'Four Wheeler'},
      ],
      commission_request_vehicle_number: '',
      commission_request_vehicle_customer_name: '',
      commission_request_vehicle_policy_number: '',
      commission_request_vehicle_tp: '',
      commission_request_vehicle_od: '',
      commission_request_vehicle_amount: 0,
      commission_request_vehicle_file: {},
      commission_request_vehicle_file_status: false,
      //health Commission Request
      commission_request_health_company_list: [],
      commission_request_health_company_id: 1,
      commission_request_health_company_name: 'RELIGARE HEALTH INSURANCE',
      commission_request_health_customer_name: '',
      commission_request_health_customer_mobileno: '',
      commission_request_health_policy_number: '',
      commission_request_health_amount: 0,
      //Travel Commission Request
      commission_request_travel_company_list: [],
      commission_request_travel_company_id: 1,
      commission_request_travel_company_name: 'RELIGARE TRAVEL INSURANCE',
      commission_request_travel_customer_name: '',
      commission_request_travel_customer_mobileno: '',
      commission_request_travel_policy_number: '',
      commission_request_travel_amount: 0,

      //Fastag - New Fastag
      fastagLoading: false,
      fastag_newfastag_list: [],
      fastag_newfastag_applyfor: '',
      fastag_newfastag_amount: 0,
      fastag_newfastag_service_charge: 0,
      fastag_newfastag_vehicle_class: '',
      fastag_newfastag_vehicle_number: '',
      fastag_newfastag_name: '',
      fastag_newfastag_mobile_number: '',
      fastag_newfastag_address: '',
      fastag_newfastag_fastag_number: '',
      fastag_newfastag_paytm_mobile_number: '',
      fastag_newfastag_commercial_type: 1,
      fastag_newfastag_front_of_rc_file: {},
      fastag_newfastag_front_of_rc_file_status: false,
      fastag_newfastag_back_of_rc_file: {},
      fastag_newfastag_back_of_rc_file_status: false,
      fastag_newfastag_fastag_photo_file: null,
      fastag_newfastag_fastag_photo_file_status: false,
      //Fastag Recharge
      fastag_fastag_recharge_user_list: [],
      fastag_fastag_recharge_user_id: 0,
      fafastag_fastag_recharge_user_name: 'Select None',
      fastag_fastag_recharge_name: '',
      fastag_fastag_recharge_mobile_number: '',
      fastag_fastag_recharge_address: '',
      fastag_fastag_recharge_vehicle_number: '',
      fastag_fastag_recharge_fastag_number: '',
      fastag_fastag_recharge_vehicle_class_list: [],
      fastag_fastag_recharge_vehicle_class_id: 0,
      fastag_fastag_recharge_vehicle_class_name: '',
      fastag_fastag_recharge_vehicle_class_id_temp: 0,
      fastag_fastag_recharge_vehicle_class_name_temp: '',
      fastag_fastag_recharge_amount: 0,

      //Fastag recharge icici
      fastag_fastag_recharge_icici_name: '',
      fastag_fastag_recharge_icici_mobile_number: '',
      fastag_fastag_recharge_icici_vehicle_number: '',
      fastag_fastag_recharge_icici_bill_number: '',
      fastag_fastag_recharge_icici_vehicle_category_list: [],
      fastag_fastag_recharge_icici_vehicle_category_id: 0,
      fastag_fastag_recharge_icici_vehicle_category_fetch: false,
      fastag_fastag_recharge_icici_vehicle_category_fetch_temp: false,
      fastag_fastag_recharge_icici_vehicle_category_name: '',
      fastag_fastag_recharge_icici_vehicle_category_id_temp: 0,
      fastag_fastag_recharge_icici_vehicle_category_name_temp: '',
      fastag_fastag_recharge_icici_amount: 0,
      fastag_icici_amount_loading: false,

      //Dashboard Page
      dashBoardList_dashboard: [],

      //teacherind registration values
      teacherind_name: '',
      teacherind_mobile_number: '',
      teacherind_address: '',
      teacherind_email_id: '',

      teacherind_district: 'Alappuzha',
      teacherind_taluk: '',
      teacherind_course_name: '',
      teacherind_institution: '',
      teacherind_course_semester: '',
      teacherind_course_tution_for: '',

      //KYC Updation Page
      kyc_update_name: '',
      kyc_update_mobileno: '',
      kyc_update_address: '',
      kyc_update_proof_type_list: [
        {name: 'License'},
        {name: 'Aadhar'},
        {name: 'Pancard'},
        {name: 'VotersID'},
        {name: 'Passport'},
      ],
      kyc_update_proof_type_selected_value: 'License',
      kyc_update_id_proof_value: '',
      kyc_update_document_file: {},
      kyc_update_document_file_status: false,

      //Dashboard page
      showDashboardHistory: false,
      dashboard_balance:'0',
    };

    this.timeout = 0;
    this.handleBackButtonClick = this.handleBackButtonClick.bind(this);
  }

  async createPDF(data) {
    let htmlContent = `${data}`;
    console.log(htmlContent.replace(/(\r\n|\n|\r)/gm, '').replace(/\s/g, ''));
    let options = {
      html:
        '<h3>Invoice&nbsp;Acemoney&nbsp;Aug 12,2020</h3><p>&nbsp;</p><header><div><div style="float: right;"><address><p style="text-align: right;">JayaprakashJ</p><p style="text-align: right; word-wrap: break-word; width: 250px;">vattathara house</p><p style="text-align: right;">8089565212</p><p style="text-align: right;">jayaprakashvj@gmail.com</p><p style="text-align: right;">682508</p></address></div><div><img src="http://portal.janasevanakendra.com/assets/images/janasevalogo.png" alt="" width="262" height="56"/></div><div>&nbsp;</div></div></header><article><h1 style="text-align: center;">&nbsp;</h1><h1 style="text-align: center;">&nbsp;</h1><h1 style="text-align: center;">Reciept</h1><p>&nbsp;</p><address><p><span style="text-decoration: underline;">Money Transfer</span></p><p>&nbsp;</p></address><table style="height: 74px; border-color: lightgrey;" border="1" width="215"><tbody><tr style="height: 24px;"><th style="width: 58.4px; text-align: center; height: 24px;">Invoice</th><td style="width: 155.2px; text-align: center; height: 24px;">JNS.2020/08/12/11668</td></tr><tr style="height: 24.6px;"><th style="width: 58.4px; text-align: center; height: 24.6px;">Date</th><td style="width: 155.2px; text-align: center; height: 24.6px;">Aug 12,2020</td></tr><tr style="height: 24px;"><th style="width: 58.4px; text-align: center; height: 24px;">Amount</th><td style="width: 155.2px; text-align: center; height: 24px;">Rs. 10</td></tr></tbody></table><br/><table style="height: 75px; border-color: lightgrey;" border="1" width="592"><thead><tr style="height: 20px;"><th style="width: 120px; text-align: center; height: 20px;">Particular</th><th style="width: 156.8px; text-align: center; height: 20px;">Benificier</th><th style="width: 59.2px; text-align: center; height: 20px;">Bank</th><th style="width: 60.8px; text-align: center; height: 20px;">Branch</th><th style="width: 127.2px; height: 20px;">IFSC</th><th style="width: 67.2px; height: 20px;">Status</th></tr></thead><tbody><tr style="height: 52.4px;"><td style="width: 120px; text-align: center; height: 52.4px;">Money Transfer</td><td style="width: 156.8px; text-align: center; height: 52.4px;">John Antony Francis</td><td style="width: 59.2px; text-align: center; height: 52.4px;">Federal</td><td style="width: 60.8px; text-align: center; height: 52.4px;">thrissur</td><td style="width: 127.2px; text-align: center; height: 52.4px;">SBIN454434343</td><td style="width: 67.2px; text-align: center; height: 52.4px;">Success</td></tr></tbody></table><br/><table style="height: 75px; border-color: lightgrey;" border="1" width="243"><tbody><tr style="height: 24px;"><th style="width: 184px; text-align: center; height: 24px;">Amount Paid</th><td style="width: 57.6px; text-align: center; height: 24px;">Rs. 10</td></tr><tr style="height: 24.4px;"><th style="width: 184px; text-align: center; height: 24.4px;">Service charge Paid</th><td style="width: 57.6px; text-align: center; height: 24.4px;">Rs. 5</td></tr><tr style="height: 24px;"><th style="width: 184px; text-align: center; height: 24px;">Total</th><td style="width: 57.6px; text-align: center; height: 24px;">Rs. 15</td></tr></tbody></table><p>&nbsp;</p><p>&nbsp;</p></article><aside><h1>Thank You</h1><div><center><p>Acemoney</p></center></div></aside>',
      //'<h2>&nbsp;Invoice Janasevanakendra Aug 12,2020</h2><p>&nbsp;</p><header><div><div><address><p style="text-align: right;">JayaprakashJ</p><p style="text-align: right;">vattathara house</p><p style="text-align: right;">8089565212</p><p style="text-align: right;">jayaprakashvj@gmail.com</p><p style="text-align: right;">682508</p></address></div><div><img src="http://portal.janasevanakendra.com/assets/images/janasevalogo.png" alt="" width="262" height="56"/></div><div>&nbsp;</div></div></header><article><h1 style="text-align: center;">Reciept</h1><address><p><span style="text-decoration: underline;">Money Transfer</span></p><p>&nbsp;</p></address><table style="height: 74px; border-color: lightgrey;" border="1" width="215"><tbody><tr style="height: 24px;"><th style="width: 58.4px; text-align: center; height: 24px;">Invoice</th><td style="width: 155.2px; text-align: center; height: 24px;">JNS.2020/08/12/11668</td></tr><tr style="height: 24.6px;"><th style="width: 58.4px; text-align: center; height: 24.6px;">Date</th><td style="width: 155.2px; text-align: center; height: 24.6px;">Aug 12,2020</td></tr><tr style="height: 24px;"><th style="width: 58.4px; text-align: center; height: 24px;">Amount</th><td style="width: 155.2px; text-align: center; height: 24px;">Rs. 10</td></tr></tbody></table><br/><table style="height: 75px; border-color: lightgrey;" border="1" width="592"><thead><tr><th style="width: 120px; text-align: center;">Particular</th><th style="width: 156.8px; text-align: center;">Benificier</th><th style="width: 59.2px; text-align: center;">Bank</th><th style="width: 60.8px; text-align: center;">Branch</th><th style="width: 127.2px;">IFSC</th><th style="width: 67.2px;">Status</th></tr></thead><tbody><tr><td style="width: 120px; text-align: center;">Money Transfer</td><td style="width: 156.8px; text-align: center;">John Antony Francis</td><td style="width: 59.2px; text-align: center;">Federal</td><td style="width: 60.8px; text-align: center;">thrissur</td><td style="width: 127.2px; text-align: center;">SBIN454434343</td><td style="width: 67.2px; text-align: center;">Success</td></tr></tbody></table><br/><table style="height: 75px; border-color: lightgrey;" border="1" width="243"><tbody><tr style="height: 24px;"><th style="width: 184px; text-align: center; height: 24px;">Amount Paid</th><td style="width: 57.6px; text-align: center; height: 24px;">Rs. 10</td></tr><tr style="height: 24.4px;"><th style="width: 184px; text-align: center; height: 24.4px;">Service charge Paid</th><td style="width: 57.6px; text-align: center; height: 24.4px;">Rs. 5</td></tr><tr style="height: 24px;"><th style="width: 184px; text-align: center; height: 24px;">Total</th><td style="width: 57.6px; text-align: center; height: 24px;">Rs. 15</td></tr></tbody></table><p>&nbsp;</p><p>&nbsp;</p></article><aside><h1>Thank You</h1><div><center><p>Janasevanakendra</p></center></div></aside>',
      //'<p>&nbsp;</p><p>Invoice</p><header><h1>Invoice Janasevanakendra Aug 12,2020</h1><div><div><address><p>JayaprakashJ</p><p>vattathara house</p><p>8089565212</p><p>jayaprakashvj@gmail.com</p><p>682508</p></address></div><div><img src="http://portal.janasevanakendra.com/assets/images/janasevalogo.png" alt="" width="262" height="56"/></div><div>&nbsp;</div></div></header><article><h1>Recipient</h1><address><p>Money Transfer</p></address><table style="height: 74px;" border="1" width="215"><tbody><tr><th style="width: 58.4px;">Invoice</th><td style="width: 155.2px;">JNS.2020/08/12/11668</td></tr><tr><th style="width: 58.4px;">Date</th><td style="width: 155.2px;">Aug 12,2020</td></tr><tr><th style="width: 58.4px;">Amount</th><td style="width: 155.2px;">Rs. 10</td></tr></tbody></table><table style="height: 75px;" border="1" width="592"><thead><tr><th style="width: 120px;">Particular</th><th style="width: 156.8px;">Benificier</th><th style="width: 59.2px;">Bank</th><th style="width: 60.8px;">Branch</th><th style="width: 127.2px;">IFSC</th><th style="width: 67.2px;">Status</th></tr></thead><tbody><tr><td style="width: 120px;">Money Transfer</td><td style="width: 156.8px;">John Antony Francis</td><td style="width: 59.2px;">Federal</td><td style="width: 60.8px;">thrissur</td><td style="width: 127.2px;">SBIN454434343</td><td style="width: 67.2px;">Success</td></tr></tbody></table><table style="height: 75px;" border="1" width="243"><tbody><tr><th style="width: 184px;">Amount Paid</th><td style="width: 57.6px;">Rs. 10</td></tr><tr><th style="width: 184px;">Service charge Paid</th><td style="width: 57.6px;">Rs. 5</td></tr><tr><th style="width: 184px;">Total</th><td style="width: 57.6px;">Rs. 15</td></tr></tbody></table></article><aside><h1>Thank You</h1><div><center><p>Janasevanakendra</p></center></div></aside>',
      //'<p>&nbsp;</p><p>Invoice</p><header><h1>Invoice Janasevanakendra Aug 12,2020</h1><div><div><address><p>JayaprakashJ</p><p>vattathara house</p><p>8089565212</p><p>jayaprakashvj@gmail.com</p><p>682508</p></address></div><div><img src="http://portal.janasevanakendra.com/assets/images/janasevalogo.png" alt="" width="262" height="56"/></div><div>&nbsp;</div></div></header><article><h1>Recipient</h1><address><p>Money Transfer</p></address><table border="1"><tbody><tr><th>Invoice</th><td>JNS.2020/08/12/11668</td></tr><tr><th>Date</th><td>Aug 12,2020</td></tr><tr><th>Amount</th><td>Rs. 10</td></tr></tbody></table><table border="1"><thead><tr><th>Particular</th><th>Benificier</th><th>Bank</th><th>Branch</th><th>IFSC</th><th>Status</th></tr></thead><tbody><tr><td>Money Transfer</td><td>John Antony Francis</td><td>Federal</td><td>thrissur</td><td>SBIN454434343</td><td>Success</td></tr></tbody></table><table border="1"><tbody><tr><th>Amount Paid</th><td>Rs. 10</td></tr><tr><th>Service charge Paid</th><td>Rs. 5</td></tr><tr><th>Total</th><td>Rs. 15</td></tr></tbody></table></article><aside><h1>Thank You</h1><div><center><p>Janasevanakendra</p></center></div></aside>',
      //'<p>&nbsp;</p><p>Invoice</p><header><h1>Invoice Janasevanakendra Aug 12,2020</h1><div><div><address><p>JayaprakashJ</p><p>vattathara house</p><p>8089565212</p><p>jayaprakashvj@gmail.com</p><p>682508</p></address></div><div><img src="http://portal.janasevanakendra.com/assets/images/janasevalogo.png"/></div><div>&nbsp;</div></div></header><article><h1>Recipient</h1><address><p>Money Transfer</p></address><table><tbody><tr><th>Invoice</th><td>JNS.2020/08/12/11668</td></tr><tr><th>Date</th><td>Aug 12,2020</td></tr><tr><th>Amount</th><td>Rs. 10</td></tr></tbody></table><table><thead><tr><th>Particular</th><th>Benificier</th><th>Bank</th><th>Branch</th><th>IFSC</th><th>Status</th></tr></thead><tbody><tr><td>Money Transfer</td><td>John Antony Francis</td><td>Federal</td><td>thrissur</td><td>SBIN454434343</td><td>Success</td></tr></tbody></table><table><tbody><tr><th>Amount Paid</th><td>Rs. 10</td></tr><tr><th>Service charge Paid</th><td>Rs. 5</td></tr><tr><th>Total</th><td>Rs. 15</td></tr></tbody></table></article><aside><h1>Thank You</h1><div><center><p>Janasevanakendra</p></center></div></aside>',
      fileName: 'test',
      //File directory
      // directory: 'Documents',
    };

    let file = await RNHTMLtoPDF.convert(options);
    console.log(file.filePath);

    Share.open({
      url: `file://${file.filePath}`,
      type: 'application/pdf',
      title: 'Download PDF',
    });
    // this.onShare(file.filePath)
  }

  async onShare(path) {
    try {
      Share.open({
        url: path,
        title: 'acemoney transaction invoice',
        filename: 'ace_transaction_invoice',
        subject: 'Acemoney Transaction Invoice',
      });
    } catch (error) {
      this.errorAwesomeAlertMessage(error.message, 0);
    }
  }

  async getPer(uri) {
    try {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
        {
          title: 'Storage Access Permission',
          // message:
          //   'Cool Photo App needs access to your camera ' +
          //   'so you can take awesome pictures.',
          buttonNeutral: 'Ask Me Later',
          buttonNegative: 'Cancel',
          buttonPositive: 'OK',
        },
      );
      if (granted === PermissionsAndroid.RESULTS.GRANTED) {
        console.log('You can use the storage');
        //this.createPDF(data);
        this.imageCopy(uri);

        this;
      } else {
        console.log('access permission denied');
      }
    } catch (err) {
      console.warn(err);
    }
  }

  setProfileLoading(micro_atm_failed_data) {
    getProfile({micro_atm_failed_data})
      .then((result) => {
        if (result.data && result.data.success == true) {
          let data = [];

          AsyncStorage.setItem('micro_atm_failed_data', JSON.stringify(data));

          if (result.data.data) {
            store.dispatch({
              type: 'SET_MICRO_ATM_TYPE',
              payload: result.data.type ? result.data.type : '',
            });

            this.setState(
              {
                superAgent_Header: result.data.superagent,
                activated_tabs: result.data.applist,
                connect_to_micro_atm_username: result.data.loginid,
                connect_to_micro_atm_password: result.data.password,
                connect_to_micro_atm_mobileno: result.data.phoneno,
                connect_to_micro_atm_username_set:
                  result.data.loginid == '' ? false : true,
                connect_to_micro_atm_password_set:
                  result.data.password == '' ? false : true,
                connect_to_micro_atm_mobileno_set:
                  result.data.phoneno == '' ? false : true,
                profile_accno_name: result.data.data.accountname
                  ? result.data.data.accountname
                  : '',
                profile_accno_no: result.data.data.accountno
                  ? result.data.data.accountno
                  : '',
                profile_bank_name: result.data.data.bank_name
                  ? result.data.data.bank_name
                  : '',
                profile_bank_banch: result.data.data.bank_branch
                  ? result.data.data.bank_branch
                  : '',
                profile_ifsc_code: result.data.data.bank_ifsc
                  ? result.data.data.bank_ifsc
                  : '',
                profile_contact_details: result.data.contactdetails
                  ? result.data.contactdetails
                  : [],
                netInfoChange: true,
                profile_data: result.data.data,
                agentName: result.data.data.agname
                  ? result.data.data.lname
                    ? result.data.data.agname + ' ' + result.data.data.lname
                    : result.data.data.agname
                  : '',
                agent_email: result.data.data.email
                  ? result.data.data.email
                  : '',
                acccount_balance: result.data.data.balance
                  ? result.data.data.balance
                  : '',
                settlement_setup_settlement_activated:
                  result.data.settlement_status !== 'Empty'
                    ? result.data.settlement_status
                    : 'Empty',
                settlement_transfer_service_charge: result.data.data
                  .settlement_charge
                  ? parseInt(result.data.data.settlement_charge)
                  : 0,
                settlement_transfer_limit: result.data.limit,
              },
              () => {
                this.setState({profile_values_set: true});
              },
            );
          }
        }
        this.setState({profileLoading: false});
      })
      .catch((err) => {
        this.setState(
          {
            profileLoading: false,
            settingsLoading: false,
            changingPage: false,
            netInfoChange: false,
          },
          () => {},
        );

        console.log('Error', err.response);
      });
  }

  async pdfDownload(option, type) {
    try {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
      );
      if (granted === PermissionsAndroid.RESULTS.GRANTED) {
        this.pdfActualDownload(option, type);
      } else {
        this.setState({
          pdf_download_loading: false,
          pdf_share_loading: false,
        });
        Alert.alert(
          'Permission Denied!',
          'You need to give storage permission to download the file',
        );
      }
    } catch (err) {
      this.setState({
        pdf_download_loading: false,
        pdf_share_loading: false,
      });
      console.warn(err);
    }
  }

  pdfActualDownload = (option, type) => {
    const {dirs} = RNFetchBlob.fs;
    let file_name =
      'acemoney_' +
      'bc_certificate' +
      '_' +
      Math.floor(new Date().getTime() + new Date().getSeconds() / 2);
    let filePath = null;
    RNFetchBlob.config(
      option == 'download'
        ? {
            fileCache: true,
            addAndroidDownloads: {
              useDownloadManager: true,
              notification: option == 'download' ? true : false,
              mediaScannable: true,
              title: `${file_name}.pdf`,
              path:
                option == 'download'
                  ? `${dirs.DownloadDir}/${file_name}.pdf`
                  : `${dirs.CacheDir}/temp/foo/${file_name}.pdf`,
            },
          }
        : {fileCache: true, appendExt: 'pdf'},
    )
      .fetch(
        'GET',
        this.state.bcCertificateUrl,
        {},
        // {'Content-Type': 'multipart/form-data','Cache-Control': 'no-store'},
        // [
        //   {name: 'agent_email', data: store.getState().login.agentEmail},
        //   {name: 'billid', data:this.state.downloadPayload},
        // ],
      )
      .then((res) => {
        filePath = res.path();
        console.log('The file saved to ', res.path());

        if (option == 'download') {
          Mahagram.Toast(
            `File Download Complete\n${dirs.DownloadDir}/${file_name}.pdf`,
          );
          this.setState({
            pdf_download_loading: false,
            pdf_share_loading: false,
          });
        } else {
          return res.readFile('base64');
        }
      })

      .then(async (base64Data) => {
        base64Data = (await `data:application/pdf;base64,`) + base64Data;
        console.log('PDF RNF then2', base64Data);

        try {
          await Share.open({
            url: base64Data,
            type: 'application/pdf',
            title: 'acemoney_' + 'BC_certificate',
            filename: file_name + '.pdf',
            subject: 'acemoney_' + 'BC_certificate',
          });
          // remove the image or pdf from device's storage
          await RNFS.unlink(filePath);
          this.setState({
            pdf_download_loading: false,
            pdf_share_loading: false,
          });
        } catch (error) {
          this.setState({
            pdf_download_loading: false,
            pdf_share_loading: false,
          });
          console.log('PDF then2 err', error);
        }
      })
      .catch((e) => {
        this.setState({
          pdf_download_loading: false,
          pdf_share_loading: false,
        });
        console.log(e);
      });
  };

  profileLoading() {
    AsyncStorage.getItem('micro_atm_failed_data')
      .then((result) => {
        console.log(result, 'async');
        if (result !== null) {
          this.setProfileLoading(result);
        } else {
          let data = [];

          AsyncStorage.setItem('micro_atm_failed_data', JSON.stringify(data));

          this.setProfileLoading(JSON.stringify(data));
        }
      })
      .catch((err) => {});
  }

  componentDidMount() {
    // this.downloadFile()
    this.loadBalance();
    this.unsubscribe = NetInfo.addEventListener((state) => {
      console.log(state);
      if (this.state.pageDepth == -3 && state.isConnected == true) {
        this.setState({balanceLoading: true}, () => {
          this.loadBalance().then((val) => {
            this.setState({balanceLoading: false});
          });
        });
      }
      if (this.state.netInfoChange == false) {
        this.setState({profileLoading: true}, () => {
          this.profileLoading();
        });
      }
    });

    this.deviceEmitListener = DeviceEventEmitter.addListener(
      'onSessionConnect',
      this.onSessionConnect,
    );
    this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', () =>
      this.setState({keyboardOpen: true}),
    );
    this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', () =>
      this.setState({keyboardOpen: false}),
    );
  }

  componentWillMount() {
    BackHandler.addEventListener(
      'hardwareBackPress',
      this.handleBackButtonClick,
    );
  }

  componentWillUnmount() {
    //Orientation.unlockAllOrientations();
    this.keyboardDidShowListener.remove();
    this.keyboardDidHideListener.remove();
    this.deviceEmitListener.remove();
    BackHandler.removeEventListener(
      'hardwareBackPress',
      this.handleBackButtonClick,
    );
    //this.navFocusListener.remove();

    // BackHandler.removeEventListener("hardwareBackPress", this.handleBackPress);
    this.setState({netInfoChange: true}, () => {
      this.unsubscribe();
    });
  }

  render() {
    return (
      <SafeAreaView
        style={{
          flex: 1,
          backgroundColor: '#fff',
        }}>
        {/* Home Page Components */}
        {true && this.getModal_one()}
        {true && this.getModal_two()}
        {true && this.getModal_three()}
        {this.state.settingsLoading && (
          <CenterLoading
            color={'black'}
            animating={this.state.settingsLoading}
          />
        )}
        {/* Pages */}
        {this.state.changingPage == true && (
          <View style={{flex: 1, width: '100%'}} />
        )}
        {/* Profile page */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == -3 &&
          this.state.showBCPage == false &&
          this.state.showDashboard == false &&
          this.getProfilePage()}
        {/* BC Certificate page */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == -3 &&
          this.state.showBCPage == true &&
          this.state.showDashboard == false &&
          this.getBCCertificatePage()}

        {/* Dashboard page */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == -3 &&
          this.state.showBCPage == false &&
          this.state.showDashboard == true &&
          this.state.showDashboardHistory == false &&
          this.getDashboardPage()}

        {/* Dashboard history Page */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == -3 &&
          this.state.showBCPage == false &&
          this.state.showDashboard == true &&
          this.state.showDashboardHistory == true &&
          this.getHistory('Agent Dashboard History')}

        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == -1 &&
          this.getHistory('report')}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 0 &&
          this.getHome()}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 1 &&
          this.getStepOne()}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 2 &&
          this.getStepTwo()}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 3 &&
          this.getStepThree()}
        {/* {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 4 &&
          this.getHistory('report')} */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 5 &&
          store.getState().login.microatm_type == 'mahagram' &&
          this.getHistory('mahagram')}

        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 5 &&
          store.getState().login.microatm_type == 'icic' &&
          this.getHistory('icici')}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 6 &&
          this.getListingPageTemplate('Bill Payments')}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 7 &&
          this.getListingPageTemplate('Recharge')}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 8 &&
          this.getListingPageTemplate('Money Transfer')}

        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 36 &&
          this.getListingPageTemplate('Aeps Services')}

        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 37 &&
          this.getListingPageTemplate('Fastag Services')}

        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 39 &&
          this.getListingAndDetailsPageTemplate('TeacherInd Services')}

        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 38 &&
          this.getListingPageTemplate('Other Services')}

        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 9 &&
          this.state.settlement_setup_settlement_activated == 'notactivated' &&
          this.getSettlementSetupPage()}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 9 &&
          this.state.settlement_setup_settlement_activated == 'Approved' &&
          this.getListingPageTemplate('Settlement')}
        {/* Bill payment pages -Payment section */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 10 &&
          this.getKsebPaymentPage()}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 11 &&
          this.getWaterAuthorityPaymentPage()}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 12 &&
          this.getBsnlPaymentPage()}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 13 &&
          this.getAsianetPaymentPage()}
        {/* Recharge Pages -Payment Section */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 18 &&
          this.getMobilePaymentPage()}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 19 &&
          this.getDthPaymentPage()}


         {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 22 && this.state.money_transfer_verify_number_status==false &&this.state.money_transfer_verify_otp_status==false &&
          this.getMobileVerificationPageMoneyTransfer()}

        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 22 && this.state.money_transfer_verify_number_status==true &&this.state.money_transfer_verify_otp_status==false &&
          this.getOTPVerificationPageMoneyTransfer()}
 
        {/* Money Transfer Pages -Payment Section */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 22 && this.state.money_transfer_verify_number_status==true &&this.state.money_transfer_verify_otp_status==true &&
          this.getMoneyTransferListPage()}
        
      

        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 23 &&
          this.getWalletRequestPage()}
        {/* Update KYC */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 72 &&
          this.getUpdateKYCPage()}

        {/* New Fastag  page -1 */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 48 &&
          this.getNewFastagPage()}

        {/* new fastag page -2*/}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 54 &&
          this.getNewFastagPaymentPage()}

        {/* Fastag Recharge page */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 49 &&
          this.getFastagRechargePage()}

        {/* Fastag Recharge page icici */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 73 &&
          this.getFastagRechargeIciciPage()}

        {/* TeacherInd registration page */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 68 &&
          this.getTeacherIndRegistrationPage()}

        {/* Bill payment pages -History section */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 14 &&
          this.getHistory('kseb')}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 15 &&
          this.getHistory('water_authority')}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 16 &&
          this.getHistory('bsnl')}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 17 &&
          this.getHistory('asianet')}

        {/* Recharge Pages -History Section */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 20 &&
          this.getHistory('mobile')}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 21 &&
          this.getHistory('dth')}
        {/* Money Transfer Pages -History Section */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 24 &&
          this.getHistory('transfer_beneficiary')}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 25 &&
          this.getHistory('wallet_request')}
        {/* Money Transfer -Add /edit Benefiary */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 26 &&
          this.getAddBenficiaryDetailsPage()}
        {/* Money Transfer -Send Money */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 27 &&
          this.getTransferToBeneficiary()}

        {/* Settlement payment page */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 28 &&
          this.getSettlementPage()}
        {/* Settlement History */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 29 &&
          this.getHistory('settlement')}

        {/* vehicle insurance commission History */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 47 &&
          this.getHistory('Vehicle Commission History')}

        {/* health insurance commission History */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 51 &&
          this.getHistory('Health Commission History')}

        {/* travel insurance commission History */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 53 &&
          this.getHistory('Travel Commission History')}

        {/* travel insurance commission History */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 66 &&
          this.getHistory('Fastag Registration History')}

        {/* travel insurance commission History */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 67 &&
          this.getHistory('Fastag Recharge History')}

        {/* travel insurance commission History */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 74 &&
          this.getHistory('Fastag Recharge Icici History')}

        {/* TeacherInd Registration History */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 69 &&
          this.getHistory('TeacherInd Registration History')}

        {/* AEPS Transaction History */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 71 &&
          this.getHistory('AEPS Transaction History')}

        {/* Commission Request vehicle Page */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 46 &&
          this.getCommissionRequestPage_vehicle()}

        {/* Commission Request health Page */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 50 &&
          this.getCommissionRequestPage_health()}

        {/* Commission Request health Page */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 52 &&
          this.getCommissionRequestPage_travel()}

        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 30 &&
          // true &&
          this.getTranasferSuccessPage()}

        {/* Insurance services listing page */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 31 &&
          this.getListingPageTemplate('Insurace Services')}

        {/* Helpline contacts */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 32 &&
          this.getHelpLineContacts('Helpline Contacts')}

        {/* Connect to MicroAtm Page */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == false &&
          this.state.pageDepth == 4 &&
          this.getConnectToMicroAtm()}

        {/* All History Page */}
        {this.state.changingPage == false &&
          this.state.show_all_transaction_history == true &&
          this.getAllHistory('alltransaction')}

        {/* Header --bottom bar  */}
        {true && this.getHeader()}

        {/* Aweome success alert */}
        <AwesomeAlert
          show={this.state.awesomeAlertShow}
          showProgress={false}
          title="Success!"
          message={this.state.awesomeAlertMessage}
          closeOnTouchOutside={false}
          closeOnHardwareBackPress={true}
          showCancelButton={false}
          showConfirmButton={true}
          cancelText="Stay here"
          confirmText="Ok, continue"
          confirmButtonColor="#77D79A"
          onCancelPressed={() => {
            this.setState({awesomeAlertShow: false}, () => {
              setTimeout(() => {
                this.handleBackButtonClick();
              }, 500);
            });
          }}
          onConfirmPressed={() => {
            this.setState({awesomeAlertShow: false}, () => {
              setTimeout(() => {
                this.handleBackButtonClick();
              }, 500);
            });
          }}
          onDismiss={() => {
            this.setState({awesomeAlertShow: false}, () => {
              setTimeout(() => {
                this.handleBackButtonClick();
              }, 500);
            });
          }}
        />
        {/* Aweome Error Alert */}
        <AwesomeAlert
          show={this.state.awesomeErrorAlertShow}
          showProgress={false}
          title="Error!"
          message={this.state.awesomeErrorAlertMessage}
          closeOnTouchOutside={false}
          closeOnHardwareBackPress={true}
          showCancelButton={false}
          showConfirmButton={true}
          cancelText="Stay here"
          confirmText="Ok, continue"
          confirmButtonColor="#DD6B55"
          onCancelPressed={() => {
            this.setState({awesomeErrorAlertShow: false});
          }}
          onConfirmPressed={() => {
            this.setState({awesomeErrorAlertShow: false});
          }}
          onDismiss={() => {
            this.setState({awesomeErrorAlertShow: false});
          }}
        />
        {/* General awesome alert */}
        <AwesomeAlert
          show={this.state.awesomeGeneralAlertShow}
          showProgress={false}
          title="Alert!"
          message={this.state.awesomeGeneralAlertMessage}
          closeOnTouchOutside={false}
          closeOnHardwareBackPress={true}
          showCancelButton={false}
          showConfirmButton={true}
          cancelText="Stay here"
          confirmText="Ok, continue"
          confirmButtonColor="#449DF5"
          onCancelPressed={() => {
            this.setState({awesomeGeneralAlertShow: false}, () => {
              if (
                this.state.awesomeGeneralAlertMessage ==
                'Database Updation Failed.\nRe-Sending Data To Server'
              ) {
                setTimeout(() => {
                  this.profileLoading();
                }, 500);
              }
            });
          }}
          onConfirmPressed={() => {
            this.setState({awesomeGeneralAlertShow: false}, () => {
              if (
                this.state.awesomeGeneralAlertMessage ==
                'Database Updation Failed.\nRe-Sending Data To Server'
              ) {
                setTimeout(() => {
                  this.profileLoading();
                }, 500);
              }
            });
          }}
          onDismiss={() => {
            this.setState({awesomeGeneralAlertShow: false}, () => {
              if (
                this.state.awesomeGeneralAlertMessage ==
                'Database Updation Failed.\nRe-Sending Data To Server'
              ) {
                setTimeout(() => {
                  this.profileLoading();
                }, 500);
              }
            });
          }}
        />
        {/* Details awesome alert */}
        <AwesomeAlert
          show={this.state.awesomeDetailsAlertShow}
          showProgress={false}
          title="Login Details!"
          message={this.state.awesomeDetailsAlertMessage}
          closeOnTouchOutside={false}
          closeOnHardwareBackPress={true}
          showCancelButton={true}
          showConfirmButton={true}
          cancelText="Cancel"
          confirmText="Ok, continue"
          confirmButtonColor="#449DF5"
          onCancelPressed={() => {
            this.setState({awesomeDetailsAlertShow: false});
          }}
          onConfirmPressed={() => {
            this.setState({awesomeDetailsAlertShow: false}, () => {
              if (this.state.awesomeDetailsAlerpageDepth == 43) {
                // Username : 20238080
                // Password : india@123
                this.openUrlFunction(
                  'https://faveo.religarehealthinsurance.com/Faveo/agencyportal/#/auth/login',
                );
              } else if (this.state.awesomeDetailsAlerpageDepth == 44) {
                // Username : AG_0079871
                // Password : Manesh1234@
                this.openUrlFunction('https://web.newindia.co.in/');
              } else if (this.state.awesomeDetailsAlerpageDepth == 45) {
                // Username : 20183144
                // Password : India@123
                this.openUrlFunction(
                  'https://faveo.religarehealthinsurance.com/Faveo/agencyportal/#/auth/login',
                );
              }
            });
          }}
          onDismiss={() => {
            this.setState({awesomeDetailsAlertShow: false});
          }}
        />

        {/* Bluetooth Awesome alert */}
        <AwesomeAlert
          show={this.state.awesomeBluetoothAlertShow}
          showProgress={false}
          title="Alert!"
          message={'Please turn on your bluetooth'}
          closeOnTouchOutside={false}
          closeOnHardwareBackPress={true}
          showCancelButton={false}
          showConfirmButton={true}
          cancelText="Stay here"
          confirmText="Ok, continue"
          confirmButtonColor="#449DF5"
          onCancelPressed={() => {
            this.setState({awesomeBluetoothAlertShow: false});
          }}
          onConfirmPressed={() => {
            this.setState({awesomeBluetoothAlertShow: false}, () => {
              setTimeout(() => {
                AndroidOpenSettings.bluetoothSettings();
              }, 500);
            });
          }}
          onDismiss={() => {
            this.setState({awesomeBluetoothAlertShow: false});
          }}
        />
        {/* Logout Awesome Alert */}

        <AwesomeAlert
          show={this.state.awesomeLogoutAlertShow}
          showProgress={false}
          title="Logout!"
          message={'Do you want to logout?'}
          closeOnTouchOutside={false}
          closeOnHardwareBackPress={true}
          showCancelButton={true}
          showConfirmButton={true}
          cancelText="Stay here"
          confirmText="Ok, continue"
          confirmButtonColor="#449DF5"
          onCancelPressed={() => {
            this.setState({awesomeLogoutAlertShow: false});
          }}
          onConfirmPressed={() => {
            this.setState({awesomeLogoutAlertShow: false}, () => {
              setTimeout(() => {
                failedCall({
                  insertedId: this.state.insertedId,
                })
                  .then((result) => {})
                  .catch((err) => {
                    this.setState(
                      {settingsLoading: false, changingPage: false},
                      () => {},
                    );

                    console.log('Error', err.response);
                  });
                AsyncStorage.setItem('refresh_token', 'xxxx').then((result) => {
                  let data = [];
                  AsyncStorage.setItem(
                    'micro_atm_failed_data',
                    JSON.stringify(data),
                  );
                  AsyncStorage.setItem('agent_email', '');
                  NavigatorService.reset('LoginScreen');
                });
              }, 500);
            });
          }}
          onDismiss={() => {
            this.setState({awesomeLogoutAlertShow: false});
          }}
        />
      </SafeAreaView>
    );
  }

  handleBackButtonClick() {
    if (
      this.state.showDashboard == true &&
      this.state.showDashboardHistory == true
    ) {
      this.setState(
        {changingPage: true, settingsLoading: true},
        () => {
          setTimeout(() => {
            this.setState({
              showDashboardHistory: false,
              changingPage: false,
              settingsLoading: false,
            });
          });
        },
        100,
      );
    } else if (
      this.state.showDashboard == true &&
      this.state.showDashboardHistory == false
    ) {
      this.setState(
        {changingPage: true, settingsLoading: true},
        () => {
          setTimeout(() => {
            this.setState({
              showDashboard: false,
              changingPage: false,
              settingsLoading: false,
            });
          });
        },
        100,
      );
    } else if (this.state.showBCPage == true) {
      this.setState(
        {changingPage: true, settingsLoading: true},
        () => {
          setTimeout(() => {
            this.setState({
              showBCPage: false,
              changingPage: false,
              settingsLoading: false,
            });
          });
        },
        100,
      );
    } else {
      if (this.state.show_all_transaction_history == true) {
        this.setState({changingPage: true, settingsLoading: true}, () => {
          setTimeout(() => {
            this.setState(
              {
                show_all_transaction_history: false,
                changingPage: false,
                settingsLoading: false,
              },
              () => {
                this.setState({
                  allhistory_refreshing: false,
                  allhistory_refreshingValue: false,
                  allhistory_historyData: [],
                  allhistory_searchKey: '',
                  allhistory_searchData: [],
                  allhistory_tempData: [],
                  allhistory_searching: false,
                  allhistory_modalOpen: false,
                  allhistory_fromDate: '',
                  allhistory_fromDatePicker: false,
                  allhistory_toDate: '',
                  allhistory_toDatePicker: false,
                  allhistory_minimumDate: '',
                  allhistory_maximumDate: '',
                  allhistory_tempFromDate: '',
                  allhistory_tempToDate: '',
                  allhistory_filteredData: [],
                  allhistory_settingFilter: false,
                  allhistory_keyboardOpen: false,
                  allhistory_type: 'BOTH',
                  allhistory_tempType: 'BOTH',
                  allhistory_tempData: [],
                  allhistory_mainData: [],
                  allhistory_singleDateInModal: false,
                  allhistory_singleDatePicker: false,
                  allhistory_singleOption: false,
                  allhistory_singleOption_tempSingleDate: '',
                  allhistory_singleOption_tempFromDate: '',
                  allhistory_singleOption_tempTODate: '',
                });
              },
            );
          }, 100);
        });
      } else {
        if (this.state.buttonLoading == false) {
          if (this.state.pageDepth == 0) {
            BackHandler.exitApp();
          } else if (this.state.pageDepth == 4) {
            if (store.getState().login.microatm_type == 'mahagram') {
              this.props.navigation.goBack(null);
              this.setState({reportLoading: true}, () => {
                NavigatorService.reset('HomeScreen');
              });
            } else {
              this.setState(
                {
                  changingPage: true,
                  settingsLoading: true,

                  connect_to_micro_atm_amount: 0,
                  connect_to_micro_atm_remarks: '',
                  connect_to_micro_atm_radio_button_value: 1,
                },
                () => {
                  setTimeout(() => {
                    this.setState({
                      pageDepth: 0,
                      settingsLoading: false,
                      changingPage: false,
                    });
                  }, 100);
                },
              );
            }
          } else if (this.state.pageDepth == -1) {
            this.setState({changingPage: true, settingsLoading: true}, () => {
              setTimeout(() => {
                this.setState({
                  pageDepth: 0,
                  settingsLoading: false,
                  changingPage: false,
                });
              }, 100);
            });
          } else if (this.state.pageDepth == -3) {
            this.setState({changingPage: true, settingsLoading: true}, () => {
              setTimeout(() => {
                this.setState({
                  pageDepth: this.state.profilePreviousDepth,
                  settingsLoading: false,
                  changingPage: false,
                });
              }, 100);
            });
          } else if (
            this.state.pageDepth == 5 ||
            this.state.pageDepth == 6 ||
            this.state.pageDepth == 7 ||
            this.state.pageDepth == 8 ||
            this.state.pageDepth == 9 ||
            this.state.pageDepth == 31 ||
            this.state.pageDepth == 32 ||
            this.state.pageDepth == 36 ||
            this.state.pageDepth == 37 ||
            this.state.pageDepth == 39
          ) {
            this.setState({changingPage: true, settingsLoading: true}, () => {
              setTimeout(() => {
                this.setState({
                  pageDepth: 0,
                  settingsLoading: false,
                  changingPage: false,
                });
              }, 100);
            });
          } else if (
            this.state.pageDepth == 10 ||
            this.state.pageDepth == 11 ||
            this.state.pageDepth == 12 ||
            this.state.pageDepth == 13 ||
            this.state.pageDepth == 18 ||
            this.state.pageDepth == 19 ||
            this.state.pageDepth == 22 ||
            this.state.pageDepth == 23 ||
            this.state.pageDepth == 28 ||
            this.state.pageDepth == 46 ||
            this.state.pageDepth == 49 ||
            this.state.pageDepth == 68 ||
            this.state.pageDepth == 50 ||
            this.state.pageDepth == 52 ||
            this.state.pageDepth == 54 ||
            this.state.pageDepth == 72
          ) {
            // change to default values on backpress - back button
            this.setDefaulValues(this.state.pageDepth);
            this.setState({changingPage: true, settingsLoading: true}, () => {
              setTimeout(() => {
                if (this.state.pageDepth == 22) {
                  this.setState({
                    money_transfer_verify_number:'',
                    money_transfer_verify_number_status:false,
                    money_transfer_verify_otp:'',
                    money_transfer_verify_otp_status:false,
                    money_transfer_list_moneyTrasferPageEditable: false,
                  });
                } else if (this.state.pageDepth == 28) {
                  this.setState({settlement_transfer_amount: 0});
                }
                this.setState(
                  {
                    pageDepth: this.state.previousDepth,
                    settingsLoading: false,
                    changingPage: false,
                  },
                  () => {
                    if (this.state.pageDepth == 48) {
                      this.setState({
                        fastag_newfastag_applyfor: '',
                        fastag_newfastag_amount: 0,
                        fastag_newfastag_service_charge: 0,
                        fastag_newfastag_vehicle_class: '',
                        fastag_newfastag_vehicle_number: '',
                        fastag_newfastag_name: '',
                        fastag_newfastag_mobile_number: '',
                        fastag_newfastag_address: '',
                        fastag_newfastag_fastag_number: '',
                        fastag_newfastag_paytm_mobile_number: '',
                        fastag_newfastag_commercial_type: 1,
                        fastag_newfastag_front_of_rc_file: {},
                        fastag_newfastag_front_of_rc_file_status: false,
                        fastag_newfastag_back_of_rc_file: {},
                        fastag_newfastag_back_of_rc_file_status: false,
                        fastag_newfastag_fastag_photo_file: null,
                        fastag_newfastag_fastag_photo_file_status: false,
                        kyc_update_document_file: {},
                        kyc_update_document_file_status: false,
                      });
                    }
                  },
                );
              }, 100);
            });
          } else if (
            this.state.pageDepth == 26 ||
            this.state.pageDepth == 27 ||
            this.state.pageDepth == 30
          ) {
            // change to default values on backpress - back button
            this.setDefaulValues(this.state.pageDepth);
            this.setState({changingPage: true, settingsLoading: true}, () => {
              setTimeout(() => {
                this.setState({
                  pageDepth: 22,
                  settingsLoading: false,
                  changingPage: false,
                });
              }, 10);
            });
          } else if (this.state.pageDepth == 48) {
            // change to default values on backpress - back button
            this.setDefaulValues(this.state.pageDepth);
            this.setState({changingPage: true, settingsLoading: true}, () => {
              setTimeout(() => {
                this.setState({
                  pageDepth: 37,
                  settingsLoading: false,
                  changingPage: false,
                });
              }, 10);
            });
          } else if (
            this.state.pageDepth == 14 ||
            this.state.pageDepth == 15 ||
            this.state.pageDepth == 16 ||
            this.state.pageDepth == 17 ||
            this.state.pageDepth == 20 ||
            this.state.pageDepth == 21 ||
            this.state.pageDepth == 24 ||
            this.state.pageDepth == 25 ||
            this.state.pageDepth == 29 ||
            this.state.pageDepth == 38 ||
            this.state.pageDepth == 47 ||
            this.state.pageDepth == 51 ||
            this.state.pageDepth == 53 ||
            this.state.pageDepth == 66 ||
            this.state.pageDepth == 67 ||
            this.state.pageDepth == 69 ||
            this.state.pageDepth == 71 ||
            this.state.pageDepth == 74
          ) {
            this.setState({changingPage: true, settingsLoading: true}, () => {
              setTimeout(() => {
                this.setState({
                  pageDepth: this.state.previousDepth,
                  settingsLoading: false,
                  changingPage: false,
                });
              }, 100);
            });
          } else if (this.state.pageDepth == 73) {
            this.setDefaulValues(this.state.pageDepth);
            this.setState({changingPage: true, settingsLoading: true}, () => {
              setTimeout(() => {
                this.setState({
                  pageDepth: this.state.previousDepth,
                  settingsLoading: false,
                  changingPage: false,
                });
              }, 100);
            });
          } else {
            this.setState({changingPage: true, settingsLoading: true}, () => {
              let temppageDepth = this.state.pageDepth;
              setTimeout(() => {
                this.setState(
                  {
                    pageDepth: this.state.pageDepth - 1,
                  },
                  () => {
                    if (temppageDepth == 2) {
                      failedCall({
                        insertedId: this.state.insertedId,
                      })
                        .then((result) => {
                          this.setState({name: '', mobile: '', insertedId: ''});
                        })
                        .catch((err) => {
                          this.setState({}, () => {});
                          this.setState({name: '', mobile: '', insertedId: ''});
                          console.log('Error', err.response);
                        });
                    } else if (temppageDepth == 1) {
                      this.setState({name: '', mobile: '', insertedId: ''});
                    } else if (temppageDepth == 3);
                    {
                      this.setState({
                        orderId: '',
                        stepTwoDate: moment().format('DD-MM-YYYY'),
                        amount: 0,
                      });
                    }
                  },
                );
                this.setState({
                  settingsLoading: false,
                  changingPage: false,
                });
              }, 100);
            });
          }
        } else {
          Mahagram.Toast('Processing..please wait..');
        }
      }
    }
    return true;
  }

  onPressFunction(pageDepth) {
    if(this.state.showBCPage==true ||this.state.showDashboard==true ||this.state.showDashboardHistory==true)
    {
      this.setState({showBCPage: false, showDashboard: false,showDashboardHistory:false});
    }

    if (
      this.state.profile_values_set == true &&
      pageDepth !== -2 &&
      pageDepth !== -3
    ) {
      if (pageDepth == 1) {
        this.setState(
          {
            changingPage: true,
            settingsLoading: true,
            previousDepth: this.state.pageDepth,
          },
          () => {
            setTimeout(() => {
              this.setState({
                pageDepth: 1,
                settingsLoading: false,
                changingPage: false,
              });
            }, 100);
          },
        );
      } else if (
        pageDepth == 40 ||
        pageDepth == 41 ||
        pageDepth == 42 ||
        pageDepth == 55
      ) {
        Mahagram.Toast('Under Progress');
      } else if (
        pageDepth == -1 ||
        pageDepth == 14 ||
        pageDepth == 15 ||
        pageDepth == 16 ||
        pageDepth == 17 ||
        pageDepth == 20 ||
        pageDepth == 21 ||
        pageDepth == 24 ||
        pageDepth == 25 ||
        pageDepth == 29 ||
        pageDepth == 47 ||
        pageDepth == 51 ||
        pageDepth == 53 ||
        pageDepth == 66 ||
        pageDepth == 67 ||
        pageDepth == 69 ||
        pageDepth == 71 ||
        pageDepth == 74
      ) {
        this.setState(
          {
            previousDepth: this.state.pageDepth,
            historyData: [],
            filteredData: [],
            searchData: [],
            changingPage: true,
            settingsLoading: true,
            reportLoading: true,
          },
          () => {
            setTimeout(() => {
              this.setState(
                {
                  pageDepth,
                  settingsLoading: false,
                  changingPage: false,
                  refreshing: false,
                  refreshingValue: false,
                  historyData: [],
                  searchKey: '',
                  searchData: [],
                  tempData: [],
                  searching: false,
                  modalOpen: false,
                  fromDate: '',
                  fromDatePicker: false,
                  toDate: '',
                  toDatePicker: false,
                  minimumDate: '',
                  maximumDate: '',
                  tempFromDate: '',
                  tempToDate: '',
                  filteredData: [],
                  settingFilter: false,
                  keyboardOpen: false,
                  type: 'BOTH',
                  tempType: 'BOTH',
                  tempData: [],
                  mainData: [],
                  singleDateInModal: false,
                  singleDatePicker: false,
                  singleOption: false,
                  singleOption_tempSingleDate: '',
                  singleOption_tempFromDate: '',
                  singleOption_tempTODate: '',
                },
                () => {
                  if (pageDepth == -1) {
                    this.getReportHistoryData();
                  } else if (pageDepth == 5) {
                    this.getMahagramReportHistoryData();
                  } else if (pageDepth == 14) {
                    this.getKsebHistoryDetails();
                  } else if (pageDepth == 15) {
                    this.getWaterAuthorityHistoryDetails();
                  } else if (pageDepth == 16) {
                    this.getBsnlHistoryDetails();
                  } else if (pageDepth == 17) {
                    this.getAsianetHistoryDetails();
                  } else if (pageDepth == 20) {
                    this.getMobileHistoryDetails();
                  } else if (pageDepth == 21) {
                    this.getDthHistoryDetails();
                  } else if (pageDepth == 24) {
                    this.getMoneyTransferHistory();
                  } else if (pageDepth == 25) {
                    this.getWalletRequestHistory();
                  } else if (pageDepth == 29) {
                    this.getSettlementHistory();
                  } else if (pageDepth == 47) {
                    this.getVehicleCommission_Insurance_History();
                  } else if (pageDepth == 51) {
                    this.getHealthCommission_Insurance_History();
                  } else if (pageDepth == 53) {
                    this.getTravelCommission_Insurance_History();
                  } else if (pageDepth == 66) {
                    this.getFastagRegistration_History();
                  } else if (pageDepth == 67) {
                    this.getFastagRecharge_History();
                  } else if (pageDepth == 69) {
                    this.getTeacherIndRegistration_History();
                  } else if (pageDepth == 71) {
                    this.getAEPSTransaction_History();
                  } else if (pageDepth == 74) {
                    this.getFastagRecharge_Icici_History();
                  }
                },
              );
            }, 100);
          },
        );
      } else if (pageDepth == 5) {
        this.setState(
          {
            previousDepth: this.state.pageDepth,
            historyData: [],
            filteredData: [],
            searchData: [],
            changingPage: true,
            settingsLoading: true,
            reportLoading: true,
          },
          () => {
            setTimeout(() => {
              this.setState(
                {
                  pageDepth,
                  settingsLoading: false,
                  changingPage: false,
                  refreshing: false,
                  refreshingValue: false,
                  historyData: [],
                  searchKey: '',
                  searchData: [],
                  tempData: [],
                  searching: false,
                  modalOpen: false,
                  fromDate: '',
                  fromDatePicker: false,
                  toDate: '',
                  toDatePicker: false,
                  minimumDate: '',
                  maximumDate: '',
                  tempFromDate: '',
                  tempToDate: '',
                  filteredData: [],
                  settingFilter: false,
                  keyboardOpen: false,
                  type: 'BOTH',
                  tempType: 'BOTH',
                  tempData: [],
                  mainData: [],
                  singleDateInModal: false,
                  singleDatePicker: false,
                  singleOption: false,
                  singleOption_tempSingleDate: '',
                  singleOption_tempFromDate: '',
                  singleOption_tempTODate: '',
                },
                () => {
                  if (pageDepth == -1) {
                    this.getReportHistoryData();
                  } else if (pageDepth == 5) {
                    if (store.getState().login.microatm_type == 'mahagram') {
                      this.getMahagramReportHistoryData();
                    } else {
                      this.getIciciReportHistoryData();
                    }
                  } else if (pageDepth == 14) {
                    this.getKsebHistoryDetails();
                  } else if (pageDepth == 15) {
                    this.getWaterAuthorityHistoryDetails();
                  } else if (pageDepth == 16) {
                    this.getBsnlHistoryDetails();
                  } else if (pageDepth == 17) {
                    this.getAsianetHistoryDetails();
                  } else if (pageDepth == 20) {
                    this.getMobileHistoryDetails();
                  } else if (pageDepth == 21) {
                    this.getDthHistoryDetails();
                  } else if (pageDepth == 24) {
                    this.getMoneyTransferHistory();
                  } else if (pageDepth == 25) {
                    this.getWalletRequestHistory();
                  } else if (pageDepth == 29) {
                    this.getSettlementHistory();
                  }
                },
              );
            }, 100);
          },
        );
      } else if (pageDepth == 70) {
        this.getMahagramAepsData();
      } else if (pageDepth == 4) {
        if (store.getState().login.microatm_type == 'mahagram') {
          BleManager.enableBluetooth()
            .then(() => {
              // Success code
              console.log(
                'The bluetooth is already enabled or the user confirm',
              );
              //this.locationEnable();
              this.locationEnable_Mahagram();
            })
            .catch((error) => {
              //Failure code
              //  this.bluetoothAwesomeAlertMessage();
            });
        } else {
          this.setState(
            {
              changingPage: true,
              settingsLoading: true,
              previousDepth: this.state.pageDepth,
            },
            () => {
              setTimeout(() => {
                this.setState({
                  pageDepth,
                  settingsLoading: false,
                  changingPage: false,
                });
              }, 100);
            },
          );
        }
      } else if (
        pageDepth == 6 ||
        pageDepth == 7 ||
        pageDepth == 8 ||
        pageDepth == 31
      ) {
        let billpayment_key = 1;
        let recharge_key = 1;
        let money_transfer_key = 1;
        let insurance_key = 1;
        if (this.state.activated_tabs.Billpayment == false && pageDepth == 6) {
          billpayment_key = 0;
        }
        if (
          this.state.activated_tabs.Moneytransfer == false &&
          pageDepth == 8
        ) {
          money_transfer_key = 0;
        }
        if (this.state.activated_tabs.Recharges == false && pageDepth == 7) {
          recharge_key = 0;
        }
        if (this.state.activated_tabs.Insurance == false && pageDepth == 31) {
          insurance_key = 0;
        }

        if (
          billpayment_key == 1 &&
          recharge_key == 1 &&
          money_transfer_key == 1 &&
          insurance_key == 1
        ) {
          this.setState(
            {
              changingPage: true,
              settingsLoading: true,
              previousDepth: this.state.pageDepth,
              historyData: [],
              filteredData: [],
              searchData: [],
              settlement_transfer_service_charge: 0,
              settlement_transfer_limit: 0,
            },
            () => {
              setTimeout(() => {
                this.setState({
                  pageDepth,
                  settingsLoading: false,
                  changingPage: false,
                  settlement_transfer_status_loading: true,
                });
              }, 100);
            },
          );
        } else {
          if (pageDepth == 6) {
            Mahagram.Toast(
              'Payments option is not activated\nContact admin for activation',
            );
          } else if (pageDepth == 7) {
            Mahagram.Toast(
              'Recharge option is not activated\nContact admin for activation',
            );
          } else if (pageDepth == 8) {
            Mahagram.Toast(
              'Transfer option is not activated\nContact admin for activation',
            );
          } else if (pageDepth == 31) {
            Mahagram.Toast(
              'Insurance option is not activated\nContact admin for activation',
            );
          }
        }
      } else if (
        pageDepth == 28 ||
        pageDepth == 32 ||
        pageDepth == 36 ||
        pageDepth == 38 ||
        pageDepth == 46 ||
        pageDepth == 48 ||
        pageDepth == 49 ||
        pageDepth == 68 ||
        pageDepth == 37 ||
        pageDepth == 50 ||
        pageDepth == 52 ||
        pageDepth == 72 ||
        pageDepth == 54 ||
        pageDepth == 73
      ) {
        this.setState(
          {
            changingPage: true,
            settingsLoading: true,
            previousDepth: this.state.pageDepth,
            historyData: [],
            filteredData: [],
            searchData: [],
            settlement_transfer_service_charge: 0,
            settlement_transfer_limit: 0,
          },
          () => {
            setTimeout(() => {
              this.setState(
                {
                  pageDepth,
                  settingsLoading: false,
                  changingPage: false,
                  settlement_transfer_status_loading: true,
                },
                () => {
                  if (pageDepth == 28) {
                    let data = [];
                    getProfile({micro_atm_failed_data: JSON.stringify(data)})
                      .then((result) => {
                        if (result.data && result.data.success == true) {
                          if (result.data.data) {
                            this.setState(
                              {
                                settlement_transfer_service_charge: result.data
                                  .data.settlement_charge
                                  ? parseInt(result.data.data.settlement_charge)
                                  : 0,
                                settlement_transfer_limit: result.data.limit,
                              },
                              () => {},
                            );
                          }
                        }
                        this.setState({
                          settlement_transfer_status_loading: false,
                        });
                      })
                      .catch((err) => {
                        console.log('Error', err.response);
                        this.setState({
                          settlement_transfer_status_loading: false,
                        });
                      });
                  } else if (pageDepth == 46) {
                    getCompanyDetails_commission_request_vehicle()
                      .then((result) => {
                        if (result.data && Array.isArray(result.data)) {
                          let commission_request_vehicle_company_list = [];
                          let data = result.data;
                          data.map((value) => {
                            commission_request_vehicle_company_list.push({
                              name: value.company,
                              id: value.id,
                            });
                          });
                          this.setState({
                            commission_request_vehicle_company_list,
                          });
                        }
                      })
                      .catch((err) => {
                        console.log('Error', err.response);
                      });
                  } else if (pageDepth == 48) {
                    // fastag_newfastag_list
                    this.setState({fastagLoading: true}, () => {
                      getNewFastagList()
                        .then((result) => {
                          if (
                            result.data &&
                            result.data.data &&
                            Array.isArray(result.data.data)
                          ) {
                            this.setState({
                              fastag_newfastag_list: result.data.data,
                            });
                          }
                          this.setState({
                            fastagLoading: false,
                          });
                        })
                        .catch((err) => {
                          this.setState({
                            fastagLoading: false,
                          });
                          console.log('Error', err.response);
                        });
                    });
                  } else if (pageDepth == 49) {
                    // fastag_newfastag_list
                    this.setState({fastagLoading: true}, () => {
                      getFastagRechargeUserList()
                        .then((result) => {
                          if (
                            result.data &&
                            result.data.data &&
                            Array.isArray(result.data.data)
                          ) {
                            let fastag_fastag_recharge_user_list = [
                              {id: 0, name: 'Select None'},
                            ];
                            let tempData = result.data.data;
                            tempData.map((value) => {
                              fastag_fastag_recharge_user_list.push(value);
                            });
                            this.setState({
                              fastag_fastag_recharge_user_list,
                            });
                          }
                          getNewFastagList()
                            .then((result) => {
                              if (
                                result.data &&
                                result.data.data &&
                                Array.isArray(result.data.data)
                              ) {
                                let fastag_fastag_recharge_vehicle_class_list = [];
                                let data = result.data.data;
                                data.map((value) => {
                                  fastag_fastag_recharge_vehicle_class_list.push(
                                    {id: value['sl.no'], name: value.vehicle},
                                  );
                                });
                                this.setState(
                                  {
                                    fastag_fastag_recharge_vehicle_class_list,
                                  },
                                  () => {
                                    if (
                                      this.state
                                        .fastag_fastag_recharge_vehicle_class_list
                                        .length > 0
                                    ) {
                                      this.setState({
                                        fastag_fastag_recharge_vehicle_class_id: this
                                          .state
                                          .fastag_fastag_recharge_vehicle_class_list[0]
                                          .id,
                                        fastag_fastag_recharge_vehicle_class_name: this
                                          .state
                                          .fastag_fastag_recharge_vehicle_class_list[0]
                                          .name,
                                        fastag_fastag_recharge_vehicle_class_id_temp: this
                                          .state
                                          .fastag_fastag_recharge_vehicle_class_list[0]
                                          .id,
                                        fastag_fastag_recharge_vehicle_class_name_temp: this
                                          .state
                                          .fastag_fastag_recharge_vehicle_class_list[0]
                                          .name,
                                      });
                                    }
                                  },
                                );
                              }
                              this.setState({
                                fastagLoading: false,
                              });
                            })
                            .catch((err) => {
                              this.setState({
                                fastagLoading: false,
                              });
                              console.log('Error', err.response);
                            });
                        })
                        .catch((err) => {
                          getNewFastagList()
                            .then((result) => {
                              if (
                                result.data &&
                                result.data.data &&
                                Array.isArray(result.data.data)
                              ) {
                                this.setState({
                                  fastag_fastag_recharge_vehicle_class_list:
                                    result.data.data,
                                });
                              }
                              this.setState({
                                fastagLoading: false,
                              });
                            })
                            .catch((err) => {
                              this.setState({
                                fastagLoading: false,
                              });
                              console.log('Error', err.response);
                            });
                          console.log('Error', err.response);
                        });
                    });
                  } else if (pageDepth == 50) {
                    getCompanyDetails_commission_request_health()
                      .then((result) => {
                        if (result.data && Array.isArray(result.data)) {
                          let commission_request_health_company_list = [];
                          let data = result.data;
                          data.map((value) => {
                            commission_request_health_company_list.push({
                              name: value.company,
                              id: value.id,
                            });
                          });
                          this.setState({
                            commission_request_health_company_list,
                          });
                        }
                      })
                      .catch((err) => {
                        console.log('Error', err.response);
                      });
                  } else if (pageDepth == 52) {
                    getCompanyDetails_commission_request_travel()
                      .then((result) => {
                        if (result.data && Array.isArray(result.data)) {
                          let commission_request_travel_company_list = [];
                          let data = result.data;
                          data.map((value) => {
                            commission_request_travel_company_list.push({
                              name: value.company,
                              id: value.id,
                            });
                          });
                          this.setState({
                            commission_request_travel_company_list,
                          });
                        }
                      })
                      .catch((err) => {
                        console.log('Error', err.response);
                      });
                  } else if (pageDepth == 73) {
                    // fastag_newfastag_list
                    this.setState({fastagLoading: true}, () => {
                      getNewFastagCategoryList()
                        .then((result) => {
                          if (result.data && Array.isArray(result.data[0])) {
                            this.setState(
                              {
                                fastag_fastag_recharge_icici_vehicle_category_list:
                                  result.data[0],
                              },
                              () => {
                                if (
                                  this.state
                                    .fastag_fastag_recharge_icici_vehicle_category_list
                                    .length > 0
                                ) {
                                  this.setState({
                                    fastag_fastag_recharge_icici_vehicle_category_id: this
                                      .state
                                      .fastag_fastag_recharge_icici_vehicle_category_list[0]
                                      .id,
                                    fastag_fastag_recharge_icici_vehicle_category_name: this
                                      .state
                                      .fastag_fastag_recharge_icici_vehicle_category_list[0]
                                      .name,
                                    fastag_fastag_recharge_icici_vehicle_category_fetch: this
                                      .state
                                      .fastag_fastag_recharge_icici_vehicle_category_list[0]
                                      .fetch,
                                    fastag_fastag_recharge_icici_vehicle_category_id_temp: this
                                      .state
                                      .fastag_fastag_recharge_icici_vehicle_category_list[0]
                                      .id,
                                    fastag_fastag_recharge_icici_vehicle_category_name_temp: this
                                      .state
                                      .fastag_fastag_recharge_icici_vehicle_category_list[0]
                                      .name,
                                    fastag_fastag_recharge_icici_vehicle_category_fetch_temp: this
                                      .state
                                      .fastag_fastag_recharge_icici_vehicle_category_list[0]
                                      .fetch,
                                  });
                                }
                              },
                            );
                          }
                          this.setState({
                            fastagLoading: false,
                          });
                        })
                        .catch((err) => {
                          this.setState({
                            fastagLoading: false,
                          });
                          console.log('Error', err.response);
                        });
                    });
                  }
                },
              );
            }, 100);
          },
        );
      } else if (
        pageDepth == 33 ||
        pageDepth == 34 ||
        pageDepth == 35 ||
        pageDepth == 43 ||
        pageDepth == 44 ||
        pageDepth == 45 ||
        pageDepth == 56 ||
        pageDepth == 57 ||
        pageDepth == 58 ||
        pageDepth == 59 ||
        pageDepth == 60 ||
        pageDepth == 61 ||
        pageDepth == 62 ||
        pageDepth == 63 ||
        pageDepth == 64 ||
        pageDepth == 65
      ) {
        if (pageDepth == 33) {
          this.openUrlFunction(
            'https://covernest.com/car-insurance/?partner=aceware&retailer=aceware',
          );
        } else if (pageDepth == 34) {
          this.openUrlFunction(
            'https://covernest.com/two-wheeler-insurance/?partner=aceware&retailer=aceware',
          );
        } else if (pageDepth == 35) {
          this.openUrlFunction(
            'https://policytray.com/ReligareSecurePA.aspx?partner=aceware&retailer=aceware',
          );
        } else if (pageDepth == 56) {
          this.openUrlFunction(
            'https://epay.kmtwwfb.org/kmtepay/relaxation/otphome.php',
          );
        } else if (pageDepth == 57) {
          this.openUrlFunction(
            'http://epay.keltron.in/epaytailor/public/index.php/member/5790507367824',
          );
        } else if (pageDepth == 58) {
          this.openUrlFunction('https://revenue.kerala.gov.in/');
        } else if (pageDepth == 59) {
          this.openUrlFunction(
            'http://tax.lsgkerala.gov.in/epayment/index.php',
          );
        } else if (pageDepth == 60) {
          this.openUrlFunction('https://parivahan.gov.in/parivahan/');
        } else if (pageDepth == 61) {
          this.openUrlFunction(
            'http://portal.janasevanakendra.com/agent/kerala_government/14',
          );
        } else if (pageDepth == 62) {
          this.openUrlFunction(
            'http://portal.janasevanakendra.com/agent/financial-service/aeps/new-pancard/71',
          );
        } else if (pageDepth == 63) {
          this.openUrlFunction(
            'http://portal.janasevanakendra.com/agent/online-shopping/43',
          );
        } else if (pageDepth == 64) {
          this.openUrlFunction(
            'http://portal.janasevanakendra.com/agent/camera_surveillance/11',
          );
        } else if (pageDepth == 65) {
          this.openUrlFunction('http://keralaregistration.gov.in/pearlpublic/');
        } else if (pageDepth == 43) {
          let message = ' Username : 20238080\n Password : india@123';
          this.detailsAwesomeAlertMessage(message, pageDepth);
        } else if (pageDepth == 44) {
          let message = ' Username : AG_0079871\n Password : Manesh1234@';
          this.detailsAwesomeAlertMessage(message, pageDepth);
        } else if (pageDepth == 45) {
          let message = ' Username : 20183144\n Password : India@123';
          this.detailsAwesomeAlertMessage(message, pageDepth);
        }
      } else if (pageDepth == 9) {
        if (this.state.settlement_setup_settlement_activated == 'Approved') {
          this.setState(
            {
              changingPage: true,
              settingsLoading: true,
              previousDepth: this.state.pageDepth,
              historyData: [],
              filteredData: [],
              searchData: [],
            },
            () => {
              setTimeout(() => {
                this.setState(
                  {pageDepth, settingsLoading: false, changingPage: false},
                  () => {},
                );
              }, 100);
            },
          );
        } else if (
          this.state.settlement_setup_settlement_activated == 'Pending'
        ) {
          Mahagram.Toast('Settlement option is pending approval.');
        } else if (
          this.state.settlement_setup_settlement_activated == 'notset'
        ) {
        } else {
          Mahagram.Toast(
            'Settlement option is not activated\nContact admin for activation',
          );
        }
      } else if (
        pageDepth == 26 ||
        pageDepth == 27 ||
        pageDepth == 30 ||
        pageDepth == 39
      ) {
        this.setState(
          {
            changingPage: true,
            settingsLoading: true,
            money_transfer_transfer_sender_mobile_no:this.state.money_transfer_verify_number,
            money_transfer_transfer_sender_name:this.state.money_transfer_verify_name,
            historyData: [],
            filteredData: [],
            searchData: [],
          },
          () => {
            setTimeout(() => {
              this.setState(
                {pageDepth, settingsLoading: false, changingPage: false},
                () => {},
              );
            }, 100);
          },
        );
      } else if (
        pageDepth == 10 ||
        pageDepth == 11 ||
        pageDepth == 12 ||
        pageDepth == 13 ||
        pageDepth == 18 ||
        pageDepth == 19 ||
        pageDepth == 22 ||
        pageDepth == 23
      ) {
        this.setState(
          {
            changingPage: true,
            settingsLoading: true,
            previousDepth: this.state.pageDepth,
            historyData: [],
            filteredData: [],
            searchData: [],
          },
          () => {
            if (pageDepth == 18) {
              this.setState({mobile_providerListActivity: true}, () => {
                getProviderList_MobileDthRecharge()
                  .then((result) => {
                    if (result.data) {
                      if (
                        result.data.response &&
                        Array.isArray(result.data.response)
                      ) {
                        let mobile_providerList = [];
                        result.data.response.map((value) => {
                          mobile_providerList.push({
                            id: value.id,
                            name: value.providers,
                          });
                        });

                        mobile_providerList.sort((a, b) => {
                          let nameA = a.name;
                          let nameB = b.name;
                          return nameA < nameB ? -1 : nameA > nameB ? 1 : 0;
                        });
                        this.setState({mobile_providerList});
                      }
                    }
                    this.setState({mobile_providerListActivity: false});
                  })
                  .catch((err) => {
                    this.setState(
                      {mobile_providerListActivity: false},
                      () => {},
                    );

                    console.log('Error', err.response);
                  });
              });
              this.setState({mobile_regionListActivity: true}, () => {
                getRegionList_MobileDthRecharge()
                  .then((result) => {
                    if (result.data) {
                      if (result.data.region) {
                        let value = result.data.region;
                        let mobile_regionList = [];
                        let keys = Object.keys(value);

                        for (let i = 0; i <= keys.length - 1; i++) {
                          let k = keys[i];
                          mobile_regionList.push({
                            id: i + 1,
                            name: value[k],
                          });
                        }

                        mobile_regionList.sort((a, b) => {
                          let nameA = a.name;
                          let nameB = b.name;
                          return nameA < nameB ? -1 : nameA > nameB ? 1 : 0;
                        });
                        this.setState({mobile_regionList}, () => {});
                      }
                    }
                    this.setState({mobile_regionListActivity: false});
                  })
                  .catch((err) => {
                    this.setState({mobile_regionListActivity: false}, () => {});

                    console.log('Error', err.response);
                  });
              });
            } else if (pageDepth == 19) {
              this.setState({dth_providerListActivity: true}, () => {
                getDTHList_MobileDthRecharge()
                  .then((result) => {
                    this.setState({settingsLoading: false});

                    if (result.data) {
                      if (
                        result.data.response &&
                        Array.isArray(result.data.response)
                      ) {
                        let dth_DthList = [];
                        result.data.response.map((value) => {
                          dth_DthList.push({
                            id: value.id,
                            name: value.providers,
                          });
                        });

                        dth_DthList.sort((a, b) => {
                          let nameA = a.name;
                          let nameB = b.name;
                          return nameA < nameB ? -1 : nameA > nameB ? 1 : 0;
                        });
                        this.setState({dth_DthList});
                      }
                    }
                    this.setState({dth_providerListActivity: false});
                  })
                  .catch((err) => {
                    this.setState({dth_providerListActivity: false}, () => {});

                    console.log('Error', err.response);
                  });
              });
            } else if (pageDepth == 22) {
              this.setState(
                {
                  pageDepth,
                  settingsLoading: true,
                  money_transfer_list_refreshing: true,
                },
                () => {
                  this.setState(
                    {
                      money_transfer_list_userData: [],
                      money_transfer_list_searchData: [],
                    },
                    () => {
                      this.setState(
                        {settingsLoading: true, changingPage: false},
                        () => {
                          listBeneficiaryList_MoneyTransfer()
                            .then((result) => {
                              if (
                                result.data.response &&
                                result.data.response.length > 0
                              ) {
                                this.setState(
                                  {
                                    money_transfer_list_userData:
                                      result.data.response,
                                    money_transfer_list_searchData:
                                      result.data.response,
                                  },
                                  () => {
                                    if (
                                      this.state.money_transfer_list_userData
                                        .length > 0
                                    ) {
                                    }
                                    this.setState({
                                      settingsLoading: false,
                                      changingPage: false,
                                    });
                                  },
                                );
                              } else {
                                this.setState(
                                  {
                                    money_transfer_list_userData: [],
                                    money_transfer_list_searchData: [],
                                  },
                                  () => {
                                    this.setState(
                                      {
                                        settingsLoading: false,
                                        changingPage: false,
                                      },
                                      () => {},
                                    );
                                  },
                                );
                              }
                            })
                            .catch((err) => {
                              this.setState(
                                {
                                  pageDepth,
                                  settingsLoading: false,
                                  changingPage: false,
                                  money_transfer_list_refreshing: false,
                                },
                                () => {
                                  this.generalAwesomeAlertMessage(
                                    'Something went wrong',
                                  );
                                },
                              );

                              console.log('Error', err.response);
                            });
                        },
                      );
                    },
                  );
                },
                () => {
                  this.setState({refreshing: false});
                },
              );
            }
            if (pageDepth !== 22) {
              setTimeout(() => {
                this.setState(
                  {pageDepth, settingsLoading: false, changingPage: false},
                  () => {},
                );
              }, 100);
            }
          },
        );
      }
    } else {
      if (pageDepth == -2 && this.state.profile_values_set == true) {
        this.setState(
          {
            changingPage: true,
            settingsLoading: true,
            show_all_transaction_history: !this.state
              .show_all_transaction_history,
          },
          () => {
            if (this.state.show_all_transaction_history == true) {
              setTimeout(() => {
                this.setState(
                  {
                    settingsLoading: false,
                    changingPage: false,
                    allhistory_refreshing: false,
                    allhistory_refreshingValue: false,
                    allhistory_historyData: [],
                    allhistory_searchKey: '',
                    allhistory_searchData: [],
                    allhistory_tempData: [],
                    allhistory_searching: false,
                    allhistory_modalOpen: false,
                    allhistory_fromDate: '',
                    allhistory_fromDatePicker: false,
                    allhistory_toDate: '',
                    allhistory_toDatePicker: false,
                    allhistory_minimumDate: '',
                    allhistory_maximumDate: '',
                    allhistory_tempFromDate: '',
                    allhistory_tempToDate: '',
                    allhistory_filteredData: [],
                    allhistory_settingFilter: false,
                    allhistory_keyboardOpen: false,
                    allhistory_type: 'BOTH',
                    allhistory_tempType: 'BOTH',
                    allhistory_tempData: [],
                    allhistory_mainData: [],
                    allhistory_singleDateInModal: false,
                    allhistory_singleDatePicker: false,
                    allhistory_singleOption: false,
                    allhistory_singleOption_tempSingleDate: '',
                    allhistory_singleOption_tempFromDate: '',
                    allhistory_singleOption_tempTODate: '',
                  },
                  () => {
                    this.setState(
                      {
                        changingPage: false,
                        settingsLoading: false,
                        allhistory_reportLoading: true,
                      },
                      () => {
                        this.getAllTransactionHistory();
                      },
                    );
                  },
                );
              }, 100);
            } else {
              setTimeout(() => {
                this.setState({
                  settingsLoading: false,
                  changingPage: false,
                  allhistory_refreshing: false,
                  allhistory_refreshingValue: false,
                  allhistory_historyData: [],
                  allhistory_searchKey: '',
                  allhistory_searchData: [],
                  allhistory_tempData: [],
                  allhistory_searching: false,
                  allhistory_modalOpen: false,
                  allhistory_fromDate: '',
                  allhistory_fromDatePicker: false,
                  allhistory_toDate: '',
                  allhistory_toDatePicker: false,
                  allhistory_minimumDate: '',
                  allhistory_maximumDate: '',
                  allhistory_tempFromDate: '',
                  allhistory_tempToDate: '',
                  allhistory_filteredData: [],
                  allhistory_settingFilter: false,
                  allhistory_keyboardOpen: false,
                  allhistory_type: 'BOTH',
                  allhistory_tempType: 'BOTH',
                  allhistory_tempData: [],
                  allhistory_mainData: [],
                  allhistory_singleDateInModal: false,
                  allhistory_singleDatePicker: false,
                  allhistory_singleOption: false,
                  allhistory_singleOption_tempSingleDate: '',
                  allhistory_singleOption_tempFromDate: '',
                  allhistory_singleOption_tempTODate: '',
                });
              }, 100);
            }
          },
        );
      } else if (pageDepth == -3 && this.state.profile_values_set == true) {
        if (this.state.pageDepth == -3) {
          this.handleBackButtonClick();
        } else {
          this.setState(
            {
              changingPage: true,
              settingsLoading: true,
              show_all_transaction_history: false,
              profilePreviousDepth: this.state.pageDepth,
            },
            () => {
              setTimeout(() => {
                this.setState({
                  pageDepth,
                  settingsLoading: false,
                  changingPage: false,
                });
              }, 100);
            },
          );
        }
      } else {
        // Mahagram.Toast("")
      }
    }
  }

  getHome() {
    return (
      <View
        style={{flex: 1, justifyContent: 'flex-start', alignItems: 'center'}}>
        <View
          style={{
            flex: this.state.superAgent_Header == true ? 1.5 : 1.5,
            width: '100%',
            justifyContent: 'center',
            paddingLeft: 20,
            paddingRight: 80,
          }}>
          {this.state.profileLoading == true ? (
            <DotIndicator
              size={6}
              color={'#36363690'}
              animating={this.props.animating}
              hidesWhenStopped={true}
              style={{alignSelf: 'flex-start', paddingLeft: 20}}
            />
          ) : (
            <Text
              numberOfLines={1}
              style={{fontSize: 20, color: '#363636', fontWeight: '900'}}
              ellipsizeMode={'tail'}>
              {' '}
              {this.state.agentName !== ''
                ? 'Hi, ' + this.state.agentName
                : 'Hi, User'}
            </Text>
          )}
        </View>

        <View style={{flex: 10, width: '100%'}}>
          <Swiper
            bounces={false}
            style={styles.wrapper}
            showsButtons={false}
            loop={false}
            activeDotColor={'#3575D7d0'}
            dotColor={'#B9D3F6a0'}
            index={this.state.index}
            onIndexChanged={(index) => {
              this.setState({index});
            }}>
            <View style={styles.slide1}>
              <View style={{flex: 1, width: '100%', alignItems: 'center'}}>
                <FlatList
                  numColumns={2}
                  keyboardShouldPersistTaps={'always'}
                  showsVerticalScrollIndicator={false}
                  contentContainerStyle={{
                    justifyContent: 'center',
                    alignItems: 'center',
                  }}
                  data={[
                    {
                      name: 'Connect To Micro-Atm Device',
                      pageDepth: 4,
                      iconName: 'scanner',
                      iconType: 'material-community',
                    },
                    {
                      name: 'Micro-Atm Transaction History',
                      pageDepth: 5,
                      iconName: 'files-o',
                      iconType: 'font-awesome',
                    },
                    {
                      name: 'Money Transfer',
                      pageDepth: 8,
                      iconName: 'exchange',
                      iconType: 'font-awesome',
                    },
                    {
                      name: 'Settlements',
                      pageDepth: 9,
                      iconName: 'Safety',
                      iconType: 'antdesign',
                    },

                    {
                      name: 'Bill Payments',
                      pageDepth: 6,
                      iconName: 'credit-card',
                      iconType: 'font-awesome',
                    },
                    {
                      name: 'Recharge\n(Mobile And Dth)',
                      pageDepth: 7,
                      iconName: 'plussquareo',
                      iconType: 'antdesign',
                    },
                  ]}
                  keyExtractor={(item, index) => String(index)}
                  renderItem={({item, index, separators}) => (
                    <View
                      style={{
                        height: 190,
                        width: SCREEN_WIDTH / 2,
                        justifyContent: 'center',
                        alignItems: 'center',
                      }}>
                      <LinearGradient
                        colors={['#4075D3', '#3361B4']}
                        // useAngle={true}
                        // angle={45}
                        style={{
                          height: '92%',
                          width: '92%',
                          borderRadius: 10,
                          padding: 10,
                        }}>
                        <TouchableOpacity
                          style={{flex: 1, width: '100%'}}
                          onPress={() => {
                            this.onPressFunction(item.pageDepth);
                          }}>
                          <View
                            style={{
                              flex: 1.5,
                              justifyContent: 'center',
                              alignItems: 'center',
                            }}>
                            <Icon
                              size={75}
                              name={item.iconName}
                              type={item.iconType}
                              color={'#fff'}
                              underlayColor="rgba(255,255,255,0)"
                            />
                          </View>

                          <View
                            style={{
                              flex: 1,
                              justifyContent: 'center',
                              alignItems: 'center',
                              paddingHorizontal: 5,
                            }}>
                            <Text
                              style={{
                                fontSize: 17,
                                color: '#fff',
                                textAlign: 'center',
                              }}>
                              {item.name}
                            </Text>
                          </View>
                        </TouchableOpacity>
                      </LinearGradient>
                    </View>
                  )}
                />
              </View>
              <View style={{flex: 0.1}} />
            </View>
            <View style={styles.slide2}>
              <View style={{flex: 1, width: '100%', alignItems: 'center'}}>
                <FlatList
                  numColumns={2}
                  keyboardShouldPersistTaps={'always'}
                  showsVerticalScrollIndicator={false}
                  contentContainerStyle={{
                    justifyContent: 'center',
                    alignItems: 'center',
                  }}
                  data={[
                    {
                      name: 'Money Withdrawal\n(QR Code)',
                      pageDepth: 1,
                      iconName: 'scan1',
                      iconType: 'antdesign',
                    },
                    {
                      name: 'Withdrawal Reports',
                      pageDepth: -1,
                      iconName: 'filetext1',
                      iconType: 'antdesign',
                    },
                    {
                      name: 'Insurance Services',
                      pageDepth: 31,
                      iconName: 'shield',
                      iconType: 'entypo',
                    },
                    // {
                    //   name: 'Loan Repayment',
                    //   pageDepth: 36,
                    //   iconName: 'bank',
                    //   iconType: 'font-awesome',
                    // },
                    {
                      name: 'Aeps Services',
                      pageDepth: 36,
                      iconName: 'AEPS-Logo',
                      iconType: 'custom-icons',
                    },
                    {
                      name: 'Fastag Services',
                      pageDepth: 37,
                      iconName: 'fastag',
                      iconType: 'custom-icons',
                    },
                    {
                      name: 'TeacherInd\nServices',
                      pageDepth: 39,
                      iconName: 'logo-new-teacherind-page-001-1',
                      iconType: 'custom-icons',
                    },
                    // {
                    //   name: 'Other\nServices',
                    //   pageDepth: 38,
                    //   iconName: 'gears',
                    //   iconType: 'font-awesome',
                    // },
                  ]}
                  keyExtractor={(item, index) => String(index)}
                  renderItem={({item, index, separators}) => (
                    <View
                      style={{
                        height: 190,
                        width: SCREEN_WIDTH / 2,
                        justifyContent: 'center',
                        alignItems: 'center',
                      }}>
                      <LinearGradient
                        colors={['#4075D3', '#3361B4']}
                        style={{
                          height: '92%',
                          width: '92%',
                          borderRadius: 10,
                          padding: 10,
                        }}>
                        <TouchableOpacity
                          style={{flex: 1, width: '100%'}}
                          onPress={() => {
                            this.onPressFunction(item.pageDepth);
                          }}>
                          <View
                            style={{
                              flex: 1.5,
                              justifyContent: 'center',
                              alignItems: 'center',
                            }}>
                            {item.iconType == 'custom-icons' ? (
                              <CustomIcon
                                name={item.iconName}
                                size={
                                  item.iconName ==
                                  'logo-new-teacherind-page-001-1'
                                    ? 90
                                    : item.iconName == 'AEPS-Logo'
                                    ? 54
                                    : 52
                                }
                                style={{marginTop: 10}}
                                color={'#fff'}
                                underlayColor="rgba(255,255,255,0)"
                              />
                            ) : (
                              <Icon
                                size={75}
                                name={item.iconName}
                                type={item.iconType}
                                color={'#fff'}
                                underlayColor="rgba(255,255,255,0)"
                              />
                            )}
                          </View>

                          <View
                            style={{
                              flex: 1,
                              justifyContent: 'center',
                              alignItems: 'center',
                              paddingHorizontal: 5,
                            }}>
                            <Text
                              style={{
                                fontSize: 17,
                                color: '#fff',
                                textAlign: 'center',
                              }}>
                              {item.name}
                            </Text>
                          </View>
                        </TouchableOpacity>
                      </LinearGradient>
                    </View>
                  )}
                />
              </View>
              <View style={{flex: 0.1}} />
            </View>
            <View style={styles.slide3}>
              <View style={{flex: 1, width: '100%', alignItems: 'center'}}>
                <FlatList
                  numColumns={2}
                  keyboardShouldPersistTaps={'always'}
                  showsVerticalScrollIndicator={false}
                  contentContainerStyle={{
                    justifyContent: 'center',
                    alignItems: 'flex-start',
                  }}
                  data={[
                    {
                      name: 'Prepaid cards/\nGift cards',
                      pageDepth: 39,
                      iconName: 'credit-card-plus',
                      iconType: 'material-community',
                    },
                    //   {
                    //   name: 'TeacherInd\nServices',
                    //   pageDepth: 39,
                    //   iconName: 'logo-new-teacherind-page-001-1',
                    //   iconType: 'custom-icons',
                    // },
                    {
                      name: 'Gas Bill/\nBooking',
                      pageDepth: 40,
                      iconName: 'gas-cylinder',
                      iconType: 'material-community',
                    },
                    {
                      name: 'Kochi Metro Card',
                      pageDepth: 41,
                      iconName: 'train',
                      iconType: 'material-community',
                    },
                    // {
                    //   name: 'Cibil Score',
                    //   pageDepth: 41,
                    //   iconName: 'file-percent-outline',
                    //   iconType: 'material-community',
                    // },
                    {
                      name: 'Pancard',
                      pageDepth: 42,
                      iconName: 'card-account-details-outline',
                      iconType: 'material-community',
                    },
                    {
                      name: 'Helpline\nContacts',
                      pageDepth: 32,
                      iconName: 'lifebuoy',
                      iconType: 'entypo',
                    },
                    {
                      name: 'Vela\nServices',
                      pageDepth: 55,
                      iconName: 'Untitled-1',
                      iconType: 'custom-icons',
                    },
                  ]}
                  keyExtractor={(item, index) => String(index)}
                  renderItem={({item, index, separators}) => (
                    <View
                      style={{
                        height: 190,
                        width: SCREEN_WIDTH / 2,
                        justifyContent: 'center',
                        alignItems: 'center',
                      }}>
                      <LinearGradient
                        colors={['#4075D3', '#3361B4']}
                        style={{
                          height: '92%',
                          width: '92%',
                          borderRadius: 10,
                          padding: 10,
                        }}>
                        <TouchableOpacity
                          style={{flex: 1, width: '100%'}}
                          onPress={() => {
                            this.onPressFunction(item.pageDepth);
                          }}>
                          <View
                            style={{
                              flex: 1.5,
                              justifyContent: 'center',
                              alignItems: 'center',
                            }}>
                            {item.iconType == 'custom-icons' ? (
                              <CustomIcon
                                name={item.iconName}
                                size={80}
                                color={'#fff'}
                                underlayColor="rgba(255,255,255,0)"
                              />
                            ) : (
                              <Icon
                                size={75}
                                name={item.iconName}
                                type={item.iconType}
                                color={'#fff'}
                                underlayColor="rgba(255,255,255,0)"
                              />
                            )}
                          </View>

                          <View
                            style={{
                              flex: 1,
                              justifyContent: 'center',
                              alignItems: 'center',
                              paddingHorizontal: 5,
                            }}>
                            <Text
                              style={{
                                fontSize: 17,
                                color: '#fff',
                                textAlign: 'center',
                              }}>
                              {item.name}
                            </Text>
                          </View>
                        </TouchableOpacity>
                      </LinearGradient>
                    </View>
                  )}
                />
              </View>
              <View style={{flex: 0.1}} />
            </View>
          </Swiper>
        </View>

        {/* <LinearGradient colors={['#00000090', 'grey']} style={{height:100,width:'95%',backgroundColor:'#00000090',marginBottom:15,borderRadius:6}}>
		<TouchableOpacity onPress={()=>{
		  this.setState({changingPage:true,settingsLoading:true,previousDepth:this.state.pageDepth,},()=>{
			setTimeout(()=>{
			  this.setState({pageDepth:1,settingsLoading:false,changingPage:false})
			},100)
			
		  })
		  
		 }} style={{height:'100%',width:'100%',justifyContent:'center',alignItems:'center'}}> 
		 <Text style={{color:'#fff',fontSize:20}}>Money Withdrawal Using QR Code</Text>
		</TouchableOpacity>
		
		</LinearGradient>
		
	
		<LinearGradient colors={['#00000090', 'grey']}  style={{height:100,width:'95%',backgroundColor:'#00000090',marginTop:15,borderRadius:6}}>
		<TouchableOpacity onPress={()=>{
		  this.setState({changingPage:true,settingsLoading:true,previousDepth:this.state.pageDepth},()=>{
			setTimeout(()=>{
			  this.setState({pageDepth:-1,settingsLoading:false,changingPage:false},()=>{
				this.getReportHistoryData()
			  })
			},100)
			
		  })
		   
		 }} style={{height:'100%',width:'100%',justifyContent:'center',alignItems:'center'}}> 
		<Text style={{color:'#fff',fontSize:20}}>Withdrawal Reports</Text>
		</TouchableOpacity>
		</LinearGradient> */}
      </View>
    );
  }

  getHeader() {
    return (
      <View
        style={{
          width: '100%',
          height: normalize(45),
          backgroundColor: '#ffffff00',
        }}>
        <HomeHeader
          iconName={'home'}
          showIcon={!this.state.settingsLoading}
          iconType={'feather'}
          iconColor={'#32272B'}
          iconColor={'#00000090'}
          //iconSize={32}
          onIconPress={() => {
            if (
              this.state.pageDepth !== 0 ||
              this.state.show_all_transaction_history == true
            ) {
              if (
                this.state.buttonLoading == false &&
                this.state.deleteLoaderId == ''
              ) {
                this.setDefaulValues(this.state.pageDepth);
                //this._drawer.toggle();
                this.setState(
                  {
                    changingPage: true,
                    settingsLoading: true,
                    show_all_transaction_history: false,
                  },
                  () => {
                    let temppageDepth = this.state.pageDepth;
                    setTimeout(() => {
                      this.setState(
                        {
                          pageDepth: 0,
                          settingsLoading: false,
                          changingPage: false,
                        },
                        () => {
                          if (temppageDepth == 2 || temppageDepth == 3) {
                            failedCall({
                              insertedId: this.state.insertedId,
                            })
                              .then((result) => {
                                this.setState({
                                  name: '',
                                  mobile: '',
                                  insertedId: '',
                                });
                              })
                              .catch((err) => {
                                this.setState(
                                  {settingsLoading: false, changingPage: false},
                                  () => {
                                    this.setState({
                                      name: '',
                                      mobile: '',
                                      insertedId: '',
                                    });
                                  },
                                );

                                console.log('Error', err.response);
                              });
                          } else {
                            this.setState({name: '', mobile: ''});
                          }
                        },
                      );
                    }, 100);
                  },
                );
              } else {
                Mahagram.Toast('Processing..please wailt..');
              }
            }
          }}
          titleLabel={''}
          titleColor={'#00000090'}
          //titleColor={"brown"}
          //backgroundColor={"#F5F3F3"}
          backgroundColor={this.props.theme.headerColor}
          // titleLabel={
          //   this.state.pageDepth.length == 0
          //     ? "HOME"
          //     : this.state.pageDepth.length == 1
          //     ? "CATEGORIES"
          //     : "SUB - CATEGORIES"
          // }
          titleLabel={'ACEMONEY'}
          rightIconName={'power'}
          rightIconType={'feather'}
          rightIconColor={'#00000090'}
          rightIconMarginRight={5}
          rightIconMarginLeft={5}
          rightOnIconPress={() => {
            this.setState({
              awesomeLogoutAlertShow: !this.state.awesomeLogoutAlertShow,
            });
            // Alert.alert(
            //   "",
            //   "Do you want to logout?",
            //   [
            //     {
            //       text: "Cancel",
            //       onPress: () => console.log("Cancel Pressed"),
            //       style: "cancel",
            //     },
            //     {
            //       text: "OK",
            //       onPress: () => {
            //         failedCall({
            //           insertedId: this.state.insertedId,
            //         })
            //           .then((result) => {})
            //           .catch((err) => {
            //             this.setState(
            //               { settingsLoading: false, changingPage: false },
            //               () => {}
            //             );

            //             console.log("Error", err.response);
            //           });
            //         AsyncStorage.setItem("refresh_token", "xxxx").then(
            //           (result) => {
            //             AsyncStorage.setItem("agent_email", "");
            //             NavigatorService.reset("LoginScreen");
            //           }
            //         );
            //       },
            //     },
            //   ],
            //   { cancelable: false }
            // );
          }}
          middleIconName={'th-list'}
          middleIconType={'font-awesome'}
          middleIconColor={'#00000090'}
          middleIconMarginRight={5}
          middleIconMarginLeft={5}
          middleOnIconPress={() => {
            let pageDepth = -2;
            this.onPressFunction(pageDepth);
          }}
          leftIconName={this.state.superAgent_Header == true ? 'users' : 'user'}
          leftIconType={'feather'}
          leftIconColor={'#00000090'}
          leftIconMarginRight={5}
          leftIconMarginLeft={5}
          leftOnIconPress={() => {
            this.setState(
              {
                balanceLoading: true,
              },
              () => {
                let pageDepth = -3;
                this.onPressFunction(pageDepth);
                this.loadBalance().then((val) => {
                  this.setState({balanceLoading: false});
                });
              },
            );
          }}
        />
      </View>
    );
  }

  getModal_one() {
    return (
      <Modal
        isVisible={this.state.modalRecieptOpen}
        onBackButtonPress={() => {
          this.setState({
            modalRecieptOpen: !this.state.modalRecieptOpen,
          });
        }}
        animationIn="slideInUp"
        animationOut="slideOutDown"
        backdropColor={'rgba(0, 0, 0, 0.8)'}
        backdropOpacity={0.5}
        transparent={true}
        style={{
          alignItems: 'center',
          justifyContent: 'center',
        }}
        onBackdropPress={() => {
          // this.setState({ modalRecieptOpen: false });
        }}
        onModalShow={() => {
          this.setState({settingsLoading: false}, () => {
            Mahagram.Toast('Press back to exit');
          });
        }}>
        <View
          style={{
            height: '100%',
            width: '100%',
            justifyContent: 'center',
            alignItems: 'center',
          }}>
          <View
            style={{
              height: '70%',
              width: '100%',
              backgroundColor: '#00000010',
              padding: 10,
            }}>
            <View
              style={{
                height: normalize(35),
                width: '100%',
                backgroundColor: '#Ffff',
                borderBottomWidth: 0,
                borderTopWidth: 0,
                borderColor: '#c0c0c8',
                flexDirection: 'row',
              }}>
              <View
                style={{
                  flex: 1,
                  justifyContent: 'center',
                  alignItems: 'center',
                }}>
                <Icon
                  size={25}
                  name={'arrowleft'}
                  type={'antdesign'}
                  color={'#00000090'}
                  underlayColor="rgba(255,255,255,0)"
                  onPress={() => {
                    // this.handleBackButtonClick();
                    this.setState({
                      modalRecieptOpen: !this.state.modalRecieptOpen,
                    });
                  }}
                />
              </View>
              <View
                style={{
                  flex: 4,
                  justifyContent: 'center',
                  alignItems: 'flex-start',
                  paddingLeft: 15,
                }}>
                <Text
                  numberOfLines={1}
                  style={{fontSize: 17, color: '#00000090'}}>
                  Invoice Details
                </Text>
              </View>
              <View
                style={{
                  flex: 2,
                  justifyContent: 'center',
                  alignItems: 'center',
                  height: '100%',
                  paddingHorizontal: 12,
                  // paddingVertical: 10,

                  flexDirection: 'row',
                }}>
                <View
                  style={{
                    flex: 0.7,
                    justifyContent: 'center',
                    alignItems: 'flex-end',
                    height: '100%',
                  }}>
                  <TouchableOpacity
                    style={{
                      padding: 10,
                      justifyContent: 'center',
                      alignItems: 'center',
                    }}
                    onPress={() => {
                      this.refs.viewShot_modalone.capture().then((uri) => {
                        console.log('do something with ', uri);
                        //this.onShare(uri);
                        this.getPer(uri);
                      });
                    }}>
                    {this.state.downloadLoader == true ? (
                      <ActivityIndicator size={'small'} color={'#000000a0'} />
                    ) : (
                      <Icon
                        size={18}
                        name={'download'}
                        type={'feather'}
                        color={'#000000a0'}
                        underlayColor="rgba(255,255,255,0)"
                      />
                    )}
                  </TouchableOpacity>
                </View>
                <View
                  style={{
                    flex: 0.7,
                    justifyContent: 'center',
                    alignItems: 'center',
                    height: '100%',
                  }}>
                  <TouchableOpacity
                    style={{
                      padding: 10,
                      justifyContent: 'center',
                      alignItems: 'center',
                    }}
                    onPress={() => {
                      this.refs.viewShot_modalone.capture().then((uri) => {
                        console.log('do something with ', uri);
                        this.onShare(uri);
                      });
                    }}>
                    <Icon
                      size={18}
                      name={'share'}
                      type={'entypo'}
                      color={'#000000a0'}
                      underlayColor="rgba(255,255,255,0)"
                    />
                  </TouchableOpacity>
                </View>
              </View>
            </View>

            <View
              style={{
                flex: 13,
                width: '100%',
                backgroundColor: '#fff',
                justifyContent: 'center',
                alignItems: 'center',
              }}>
              <ScrollView
                style={{width: '100%', height: '100%'}}
                contentContainerStyle={{
                  alignItems: 'center',
                  justifyContent: 'center',
                  flex: 1,
                }}
                ref={(ref) => (this.scrollView = ref)}
                // onContentSizeChange={(contentWidth, contentHeight)=>{
                //     console.log(this.state.locationX,this.state.locationY)
                //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
                // }}

                // {...this._panResponder.panHandlers}
                showsVerticalScrollIndicator={false}
                scrollEnabled={true}>
                <ViewShot
                  style={{
                    width: '100%',
                    justifyContent: 'center',
                    alignItems: 'center',
                    backgroundColor: '#fff',
                  }}
                  ref="viewShot_modalone"
                  options={{format: 'jpg', quality: 0.9}}>
                  <View
                    style={{
                      backgroundColor: '#fff',
                      height: '100%',
                      width: '100%',
                      borderRadius: 0,
                      padding: 0,
                      borderWidth: 0.2,
                      borderColor: '#c0c0c8',
                    }}>
                    <View
                      style={{
                        flex: 0.5,
                        flexDirection: 'row',
                        backgroundColor: '#f0f0f0',
                      }}>
                      <View
                        style={{
                          flex: 1,
                          justifyContent: 'center',
                          alignItems: 'center',
                          width: '100%',
                        }}>
                        <View
                          style={{
                            flex: 1,
                            alignItems: 'flex-start',
                            width: '100%',
                          }}>
                          <Image
                            style={{
                              width: 120,
                              justifyContent: 'center',
                              height: '100%',
                            }}
                            resizeMode={'contain'}
                            source={require('../../images/acelogo2.png')}
                          />
                        </View>
                        <View style={{flex: 1.5}}>
                          <Text
                            style={{
                              fontSize: 17.5,
                              color: '#404040',
                              marginBottom: 5,
                              fontFamily: 'Cochin',
                            }}>
                            {this.state.transactionData.txnamount !== '0'
                              ? 'TRANSACTION INVOICE'
                              : 'BALANCE INVOICE'}
                          </Text>
                          <View
                            style={{
                              // flex: .8,
                              alignItems: 'center',
                              // width: '100%',
                              justifyContent: 'center',
                            }}>
                            <Text
                              numberOfLines={1}
                              style={{
                                fontSize: 15,
                                color: '#59697D',
                                paddingHorizontal: 10,
                              }}>
                              #{this.state.transactionData.tid}
                            </Text>
                          </View>
                        </View>
                      </View>
                    </View>
                    <View
                      style={{
                        flex: 0.1,
                      }}
                    />
                    <View
                      style={{
                        flex: 0.3,
                        flexDirection: 'row',
                        width: '100%',
                      }}>
                      <View
                        style={{
                          width: '100%',
                          alignItems: 'center',
                          height: '100%',
                          justifyContent: 'center',
                        }}>
                        <Text
                          style={{
                            fontSize: 16,
                            color: '#a9a9a9',
                            alignSelf: 'center',
                          }}>
                          {this.state.transactionData.txnamount !== '0'
                            ? 'Amount'
                            : 'Balance'}
                        </Text>
                        <View
                          style={{
                            flexDirection: 'row',
                            //flex: 1,
                            alignItems: 'center',
                            paddingVertical: 7,
                          }}>
                          <View
                            style={{
                              alignItems: 'flex-end',
                              justifyContent: 'center',
                              paddingRight: 2,
                            }}>
                            <Icon
                              name="rupee"
                              type={'font-awesome'}
                              size={17}
                              color="#001847"
                              containerStyle={{
                                fontSize: 45,
                                fontWeight: 'bold',
                                color: '#001847',
                              }}
                            />
                          </View>

                          <View style={{}}>
                            <Text
                              numberOfLines={1}
                              ellipsizeMode={'tail'}
                              style={{
                                fontSize: 22,
                                fontWeight: 'bold',
                                color: '#001847',
                              }}>
                              {this.state.transactionData.txnamount !== '0'
                                ? this.state.transactionData.txnamount
                                : this.state.transactionData.amount}
                            </Text>
                          </View>
                        </View>
                        {/* <Text style={{fontSize: 22, alignSelf: 'center'}}>
                        {this.state.connect_to_micro_atm_radio_button_value == 1
                          ? this.state.transactionData.transAmount
                          : this.state.transactionData.balAmount}
                      </Text> */}
                      </View>
                    </View>
                    <View style={{flex: 0.8, width: '100%'}}>
                      <View
                        style={{
                          flex: 0.4,
                          flexDirection: 'row',
                          width: '100%',
                          // paddingRight: 10,
                        }}>
                        <View
                          style={{
                            width: '50%',
                            alignItems: 'center',
                            height: '100%',
                            justifyContent: 'center',
                          }}>
                          <Text
                            style={{
                              fontSize: 14,
                              color: '#a9a9a9',
                              alignSelf: 'center',
                            }}>
                            Time-Date
                          </Text>
                          <Text style={{fontSize: 14, alignSelf: 'center'}}>
                            {moment(
                              this.state.transactionData.date,
                              'DD-MM-YYYY HH:mm:ss',
                            ).format('MMM DD , h:mm a')}
                          </Text>
                        </View>
                        <View
                          style={{
                            width: '50%',
                            alignItems: 'center',
                            height: '100%',
                            justifyContent: 'center',
                          }}>
                          <Text style={{fontSize: 14, color: '#a9a9a9'}}>
                            Transaction Type{' '}
                          </Text>
                          <Text
                            numberOfLines={1}
                            style={{fontSize: 14, paddingHorizontal: 10}}>
                            {this.state.transactionData.txnamount !== '0'
                              ? 'Cash Withdrawal'
                              : 'Balance Inquiry'}
                          </Text>
                        </View>
                      </View>
                      {/* <View
                    style={{
                      flex: 0.4,
                      alignItems: 'center',
                      width: '100%',
                      justifyContent: 'center',
                    }}>
                    <Text style={{fontSize: 16, color: '#a9a9a9'}}>
                      Transaction Type{' '}
                    </Text>
                    <Text
                      numberOfLines={1}
                      style={{fontSize: 16, paddingHorizontal: 10}}>
                      {this.state.connect_to_micro_atm_radio_button_value == 1
                        ? 'Cash Withdrawal'
                        : 'Balance Inquiry'}
                    </Text>
                  </View> */}
                      <View
                        style={{
                          flex: 0.4,
                          alignItems: 'center',
                          width: '100%',
                          justifyContent: 'center',
                        }}>
                        <Text style={{fontSize: 14, color: '#a9a9a9'}}>
                          Transaction Status{' '}
                        </Text>
                        <Text
                          numberOfLines={1}
                          style={{fontSize: 16, paddingHorizontal: 10}}>
                          {this.state.transactionData.bankremarks ==
                          'Successful'
                            ? 'Success'
                            : this.state.transactionData.bankremarks ==
                              'Pending'
                            ? 'Pending'
                            : 'Failed'}
                        </Text>
                      </View>
                      <View style={{flex: 0.2}} />
                    </View>
                  </View>
                </ViewShot>
              </ScrollView>
            </View>
          </View>
          {/* <View
          style={{
            backgroundColor: '#fff',
            height: '60%',
            width: '85%',
            borderRadius: 5,
            padding: 5,
          }}>
          <View
            style={{
              flex: 0.5,
              flexDirection: 'row',
              backgroundColor: '#c0c0c8',
            }}>
            <View
              style={{
                flex: 1,
                alignItems: 'center',
                width: '100%',
                justifyContent: 'center',
              }}>
              <Text style={{fontSize: 18, color: '#000', marginBottom: 5}}>
                {this.state.connect_to_micro_atm_radio_button_value == 1
                  ? 'Transaction Reciept'
                  : this.state.connect_to_micro_atm_radio_button_value == 3
                  ? 'Balance Reciept'
                  : 'Others'}
              </Text>
              <Text
                numberOfLines={1}
                style={{fontSize: 17, color: '#fff', paddingHorizontal: 10}}>
                #{this.state.transactionData.bankRrn}
              </Text>
            </View>
          </View>
          <View
            style={{
              flex: 0.5,
              flexDirection: 'row',
              width: '100%',
              paddingRight: 10,
            }}>
            <View
              style={{
                width: '50%',
                alignItems: 'flex-start',
                height: '100%',
                justifyContent: 'center',
              }}>
              <Text
                style={{fontSize: 16, color: '#a9a9a9', alignSelf: 'center'}}>
                {this.state.connect_to_micro_atm_radio_button_value == 1
                  ? 'Amount'
                  : 'Balance'}
              </Text>
              <Text style={{fontSize: 16, alignSelf: 'center'}}>
                {this.state.connect_to_micro_atm_radio_button_value == 1
                  ? this.state.transactionData.transAmount
                  : this.state.transactionData.balAmount}
              </Text>
            </View>
            <View
              style={{
                width: '50%',
                alignItems: 'flex-start',
                height: '100%',
                justifyContent: 'center',
              }}>
              <Text
                style={{fontSize: 16, color: '#a9a9a9', alignSelf: 'center'}}>
                Time-Date
              </Text>
              <Text style={{fontSize: 14, alignSelf: 'center'}}>
                {moment().format('MMM DD , h:mm a')}
              </Text>
            </View>
          </View>
          <View
            style={{
              flex: 0.4,
              alignItems: 'center',
              width: '100%',
              justifyContent: 'center',
            }}>
            <Text style={{fontSize: 16, color: '#a9a9a9'}}>
              Transaction Type{' '}
            </Text>
            <Text
              numberOfLines={1}
              style={{fontSize: 16, paddingHorizontal: 10}}>
              {this.state.connect_to_micro_atm_radio_button_value == 1
                ? 'Cash Withdrawal'
                : 'Balance Inquiry'}
            </Text>
          </View>
          <View
            style={{
              flex: 0.4,
              alignItems: 'center',
              width: '100%',
              justifyContent: 'center',
            }}>
            <Text style={{fontSize: 16, color: '#a9a9a9'}}>
              Transaction Status{' '}
            </Text>
            <Text
              numberOfLines={1}
              style={{fontSize: 16, paddingHorizontal: 10}}>
              {this.state.transactionData.response}
            </Text>
          </View>
          <View style={{flex: 0.4}} />
        </View> */}
        </View>
      </Modal>
    );
  }

  //will remove if the replacement is correct
  // getModal_one() {
  //   return (
  //     <Modal
  //       isVisible={this.state.modalRecieptOpen}
  //       onBackButtonPress={() => {
  //         this.setState({modalRecieptOpen: !this.state.modalRecieptOpen});
  //       }}
  //       animationIn="slideInUp"
  //       animationOut="slideOutDown"
  //       backdropOpacity={0.12}
  //       style={{
  //         alignItems: 'center',
  //         justifyContent: 'center',
  //       }}
  //       onBackdropPress={() => {
  //         // this.setState({ modalRecieptOpen: false });
  //       }}
  //       onModalShow={() => {
  //         this.setState({settingsLoading: false}, () => {
  //           Mahagram.Toast('Press back to exit');
  //         });
  //       }}>
  //       <View
  //         style={{
  //           backgroundColor: '#fff',
  //           height: '60%',
  //           width: '85%',
  //           borderRadius: 5,
  //           padding: 5,
  //         }}>
  //         <View
  //           style={{
  //             flex: 0.5,
  //             flexDirection: 'row',
  //             backgroundColor: '#c0c0c8',
  //           }}>
  //           <View
  //             style={{
  //               flex: 1,
  //               alignItems: 'center',
  //               width: '100%',
  //               justifyContent: 'center',
  //             }}>
  //             <Text style={{fontSize: 18, color: '#000', marginBottom: 5}}>
  //               {this.state.transactionData.txnamount !== '0'
  //                 ? 'Transaction Reciept'
  //                 : 'Balance Reciept'}
  //             </Text>
  //             <Text
  //               numberOfLines={1}
  //               style={{fontSize: 17, color: '#fff', paddingHorizontal: 10}}>
  //               #{this.state.transactionData.tid}
  //             </Text>
  //           </View>
  //         </View>
  //         <View
  //           style={{
  //             flex: 0.5,
  //             flexDirection: 'row',
  //             width: '100%',
  //             paddingRight: 10,
  //           }}>
  //           <View
  //             style={{
  //               width: '50%',
  //               alignItems: 'flex-start',
  //               height: '100%',
  //               justifyContent: 'center',
  //             }}>
  //             <Text
  //               style={{fontSize: 16, color: '#a9a9a9', alignSelf: 'center'}}>
  //               {this.state.transactionData.txnamount !== '0'
  //                 ? 'Amount'
  //                 : 'Balance'}
  //             </Text>
  //             <Text style={{fontSize: 16, alignSelf: 'center'}}>
  //               {this.state.transactionData.txnamount !== '0'
  //                 ? this.state.transactionData.txnamount
  //                 : this.state.transactionData.amount}
  //             </Text>
  //           </View>
  //           <View
  //             style={{
  //               width: '50%',
  //               alignItems: 'flex-start',
  //               height: '100%',
  //               justifyContent: 'center',
  //             }}>
  //             <Text
  //               style={{fontSize: 16, color: '#a9a9a9', alignSelf: 'center'}}>
  //               Time-Date
  //             </Text>
  //             <Text style={{fontSize: 14, alignSelf: 'center'}}>
  //               {moment(
  //                 this.state.transactionData.date,
  //                 'DD-MM-YYYY HH:mm:ss',
  //               ).format('MMM DD , h:mm a')}
  //             </Text>
  //           </View>
  //         </View>
  //         <View
  //           style={{
  //             flex: 0.4,
  //             alignItems: 'center',
  //             width: '100%',
  //             justifyContent: 'center',
  //           }}>
  //           <Text style={{fontSize: 16, color: '#a9a9a9'}}>
  //             Transaction Type{' '}
  //           </Text>
  //           <Text
  //             numberOfLines={1}
  //             style={{fontSize: 16, paddingHorizontal: 10}}>
  //             {this.state.transactionData.txnamount !== '0'
  //               ? 'Cash Withdrawal'
  //               : 'Balance Inquiry'}
  //           </Text>
  //         </View>
  //         <View
  //           style={{
  //             flex: 0.4,
  //             alignItems: 'center',
  //             width: '100%',
  //             justifyContent: 'center',
  //           }}>
  //           <Text style={{fontSize: 16, color: '#a9a9a9'}}>
  //             Transaction Status{' '}
  //           </Text>
  //           <Text
  //             numberOfLines={1}
  //             style={{fontSize: 16, paddingHorizontal: 10}}>
  //             {this.state.transactionData.bankremarks == 'Successful'
  //               ? 'Success'
  //               : this.state.transactionData.bankremarks == 'Pending'
  //               ? 'Pending'
  //               : 'Failed'}
  //           </Text>
  //         </View>
  //         <View style={{flex: 0.4}} />
  //       </View>
  //     </Modal>
  //   );
  // }

  getModal_two() {
    return (
      <Modal
        isVisible={this.state.modalProfileOpen}
        onBackButtonPress={() => {
          this.setState({modalProfileOpen: !this.state.modalProfileOpen});
        }}
        animationIn="slideInUp"
        animationOut="slideOutDown"
        backdropOpacity={0.12}
        style={{
          right: 20,
          bottom: 45,
          position: 'absolute',
        }}
        onBackdropPress={() => {
          this.setState({modalProfileOpen: false});
        }}>
        <View
          style={{
            display: 'flex',
            backgroundColor: '#fff',
            height: 180,
            width: 230,
            borderRadius: 10,
            padding: 5,
          }}>
          <TouchableOpacity
            style={{
              flex: 1,
              paddingLeft: 5,
              alignItems: 'center',
              flexDirection: 'row',
              paddingTop: 7,
            }}>
            <Icon
              color="#6E6E6E"
              size={24}
              type="font-awesome"
              underlayColor="rgba(255,255,255,0)"
              name={'user'}
              //name={'eye'}
            />
            <Text style={{paddingLeft: 15}}>{this.state.agentName}</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={{
              flex: 1,
              paddingLeft: 2,
              alignItems: 'center',
              flexDirection: 'row',
              paddingBottom: 7,
            }}>
            <Icon
              color="#6E6E6E"
              size={24}
              type="material-community"
              underlayColor="rgba(255,255,255,0)"
              name={'email'}
              //name={'eye'}
            />
            <Text style={{paddingLeft: 15}}>{this.state.agent_email}</Text>
          </TouchableOpacity>
          {/* <TouchableOpacity
	  style={{ flex: 1, paddingLeft: 25, justifyContent: "center" }}
	  onPress={() => {
		this.setState({
		  moneyTransferPageType: "Money Transfer",
		  modalOpen: false
		});
	  }}
	>
	  <Text>Money Transfer</Text>
	</TouchableOpacity> */}

          {/* <TouchableOpacity
	  style={{ flex: 1, paddingLeft: 25, justifyContent: "center" }}
	  onPress={() => {
		this.setState({
		  moneyTransferPageType: "KYC & SLAB",
		  modalOpen: false
		});
	  }}
	>
	  <Text>KYC & SLAB</Text>
	</TouchableOpacity> */}
          <View
            style={{
              flex: 1.1,
              alignItems: 'center',
              justifyContent: 'center',
              backgroundColor: '#006eb9',
              //  borderBottomLeftRadius: 5,
              //  borderBottomRightRadius: 5,
              borderRadius: 8,
              overflow: 'hidden',
              paddingVertical: 4,
            }}>
            <View style={{flexDirection: 'row', flex: 1}}>
              <Text
                style={{
                  fontSize: 13,
                  fontWeight: 'bold',
                  color: 'white',
                  alignSelf: 'center',
                }}>
                WALLET BALANCE
              </Text>
            </View>
            <View style={{flex: 1}}>
              {this.state.balanceLoading == true ? (
                <ActivityIndicator size={'small'} color={'#fff'} />
              ) : (
                <View
                  style={{
                    flexDirection: 'row',
                    justifyContent: 'center',
                    alignItems: 'center',
                  }}>
                  <Icon
                    name="rupee"
                    type={'font-awesome'}
                    size={14}
                    color="#ffff"
                    containerStyle={{
                      justifyContent: 'center',
                      alignSelf: 'center',
                      //paddingTop: 1,
                    }}
                  />
                  <Text
                    numberOfLines={1}
                    ellipsizeMode={'tail'}
                    style={{
                      paddingHorizontal: 3,
                      fontSize: 17,
                      fontWeight: 'bold',
                      color: 'white',
                      alignSelf: 'center',
                    }}>
                    {this.state.account_balance
                      .toString()
                      .replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,')}
                  </Text>
                </View>
              )}
            </View>
          </View>
        </View>
      </Modal>
    );
  }

  getModal_three() {
    return (
      <Modal
        isVisible={this.state.modalRecieptOpen_three}
        onBackButtonPress={() => {
          this.setState({
            modalRecieptOpen_three: !this.state.modalRecieptOpen_three,
          });
        }}
        animationIn="slideInUp"
        animationOut="slideOutDown"
        backdropColor={'rgba(0, 0, 0, 0.8)'}
        backdropOpacity={0.5}
        transparent={true}
        style={{
          alignItems: 'center',
          justifyContent: 'center',
        }}
        onBackdropPress={() => {
          // this.setState({ modalRecieptOpen: false });
        }}
        onModalShow={() => {
          this.setState({settingsLoading: false}, () => {
            Mahagram.Toast('Press back to exit');
          });
        }}>
        <View
          style={{
            height: '100%',
            width: '100%',
            justifyContent: 'center',
            alignItems: 'center',
          }}>
          <View
            style={{
              height: '70%',
              width: '100%',
              backgroundColor: '#00000010',
              padding: 10,
            }}>
            <View
              style={{
                height: normalize(35),
                width: '100%',
                backgroundColor: '#Ffff',
                borderBottomWidth: 0,
                borderTopWidth: 0,
                borderColor: '#c0c0c8',
                flexDirection: 'row',
              }}>
              <View
                style={{
                  flex: 1,
                  justifyContent: 'center',
                  alignItems: 'center',
                }}>
                <Icon
                  size={25}
                  name={'arrowleft'}
                  type={'antdesign'}
                  color={'#00000090'}
                  underlayColor="rgba(255,255,255,0)"
                  onPress={() => {
                    // this.handleBackButtonClick();
                    this.setState({
                      modalRecieptOpen_three: !this.state
                        .modalRecieptOpen_three,
                    });
                  }}
                />
              </View>
              <View
                style={{
                  flex: 4,
                  justifyContent: 'center',
                  alignItems: 'flex-start',
                  paddingLeft: 15,
                }}>
                <Text
                  numberOfLines={1}
                  style={{fontSize: 17, color: '#00000090'}}>
                  Invoice Details
                </Text>
              </View>
              <View
                style={{
                  flex: 2,
                  justifyContent: 'center',
                  alignItems: 'center',
                  height: '100%',
                  paddingHorizontal: 12,
                  // paddingVertical: 10,

                  flexDirection: 'row',
                }}>
                <View
                  style={{
                    flex: 0.7,
                    justifyContent: 'center',
                    alignItems: 'flex-end',
                    height: '100%',
                  }}>
                  <TouchableOpacity
                    style={{
                      padding: 10,
                      justifyContent: 'center',
                      alignItems: 'center',
                    }}
                    onPress={() => {
                      this.refs.viewShot_modalthree.capture().then((uri) => {
                        console.log('do something with ', uri);
                        //this.onShare(uri);
                        this.getPer(uri);
                      });
                    }}>
                    {this.state.downloadLoader == true ? (
                      <ActivityIndicator size={'small'} color={'#000000a0'} />
                    ) : (
                      <Icon
                        size={18}
                        name={'download'}
                        type={'feather'}
                        color={'#000000a0'}
                        underlayColor="rgba(255,255,255,0)"
                      />
                    )}
                  </TouchableOpacity>
                </View>
                <View
                  style={{
                    flex: 0.7,
                    justifyContent: 'center',
                    alignItems: 'center',
                    height: '100%',
                  }}>
                  <TouchableOpacity
                    style={{
                      padding: 10,
                      justifyContent: 'center',
                      alignItems: 'center',
                    }}
                    onPress={() => {
                      this.refs.viewShot_modalthree.capture().then((uri) => {
                        console.log('do something with ', uri);
                        this.onShare(uri);
                      });
                    }}>
                    <Icon
                      size={18}
                      name={'share'}
                      type={'entypo'}
                      color={'#000000a0'}
                      underlayColor="rgba(255,255,255,0)"
                    />
                  </TouchableOpacity>
                </View>
              </View>
            </View>

            <View
              style={{
                flex: 13,
                width: '100%',
                backgroundColor: '#fff',
                justifyContent: 'center',
                alignItems: 'center',
              }}>
              <ScrollView
                style={{width: '100%', height: '100%'}}
                contentContainerStyle={{
                  alignItems: 'center',
                  justifyContent: 'center',
                  flex: 1,
                }}
                ref={(ref) => (this.scrollView = ref)}
                // onContentSizeChange={(contentWidth, contentHeight)=>{
                //     console.log(this.state.locationX,this.state.locationY)
                //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
                // }}

                // {...this._panResponder.panHandlers}
                showsVerticalScrollIndicator={false}
                scrollEnabled={true}>
                <ViewShot
                  style={{
                    width: '100%',
                    justifyContent: 'center',
                    alignItems: 'center',
                    backgroundColor: '#fff',
                  }}
                  ref="viewShot_modalthree"
                  options={{format: 'jpg', quality: 0.9}}>
                  <View
                    style={{
                      backgroundColor: '#fff',
                      height: '100%',
                      width: '100%',
                      borderRadius: 0,
                      padding: 0,
                      borderWidth: 0.2,
                      borderColor: '#c0c0c8',
                    }}>
                    <View
                      style={{
                        flex: 0.5,
                        flexDirection: 'row',
                        backgroundColor: '#f0f0f0',
                      }}>
                      <View
                        style={{
                          flex: 1,
                          justifyContent: 'center',
                          alignItems: 'center',
                          width: '100%',
                        }}>
                        <View
                          style={{
                            flex: 1,
                            alignItems: 'flex-start',
                            width: '100%',
                          }}>
                          <Image
                            style={{
                              width: 120,
                              justifyContent: 'center',
                              height: '100%',
                            }}
                            resizeMode={'contain'}
                            source={require('../../images/acelogo2.png')}
                          />
                        </View>
                        <View style={{flex: 1.5}}>
                          <Text
                            style={{
                              fontSize: 17.5,
                              color: '#404040',
                              marginBottom: 5,
                              fontFamily: 'Cochin',
                            }}>
                            {this.state
                              .connect_to_micro_atm_radio_button_value == 1
                              ? 'TRANSACTION INVOICE'
                              : this.state
                                  .connect_to_micro_atm_radio_button_value == 3
                              ? 'BALANCE INVOICE'
                              : 'OTHER INVOICE'}
                          </Text>
                          <View
                            style={{
                              // flex: .8,
                              alignItems: 'center',
                              // width: '100%',
                              justifyContent: 'center',
                            }}>
                            <Text
                              numberOfLines={1}
                              style={{
                                fontSize: 15,
                                color: '#59697D',
                                paddingHorizontal: 10,
                              }}>
                              #{this.state.transactionData.bankRrn}
                            </Text>
                          </View>
                        </View>
                      </View>
                    </View>
                    <View
                      style={{
                        flex: 0.1,
                      }}
                    />
                    <View
                      style={{
                        flex: 0.3,
                        flexDirection: 'row',
                        width: '100%',
                      }}>
                      <View
                        style={{
                          width: '100%',
                          alignItems: 'center',
                          height: '100%',
                          justifyContent: 'center',
                        }}>
                        <Text
                          style={{
                            fontSize: 16,
                            color: '#a9a9a9',
                            alignSelf: 'center',
                          }}>
                          {this.state.connect_to_micro_atm_radio_button_value ==
                          1
                            ? 'Amount'
                            : 'Balance'}
                        </Text>
                        <View
                          style={{
                            flexDirection: 'row',
                            //flex: 1,
                            alignItems: 'center',
                            paddingVertical: 7,
                          }}>
                          <View
                            style={{
                              alignItems: 'flex-end',
                              justifyContent: 'center',
                              paddingRight: 2,
                            }}>
                            <Icon
                              name="rupee"
                              type={'font-awesome'}
                              size={17}
                              color="#001847"
                              containerStyle={{
                                fontSize: 45,
                                fontWeight: 'bold',
                                color: '#001847',
                              }}
                            />
                          </View>

                          <View style={{}}>
                            <Text
                              numberOfLines={1}
                              ellipsizeMode={'tail'}
                              style={{
                                fontSize: 22,
                                fontWeight: 'bold',
                                color: '#001847',
                              }}>
                              {this.state
                                .connect_to_micro_atm_radio_button_value == 1
                                ? this.state.transactionData.transAmount
                                : this.state.transactionData.balAmount}
                            </Text>
                          </View>
                        </View>
                        {/* <Text style={{fontSize: 22, alignSelf: 'center'}}>
                        {this.state.connect_to_micro_atm_radio_button_value == 1
                          ? this.state.transactionData.transAmount
                          : this.state.transactionData.balAmount}
                      </Text> */}
                      </View>
                    </View>
                    <View style={{flex: 0.8, width: '100%'}}>
                      <View
                        style={{
                          flex: 0.4,
                          flexDirection: 'row',
                          width: '100%',
                          // paddingRight: 10,
                        }}>
                        <View
                          style={{
                            width: '50%',
                            alignItems: 'center',
                            height: '100%',
                            justifyContent: 'center',
                          }}>
                          <Text
                            style={{
                              fontSize: 14,
                              color: '#a9a9a9',
                              alignSelf: 'center',
                            }}>
                            Time-Date
                          </Text>
                          <Text style={{fontSize: 14, alignSelf: 'center'}}>
                            {moment().format('MMM DD , h:mm a')}
                          </Text>
                        </View>
                        <View
                          style={{
                            width: '50%',
                            alignItems: 'center',
                            height: '100%',
                            justifyContent: 'center',
                          }}>
                          <Text style={{fontSize: 14, color: '#a9a9a9'}}>
                            Transaction Type{' '}
                          </Text>
                          <Text
                            numberOfLines={1}
                            style={{fontSize: 14, paddingHorizontal: 10}}>
                            {this.state
                              .connect_to_micro_atm_radio_button_value == 1
                              ? 'Cash Withdrawal'
                              : 'Balance Inquiry'}
                          </Text>
                        </View>
                      </View>
                      {/* <View
                    style={{
                      flex: 0.4,
                      alignItems: 'center',
                      width: '100%',
                      justifyContent: 'center',
                    }}>
                    <Text style={{fontSize: 16, color: '#a9a9a9'}}>
                      Transaction Type{' '}
                    </Text>
                    <Text
                      numberOfLines={1}
                      style={{fontSize: 16, paddingHorizontal: 10}}>
                      {this.state.connect_to_micro_atm_radio_button_value == 1
                        ? 'Cash Withdrawal'
                        : 'Balance Inquiry'}
                    </Text>
                  </View> */}
                      <View
                        style={{
                          flex: 0.4,
                          alignItems: 'center',
                          width: '100%',
                          justifyContent: 'center',
                        }}>
                        <Text style={{fontSize: 14, color: '#a9a9a9'}}>
                          Transaction Status{' '}
                        </Text>
                        <Text
                          numberOfLines={3}
                          style={{
                            fontSize: 16,
                            paddingHorizontal: 10,
                            textAlign: 'center',
                          }}>
                          {this.state.transactionData.response ==
                          'Request Completed'
                            ? 'SUCCESS'
                            : this.state.transactionData.response}
                        </Text>
                      </View>
                      <View style={{flex: 0.2}} />
                    </View>
                  </View>
                </ViewShot>
              </ScrollView>
            </View>
          </View>
          {/* <View
          style={{
            backgroundColor: '#fff',
            height: '60%',
            width: '85%',
            borderRadius: 5,
            padding: 5,
          }}>
          <View
            style={{
              flex: 0.5,
              flexDirection: 'row',
              backgroundColor: '#c0c0c8',
            }}>
            <View
              style={{
                flex: 1,
                alignItems: 'center',
                width: '100%',
                justifyContent: 'center',
              }}>
              <Text style={{fontSize: 18, color: '#000', marginBottom: 5}}>
                {this.state.connect_to_micro_atm_radio_button_value == 1
                  ? 'Transaction Reciept'
                  : this.state.connect_to_micro_atm_radio_button_value == 3
                  ? 'Balance Reciept'
                  : 'Others'}
              </Text>
              <Text
                numberOfLines={1}
                style={{fontSize: 17, color: '#fff', paddingHorizontal: 10}}>
                #{this.state.transactionData.bankRrn}
              </Text>
            </View>
          </View>
          <View
            style={{
              flex: 0.5,
              flexDirection: 'row',
              width: '100%',
              paddingRight: 10,
            }}>
            <View
              style={{
                width: '50%',
                alignItems: 'flex-start',
                height: '100%',
                justifyContent: 'center',
              }}>
              <Text
                style={{fontSize: 16, color: '#a9a9a9', alignSelf: 'center'}}>
                {this.state.connect_to_micro_atm_radio_button_value == 1
                  ? 'Amount'
                  : 'Balance'}
              </Text>
              <Text style={{fontSize: 16, alignSelf: 'center'}}>
                {this.state.connect_to_micro_atm_radio_button_value == 1
                  ? this.state.transactionData.transAmount
                  : this.state.transactionData.balAmount}
              </Text>
            </View>
            <View
              style={{
                width: '50%',
                alignItems: 'flex-start',
                height: '100%',
                justifyContent: 'center',
              }}>
              <Text
                style={{fontSize: 16, color: '#a9a9a9', alignSelf: 'center'}}>
                Time-Date
              </Text>
              <Text style={{fontSize: 14, alignSelf: 'center'}}>
                {moment().format('MMM DD , h:mm a')}
              </Text>
            </View>
          </View>
          <View
            style={{
              flex: 0.4,
              alignItems: 'center',
              width: '100%',
              justifyContent: 'center',
            }}>
            <Text style={{fontSize: 16, color: '#a9a9a9'}}>
              Transaction Type{' '}
            </Text>
            <Text
              numberOfLines={1}
              style={{fontSize: 16, paddingHorizontal: 10}}>
              {this.state.connect_to_micro_atm_radio_button_value == 1
                ? 'Cash Withdrawal'
                : 'Balance Inquiry'}
            </Text>
          </View>
          <View
            style={{
              flex: 0.4,
              alignItems: 'center',
              width: '100%',
              justifyContent: 'center',
            }}>
            <Text style={{fontSize: 16, color: '#a9a9a9'}}>
              Transaction Status{' '}
            </Text>
            <Text
              numberOfLines={1}
              style={{fontSize: 16, paddingHorizontal: 10}}>
              {this.state.transactionData.response}
            </Text>
          </View>
          <View style={{flex: 0.4}} />
        </View> */}
        </View>
      </Modal>
    );
  }

  getReportHistoryData() {
    getReports()
      .then((result) => {
        this.setReportData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getMahagramReportHistoryData() {
    getMahagramReports()
      .then((result) => {
        this.setData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getIciciReportHistoryData() {
    getIciciReports()
      .then((result) => {
        this.setData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }
  getWaterAuthorityHistoryDetails() {
    WaterAuthorityHistoryList_BillPayment()
      .then((result) => {
        this.setHistoryData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getKsebHistoryDetails() {
    KsebHistoryList_BillPayment()
      .then((result) => {
        this.setHistoryData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getAsianetHistoryDetails() {
    AsianetHistoryList_BillPayment()
      .then((result) => {
        this.setHistoryData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getMobileHistoryDetails() {
    mobileHistoryList_BillPayment()
      .then((result) => {
        this.setHistoryData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getMoneyTransferHistory() {
    moneyTransferList_MoneyTransfer()
      .then((result) => {
        this.setHistoryData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getWalletRequestHistory() {
    walletList_MoneyTransfer()
      .then((result) => {
        this.setWalletHistoryData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getSettlementHistory() {
    settlementHistoryList_Settlement()
      .then((result) => {
        this.setHistoryData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getVehicleCommission_Insurance_History() {
    vehicleCommissionHistoryList_Insurance()
      .then((result) => {
        this.setData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getHealthCommission_Insurance_History() {
    healthCommissionHistoryList_Insurance()
      .then((result) => {
        this.setData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }
  getTravelCommission_Insurance_History() {
    travelCommissionHistoryList_Insurance()
      .then((result) => {
        this.setData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getFastagRegistration_History() {
    fastagRegistrationHistoryList_Fastag()
      .then((result) => {
        this.setData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getFastagRecharge_History() {
    fastagRechargeHistoryList_Fastag()
      .then((result) => {
        this.setData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getFastagRecharge_Icici_History() {
    fastagRechargeHistoryList_Icici_Fastag()
      .then((result) => {
        this.setData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getTeacherIndRegistration_History() {
    getTeacherIndRegistrationHistory_TeacherInd()
      .then((result) => {
        this.setData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }
  getAEPSTransaction_History() {
    getAEPSReports()
      .then((result) => {
        this.setData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getDthHistoryDetails() {
    dthHistoryList_BillPayment()
      .then((result) => {
        this.setHistoryData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getBsnlHistoryDetails() {
    BsnlHistoryList_BillPayment()
      .then((result) => {
        this.setHistoryData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getDashboardAgentHistory(id)
  {
    agentHistory_Dashboard(id)
    .then((result) => {
      this.setData(result);
    })
    .catch((err) => {
      this.setCatchError();
    });
  }

  getAllTransactionHistory() {
    allTransactionHistoryList()
      .then((result) => {
        this.setAllHistoryData(result);
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  getConnectToMicroAtm() {
    var radio_props = [
      {label: 'Cash Withdrawal', value: 1},
      {label: 'Balance Enquiry', value: 3},
      {label: 'Show History', value: 8},
      //{label: 'Cash Deposit', value: 2},
      //{label: 'Mini Statement', value: 4 },

      // {label: 'Card Activation', value: 5 },
      // {label: 'Reset Pin', value: 6 },
      // {label: 'Change Pin', value: 7},
    ];

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text style={{fontSize: 18, color: '#00000090'}}>
              Connect To Micro Atm
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();
                this.setState({buttonLoading: true}, () => {
                  if (this.state.connect_to_micro_atm_radio_button_value != 8) {
                    if (
                      this.state.connect_to_micro_atm_username !== '' &&
                      this.state.connect_to_micro_atm_password !== '' &&
                      (this.state.connect_to_micro_atm_amount > 0 ||
                        this.state.connect_to_micro_atm_radio_button_value ==
                          3) &&
                      this.state.connect_to_micro_atm_mobileno.length == 10
                    ) {
                      BleManager.enableBluetooth()
                        .then(() => {
                          // Success code
                          console.log(
                            'The bluetooth is already enabled or the user confirm',
                          );
                          this.locationEnable();
                          //this.locationEnable_Mahagram();
                        })
                        .catch((error) => {
                          //Failure code
                          // this.bluetoothAwesomeAlertMessage();
                          this.setState({buttonLoading: false});
                        });
                    } else {
                      this.setState({buttonLoading: false}, () => {
                        if (this.state.connect_to_micro_atm_username == '') {
                          this.generalAwesomeAlertMessage(
                            'Please enter username',
                          );
                        } else if (
                          this.state.connect_to_micro_atm_password == ''
                        ) {
                          this.generalAwesomeAlertMessage(
                            'Please enter password',
                          );
                        } else if (this.state.connect_to_micro_atm_amount < 1) {
                          this.generalAwesomeAlertMessage(
                            'Please enter amount',
                          );
                        } else if (
                          this.state.connect_to_micro_atm_mobileno.length < 10
                        ) {
                          this.generalAwesomeAlertMessage(
                            'Please enter mobile number',
                          );
                        }
                      });
                    }
                  } else {
                    if (
                      this.state.connect_to_micro_atm_username !== '' &&
                      this.state.connect_to_micro_atm_password !== ''
                    ) {
                      BleManager.enableBluetooth()
                        .then(() => {
                          // Success code
                          console.log(
                            'The bluetooth is already enabled or the user confirm',
                          );
                          this.locationEnable();
                          //this.locationEnable_Mahagram();
                        })
                        .catch((error) => {
                          //Failure code
                          this.bluetoothAwesomeAlertMessage();
                        });
                    } else {
                      this.setState({buttonLoading: false}, () => {
                        if (this.state.connect_to_micro_atm_username == '') {
                          this.generalAwesomeAlertMessage(
                            'Please enter username',
                          );
                        } else if (
                          this.state.connect_to_micro_atm_password == ''
                        ) {
                          this.generalAwesomeAlertMessage(
                            'Please enter password',
                          );
                        } else if (this.state.connect_to_micro_atm_amount < 1) {
                          this.generalAwesomeAlertMessage(
                            'Please enter amount',
                          );
                        } else if (
                          this.state.connect_to_micro_atm_mobileno.length < 10
                        ) {
                          this.generalAwesomeAlertMessage(
                            'Please enter mobile number',
                          );
                        }
                      });
                    }
                  }
                });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            {this.state.connect_to_micro_atm_username_set == false && (
              <Input
                autoCapitalize={'none'}
                inputContainerStyle={{
                  paddingHorizontal: 10,
                  borderWidth: 1,
                  borderRadius: 3,
                  borderColor: '#c0c0c8',
                  marginLeft: 1,
                  backgroundColor: '#fff',
                }}
                containerStyle={{
                  width: '95%',
                  paddingHorizontal: 0,
                }}
                autoCorrect={false}
                // keyboardType={'email-address'}
                label={'Merchant ID'}
                labelStyle={{
                  color: 'black',
                  fontSize: 14,
                  marginBottom: 10,
                  marginLeft: 0,
                }}
                placeholderTextColor={'grey'}
                placeholder={'Enter Merchant ID'}
                value={this.state.connect_to_micro_atm_username}
                onChangeText={(text) =>
                  this.setState({connect_to_micro_atm_username: text})
                }
              />
            )}

            {this.state.connect_to_micro_atm_password_set == false && (
              <Input
                autoCapitalize={'none'}
                inputContainerStyle={{
                  paddingHorizontal: 10,
                  borderWidth: 1,
                  borderRadius: 3,
                  borderColor: '#c0c0c8',
                  marginLeft: 1,
                }}
                containerStyle={{
                  width: '95%',
                  paddingHorizontal: 0,
                  //marginTop: 5
                }}
                autoCorrect={false}
                // keyboardType={'email-address'}
                label={'Password'}
                labelStyle={{
                  color: 'black',
                  fontSize: 14,
                  marginBottom: 10,
                  marginLeft: 0,
                }}
                secureTextEntry={!this.state.connect_to_micro_atm_showPassword}
                placeholderTextColor={'grey'}
                placeholder={'Enter password'}
                value={this.state.connect_to_micro_atm_password}
                onChangeText={(text) =>
                  this.setState({connect_to_micro_atm_password: text})
                }
                rightIcon={
                  <Icon
                    color="#444"
                    size={20}
                    type="entypo"
                    underlayColor="rgba(255,255,255,0)"
                    name={
                      !this.state.connect_to_micro_atm_showPassword
                        ? 'eye'
                        : 'eye-with-line'
                    }
                    //name={'eye'}

                    onPress={() =>
                      this.setState({
                        connect_to_micro_atm_showPassword: !this.state
                          .connect_to_micro_atm_showPassword,
                      })
                    }
                  />
                }
              />
            )}
            {this.state.connect_to_micro_atm_mobileno_set == false && (
              <Input
                disabled={
                  this.state.connect_to_micro_atm_radio_button_value == 8
                }
                autoCapitalize={'none'}
                inputContainerStyle={{
                  paddingHorizontal: 10,
                  borderWidth: 1,
                  borderRadius: 3,
                  borderColor: '#c0c0c8',
                  marginLeft: 1,
                }}
                containerStyle={{
                  width: '95%',
                  paddingHorizontal: 0,
                  //marginTop: 5
                }}
                autoCorrect={false}
                keyboardType={'numeric'}
                label={
                  this.state.connect_to_micro_atm_radio_button_value != 8
                    ? 'Mobile Number'
                    : 'Mobile Number (Not Reqd.)'
                }
                labelStyle={{
                  color: 'black',
                  fontSize: 14,
                  marginBottom: 10,
                  marginLeft: 0,
                }}
                maxLength={10}
                placeholderTextColor={'grey'}
                placeholder={'Enter mobile number'}
                value={this.state.connect_to_micro_atm_mobileno}
                onChangeText={(text) =>
                  this.setState({connect_to_micro_atm_mobileno: text})
                }
              />
            )}
            <Input
              disabled={
                this.state.connect_to_micro_atm_radio_button_value == 8 ||
                this.state.connect_to_micro_atm_radio_button_value == 3
              }
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={
                this.state.connect_to_micro_atm_radio_button_value == 8 ||
                this.state.connect_to_micro_atm_radio_button_value == 3
                  ? 'Amount (Not Reqd.)'
                  : 'Amount'
              }
              labelStyle={{
                color: 'black',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter amount'}
              value={this.state.connect_to_micro_atm_amount}
              onChangeText={(text) =>
                this.setState({connect_to_micro_atm_amount: text})
              }
            />
            <Input
              disabled={
                this.state.connect_to_micro_atm_radio_button_value == 8 ||
                this.state.connect_to_micro_atm_radio_button_value == 3
              }
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={
                this.state.connect_to_micro_atm_radio_button_value == 8 ||
                this.state.connect_to_micro_atm_radio_button_value == 3
                  ? 'Remarks (Not Reqd.)'
                  : 'Remarks (Not Mandatory)'
              }
              labelStyle={{
                color: 'black',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter remarks'}
              value={this.state.connect_to_micro_atm_remarks}
              onChangeText={(text) =>
                this.setState({connect_to_micro_atm_remarks: text})
              }
            />
            <View
              style={{
                alignItems: 'flex-start',
                width: '100%',
                paddingHorizontal: 15,
                marginTop: 5,
              }}>
              <Text
                style={{fontSize: 14, fontWeight: 'bold', marginBottom: 11}}>
                Micro-Atm Options
              </Text>
            </View>
            <View
              style={{
                alignItems: 'flex-start',
                width: '100%',
                paddingHorizontal: 15,
                marginTop: 0,
                marginBottom: 25,
              }}>
              <RadioForm
                labelStyle={{fontSize: 17, fontWeight: 'bold'}}
                labelColor={'#00000090'}
                style={{fontSize: 50}}
                radio_props={radio_props}
                initial={0}
                onPress={(value) => {
                  this.setState({
                    connect_to_micro_atm_radio_button_value: value,
                  });
                }}
              />
            </View>
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getProfilePage() {
    let {profile_data} = this.state;
    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text style={{fontSize: 18, color: '#00000090'}}>
              Profile Details
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}></View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <LinearGradient
            //colors={[item.color1, item.color2]}
            colors={['#006eb9', '#006eb9']}
            start={{x: 0, y: 0}}
            end={{x: 1, y: 0}}
            style={{
              height: 120,
              alignSelf: 'center',
              alignItems: 'center',
              justifyContent: 'center',
              backgroundColor: '#fff',
              width: '95%',
              //paddingHorizontal:20,
              // paddingVertical:20,
              borderWidth: 0,
              borderRadius: 8,
              marginVertical: 20,
              flexDirection: 'row',
            }}>
            <View
              style={{
                flex: 1.5,
                alignItems: 'center',
                justifyContent: 'center',
              }}>
              <Icon
                size={60}
                name={'user'}
                type={'feather'}
                color={'#ffff'}
                underlayColor="rgba(255,255,255,0)"
              />
            </View>
            <View
              style={{
                flex: 4,
                alignItems: 'flex-start',
                justifyContent: 'center',
                //paddingLeft: 10,
              }}>
              {this.state.balanceLoading == true ? (
                <View
                  style={{
                    flexDirection: 'row',
                    justifyContent: 'center',
                    alignItems: 'center',
                    // marginBottom: 6,
                  }}>
                  <ActivityIndicator size={'small'} color={'#fff'} />
                  <Text
                    numberOfLines={1}
                    ellipsizeMode={'tail'}
                    style={{
                      paddingHorizontal: 4,
                      fontSize: 28,
                      fontWeight: 'bold',
                      color: 'white',
                      alignSelf: 'center',
                    }}>
                    {''}
                  </Text>
                </View>
              ) : (
                <View
                  style={{
                    flexDirection: 'row',
                    justifyContent: 'center',
                    alignItems: 'center',
                    // marginBottom: 6,
                  }}>
                  <Icon
                    name="rupee"
                    type={'font-awesome'}
                    size={21}
                    color="#ffff"
                    containerStyle={{
                      justifyContent: 'center',
                      alignSelf: 'center',
                      //paddingTop: 2,
                    }}
                  />
                  <Text
                    numberOfLines={1}
                    ellipsizeMode={'tail'}
                    style={{
                      paddingHorizontal: 4,
                      fontSize: 28,
                      fontWeight: 'bold',
                      color: 'white',
                      alignSelf: 'center',
                    }}>
                    {this.state.account_balance
                      .toString()
                      .replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,')}
                  </Text>
                </View>
              )}
              <View>
                <Text
                  numberOfLines={1}
                  ellipsizeMode={'tail'}
                  style={{
                    paddingHorizontal: 2,
                    fontSize: 14,
                    fontWeight: '500',
                    color: 'white',
                    alignSelf: 'center',
                  }}>
                  Account Balance
                </Text>
              </View>
            </View>
          </LinearGradient>

          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <View
              style={{width: '100%', flexDirection: 'row', marginBottom: 20}}>
              <View
                style={{
                  flex: 1.7,
                  justifyContent: 'center',
                  alignItems: 'center',
                }}>
                <Icon
                  size={24}
                  name={'user'}
                  type={'antdesign'}
                  color={'#c0c0c8'}
                  underlayColor="rgba(255,255,255,0)"
                />
              </View>

              <View style={{flex: 10, height: '100%'}}>
                <View style={{flex: 1, height: '100%', paddingVertical: 3}}>
                  <Text
                    style={{color: '#c0c0c8', fontWeight: '800', fontSize: 14}}>
                    Full Name
                  </Text>
                </View>
                <View
                  style={{
                    flex: 1,
                    height: '100%',
                    paddingRight: 20,
                    paddingVertical: 5,
                  }}>
                  <Text
                    numberOfLines={1}
                    style={{
                      color: '#7F8288',
                      fontSize: 18,
                      fontWeight: 'bold',
                    }}>
                    {profile_data.agname + ' ' + profile_data.lname}
                  </Text>
                </View>
              </View>
            </View>
            <View
              style={{width: '100%', flexDirection: 'row', marginBottom: 20}}>
              <View
                style={{
                  flex: 1.7,
                  justifyContent: 'center',
                  alignItems: 'center',
                }}>
                <Icon
                  size={24}
                  name={'email-outline'}
                  type={'material-community'}
                  color={'#c0c0c8'}
                  underlayColor="rgba(255,255,255,0)"
                />
              </View>

              <View style={{flex: 10, height: '100%'}}>
                <View style={{flex: 1, height: '100%', paddingVertical: 3}}>
                  <Text
                    style={{color: '#c0c0c8', fontWeight: '800', fontSize: 14}}>
                    Email Id
                  </Text>
                </View>
                <View
                  style={{
                    flex: 1,
                    height: '100%',
                    paddingRight: 20,
                    paddingVertical: 5,
                  }}>
                  <Text
                    numberOfLines={1}
                    style={{
                      color: '#7F8288',
                      fontSize: 18,
                      fontWeight: 'bold',
                    }}>
                    {profile_data.email}
                  </Text>
                </View>
              </View>
            </View>
            <View
              style={{width: '100%', flexDirection: 'row', marginBottom: 20}}>
              <View
                style={{
                  flex: 1.7,
                  justifyContent: 'center',
                  alignItems: 'center',
                }}>
                <Icon
                  size={24}
                  name={'map-pin'}
                  type={'feather'}
                  color={'#c0c0c8'}
                  underlayColor="rgba(255,255,255,0)"
                />
              </View>

              <View style={{flex: 10, height: '100%'}}>
                <View style={{flex: 1, height: '100%', paddingVertical: 3}}>
                  <Text
                    style={{color: '#c0c0c8', fontWeight: '800', fontSize: 14}}>
                    Address
                  </Text>
                </View>
                <View
                  style={{
                    flex: 1,
                    height: '100%',
                    paddingRight: 20,
                    paddingVertical: 5,
                  }}>
                  <Text
                    numberOfLines={3}
                    style={{
                      color: '#7F8288',
                      fontSize: 18,
                      fontWeight: 'bold',
                    }}>
                    {profile_data.address}
                  </Text>
                </View>
              </View>
            </View>
            <View
              style={{width: '100%', flexDirection: 'row', marginBottom: 20}}>
              <View
                style={{
                  flex: 1.7,
                  justifyContent: 'center',
                  alignItems: 'center',
                }}>
                <Icon
                  size={24}
                  name={'phone'}
                  type={'feather'}
                  color={'#c0c0c8'}
                  underlayColor="rgba(255,255,255,0)"
                />
              </View>

              <View style={{flex: 10, height: '100%'}}>
                <View style={{flex: 1, height: '100%', paddingVertical: 3}}>
                  <Text
                    style={{color: '#c0c0c8', fontWeight: '800', fontSize: 14}}>
                    Phone
                  </Text>
                </View>
                <View
                  style={{
                    flex: 1,
                    height: '100%',
                    paddingRight: 20,
                    paddingVertical: 5,
                  }}>
                  <Text
                    numberOfLines={1}
                    style={{
                      color: '#7F8288',
                      fontSize: 18,
                      fontWeight: 'bold',
                    }}>
                    {profile_data.phone}
                  </Text>
                </View>
              </View>
            </View>

            <View
              style={{width: '100%', flexDirection: 'row', marginBottom: 20}}>
              <View
                style={{
                  flex: 1.7,
                  justifyContent: 'center',
                  alignItems: 'center',
                }}>
                <Icon
                  size={24}
                  name={'identifier'}
                  type={'material-community'}
                  color={'#c0c0c8'}
                  underlayColor="rgba(255,255,255,0)"
                />
              </View>

              <View style={{flex: 10, height: '100%'}}>
                <View style={{flex: 1, height: '100%', paddingVertical: 3}}>
                  <Text
                    style={{color: '#c0c0c8', fontWeight: '800', fontSize: 14}}>
                    Agent Code
                  </Text>
                </View>
                <View
                  style={{
                    flex: 1,
                    height: '100%',
                    paddingRight: 20,
                    paddingVertical: 5,
                  }}>
                  <Text
                    numberOfLines={1}
                    style={{
                      color: '#7F8288',
                      fontSize: 18,
                      fontWeight: 'bold',
                    }}>
                    {profile_data.agent_code}
                  </Text>
                </View>
              </View>
            </View>
          </ScrollView>
          {this.state.superAgent_Header == true && (
            <View
              style={{
                paddingVertical: 10,
                width: '100%',
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
              }}>
              <TouchableOpacity
                onPress={() => {
                  this.setState(
                    {
                      changingPage: true,
                      settingsLoading: true,
                    },
                    () => {
                      getDashboardDetails()
                        .then((result) => {
                          console.log(result.data);
                          if (result.data && result.data.data !== '') {
                            setTimeout(() => {
                              this.setState({
                                dashboard_balance:result.data.totalbalance?result.data.totalbalance.toString():'0',
                                showDashboard: true,
                                settingsLoading: false,
                                changingPage: false,
                                dashBoardList_dashboard:
                                  result.data && result.data.data
                                    ? result.data.data
                                    : [],
                              });
                            }, 100);
                          } else {
                            this.setState(
                              {
                                settingsLoading: false,
                                changingPage: false,
                              },
                              () => {
                                this.errorAwesomeAlertMessage(
                                  'Unable to transaction history',
                                );
                              },
                            );
                          }
                        })
                        .catch((err) => {
                          this.setState(
                            {
                              settingsLoading: false,
                              changingPage: false,
                            },
                            () => {
                              this.errorAwesomeAlertMessage(
                                'Unable to transaction history',
                              );
                            },
                          );
                        });
                    },
                  );
                }}
                style={{
                  flexDirection: 'row',
                  height: 42,
                  width: '92%',
                  backgroundColor: '#FFF0E9',
                  borderWidth: 0.5,
                  borderColor: '#FFEDE3',
                  borderRadius: 4,
                }}>
                <View
                  style={{
                    flex: 10,
                    justifyContent: 'center',
                    alignItems: 'flex-start',
                    paddingLeft: 20,
                  }}>
                  <Text
                    numberOfLines={1}
                    style={{
                      color: '#FF3E00',
                      fontSize: 15,
                      fontWeight: 'bold',
                    }}>
                    {'Goto Dashboard'}
                  </Text>
                </View>
                <View
                  style={{
                    flex: 1.5,
                    alignItems: 'center',
                    justifyContent: 'center',
                  }}>
                  <Icon
                    size={20}
                    name={'triangle-right'}
                    type={'entypo'}
                    color={'#FF5E10'}
                    underlayColor="rgba(255,255,255,0)"
                  />
                </View>
              </TouchableOpacity>
            </View>
          )}
          <View
            style={{
              paddingBottom: 10,
              width: '100%',
              backgroundColor: '#fff',
              alignItems: 'center',
              justifyContent: 'center',
            }}>
            <TouchableOpacity
              onPress={() => {
                this.setState(
                  {
                    changingPage: true,
                    settingsLoading: true,
                  },
                  () => {
                    getBCCertificateFile()
                      .then((result) => {
                        console.log(result.data);
                        if (result.data && result.data.data !== '') {
                          setTimeout(() => {
                            this.setState({
                              showBCPage: true,
                              settingsLoading: false,
                              changingPage: false,
                              bcCertificateUrl:
                                result.data && result.data.data
                                  ? result.data.data
                                  : '',
                            });
                          }, 100);
                        } else {
                          this.setState(
                            {
                              settingsLoading: false,
                              changingPage: false,
                            },
                            () => {
                              this.errorAwesomeAlertMessage(
                                'Unable to Fetch BC Certificate',
                              );
                            },
                          );
                        }
                      })
                      .catch((err) => {
                        this.setState(
                          {
                            settingsLoading: false,
                            changingPage: false,
                          },
                          () => {
                            this.errorAwesomeAlertMessage(
                              'Unable to Fetch BC Certificate',
                            );
                          },
                        );
                      });
                  },
                );
              }}
              style={{
                flexDirection: 'row',
                height: 42,
                width: '92%',
                backgroundColor: '#FFF0E9',
                borderWidth: 0.5,
                borderColor: '#FFEDE3',
                borderRadius: 4,
              }}>
              <View
                style={{
                  flex: 10,
                  justifyContent: 'center',
                  alignItems: 'flex-start',
                  paddingLeft: 20,
                }}>
                <Text
                  numberOfLines={1}
                  style={{
                    color: '#FF3E00',
                    fontSize: 15,
                    fontWeight: 'bold',
                  }}>
                  {'View my BC Certificate'}
                </Text>
              </View>
              <View
                style={{
                  flex: 1.5,
                  alignItems: 'center',
                  justifyContent: 'center',
                }}>
                <Icon
                  size={20}
                  name={'triangle-right'}
                  type={'entypo'}
                  color={'#FF5E10'}
                  underlayColor="rgba(255,255,255,0)"
                />
              </View>
            </TouchableOpacity>
          </View>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getStepOne() {
    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text style={{fontSize: 18, color: '#00000090'}}>STEP ONE</Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();
                this.setState({buttonLoading: true}, () => {
                  if (
                    this.state.name !== '' &&
                    this.state.mobile.length == 10
                  ) {
                    stepOne({
                      name: this.state.name,
                      mobile: this.state.mobile,
                    })
                      .then((result) => {
                        if (result.data.success == true) {
                          this.setState(
                            {previousDepth: this.state.pageDepth},
                            () => {
                              this.setState({
                                pageDepth: 2,
                                buttonLoading: false,

                                name: '',
                                mobile: '',
                                insertedId:
                                  result.data &&
                                  result.data.data &&
                                  result.data.data.inserted_id
                                    ? result.data.data.inserted_id
                                    : '',
                              });
                            },
                          );
                        } else {
                          this.setState({
                            buttonLoading: false,
                          });

                          this.errorAwesomeAlertMessage(
                            'Please enter correct details',
                            0,
                          );
                        }
                      })
                      .catch((err) => {
                        this.setState({buttonLoading: false}, () => {});

                        console.log('Error', err.response);
                      });
                  } else {
                    this.setState({buttonLoading: false}, () => {
                      if (this.state.name == '') {
                        this.generalAwesomeAlertMessage('Please enter name');
                      } else if (this.state.mobile.length < 10) {
                        this.generalAwesomeAlertMessage(
                          'Please enter mobile number',
                        );
                      }
                    });
                  }
                });
                // this.setState({ settingsLoading: true }, () => {
                //   if (
                //     this.state.name !== "" &&
                //     this.state.mobile.length==10
                //   ) {
                //     stepOne({
                //       name:this.state.name,mobile:this.state.mobile
                //     })
                //       .then(result => {
                //         this.setState({ settingsLoading: false });

                //         if (result.data.success==true) {
                //           console.log(result.data, "result add/edit beneficiary");
                //           aceAlert('Wallet Request done successfully\nPending approval')
                //           NavigatorService.pop()
                //         }
                //         else{
                //           aceAlert('Wallet Request failed\nPlease enter correct details')
                //         }
                //       })
                //       .catch(err => {
                //         this.setState({ settingsLoading: false }, () => {});

                //         console.log("Error", err.response);
                //       });
                //   } else {
                //     this.setState({ settingsLoading: false }, () => {
                //       if (this.state.name == "") {
                //         alert("Please enter name");
                //       } else if (this.state.mobile<10) {
                //         alert("Please enter mobile number");
                //       }
                //     });
                //   }
                // });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                backgroundColor: '#fff',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Name'}
              labelStyle={{
                color: 'black',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter name'}
              value={this.state.name}
              onChangeText={(text) => this.setState({name: text})}
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                backgroundColor: '#fff',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //  marginTop: 20,
              }}
              autoCorrect={false}
              maxLength={10}
              keyboardType={'number-pad'}
              label={'Mobile Number'}
              labelStyle={{
                color: 'black',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter mobile number'}
              value={this.state.mobile}
              onChangeText={(text) => this.setState({mobile: text})}
            />
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getStepTwo() {
    return (
      <View style={{flex: 1, width: '100%'}}>
        <View
          style={{
            flex: 1,
            backgroundColor: '#fff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text style={{fontSize: 18, color: '#00000090'}}>SCAN QR CODE</Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              borderRadius={8}
              buttonTitle={'Next'}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();
                this.setState(
                  {
                    buttonLoading: true,
                    previousDepth: this.state.pageDepth,
                  },
                  () => {
                    setTimeout(() => {
                      this.setState({
                        pageDepth: 3,
                        buttonLoading: false,
                      });
                    }, 100);
                  },
                );
                // this.setState({ settingsLoading: true }, () => {
                //   if (
                //     this.state.name !== "" &&
                //     this.state.mobile.length==10
                //   ) {
                //     stepOne({
                //       name:this.state.name,mobile:this.state.mobile
                //     })
                //       .then(result => {
                //         this.setState({ settingsLoading: false });

                //         if (result.data.success==true) {
                //           console.log(result.data, "result add/edit beneficiary");
                //           aceAlert('Wallet Request done successfully\nPending approval')
                //           NavigatorService.pop()
                //         }
                //         else{
                //           aceAlert('Wallet Request failed\nPlease enter correct details')
                //         }
                //       })
                //       .catch(err => {
                //         this.setState({ settingsLoading: false }, () => {});

                //         console.log("Error", err.response);
                //       });
                //   } else {
                //     this.setState({ settingsLoading: false }, () => {
                //       if (this.state.name == "") {
                //         alert("Please enter name");
                //       } else if (this.state.mobile<10) {
                //         alert("Please enter mobile number");
                //       }
                //     });
                //   }
                // });
              }}
            />
          </View>
        </View>
        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <View>
            <Image
              style={{
                borderWidth: 2,
                height: 400,
                width: 400,
                //opacity:0.85
              }}
              resizeMode={'contain'}
              source={require('../../images/QRaceware.jpeg')}
            />
          </View>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Next"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,previousDepth:this.state.pageDepth,},()=>{
              setTimeout(()=>{
                this.setState({pageDepth:3,settingsLoading:false,changingPage:false})
              },100)
              
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getStepThree() {
    const {stepTwoDatePicker, stepTwoDate} = this.state;
    return (
      <View style={{flex: 1, width: '100%'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#fff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text style={{fontSize: 18, color: '#00000090'}}>STEP TWO</Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              borderRadius={8}
              buttonTitle={'Submit'}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();
                this.setState({buttonLoading: true}, () => {
                  if (
                    this.state.orderId !== '' &&
                    this.state.amount.length > 0
                  ) {
                    stepTwo({
                      orderId: this.state.orderId,
                      paidDate: moment(
                        this.state.stepTwoDate,
                        'DD-MM-YYYY',
                      ).format('YYYY-MM-DD'),
                      amount: this.state.amount,
                      insertedId: this.state.insertedId,
                    })
                      .then((result) => {
                        if (result.data.success == true) {
                          this.setState(
                            {previousDepth: this.state.pageDepth},
                            () => {
                              this.setState(
                                {
                                  pageDepth: -1,
                                  buttonLoading: false,

                                  orderId: '',
                                  stepTwoDate: moment().format('DD-MM-YYYY'),
                                  amount: 0,
                                },
                                () => {
                                  this.getReportHistoryData();
                                },
                              );
                            },
                          );
                        } else {
                          this.setState({
                            buttonLoading: false,
                          });

                          this.errorAwesomeAlertMessage(
                            'Please enter correct details',
                            0,
                          );
                        }
                      })
                      .catch((err) => {
                        this.setState({buttonLoading: false}, () => {});

                        console.log('Error', err.response);
                      });
                  } else {
                    this.setState({buttonLoading: false}, () => {
                      if (this.state.orderId == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter Order ID',
                        );
                      } else if (this.state.amount < 1) {
                        this.generalAwesomeAlertMessage('Please enter amount');
                      }
                    });
                  }
                });
                // this.setState({ settingsLoading: true }, () => {
                //   if (
                //     this.state.name !== "" &&
                //     this.state.mobile.length==10
                //   ) {
                //     stepOne({
                //       name:this.state.name,mobile:this.state.mobile
                //     })
                //       .then(result => {
                //         this.setState({ settingsLoading: false });

                //         if (result.data.success==true) {
                //           console.log(result.data, "result add/edit beneficiary");
                //           aceAlert('Wallet Request done successfully\nPending approval')
                //           NavigatorService.pop()
                //         }
                //         else{
                //           aceAlert('Wallet Request failed\nPlease enter correct details')
                //         }
                //       })
                //       .catch(err => {
                //         this.setState({ settingsLoading: false }, () => {});

                //         console.log("Error", err.response);
                //       });
                //   } else {
                //     this.setState({ settingsLoading: false }, () => {
                //       if (this.state.name == "") {
                //         alert("Please enter name");
                //       } else if (this.state.mobile<10) {
                //         alert("Please enter mobile number");
                //       }
                //     });
                //   }
                // });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                backgroundColor: '#fff',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Order Id'}
              labelStyle={{
                color: '#000',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter Order ID'}
              value={this.state.orderId}
              onChangeText={(text) => this.setState({orderId: text})}
            />

            <Input
              editable={false}
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                backgroundColor: '#fff',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Date'}
              labelStyle={{
                color: '#000',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholderTextColor={'grey'}
              placeholder={'Enter date'}
              value={this.state.stepTwoDate}
              rightIcon={
                <Icon
                  color="#444"
                  size={22}
                  type="entypo"
                  underlayColor="rgba(255,255,255,0)"
                  name={'calendar'}
                  //name={'eye'}
                  onPress={() =>
                    this.setState({
                      stepTwoDatePicker: !this.state.stepTwoDatePicker,
                    })
                  }
                />
              }
              //onChangeText={text => this.setState({ DateofPayment: text })}
            />

            {this.state.stepTwoDatePicker && (
              <DatePicker
                style={{backgroundColor: '#fff', width: '100%'}}
                mode="date"
                format="DD-MM-YYYY"
                maximumDate={new Date()}
                date={this.state.stepTwoDate}
                value={new Date(moment(this.state.stepTwoDate, 'DD-MM-YYYY'))}
                confirmBtnText={'Confirm'}
                cancelBtnText={'Cancel'}
                showIcon={false}
                onChange={(event, date) => {
                  this.setState(
                    {
                      stepTwoDate: moment(date).format('DD-MM-YYYY'),

                      stepTwoDatePicker: false,
                    },
                    () => {
                      console.log(this.state.stepTwoDate);
                    },
                  );
                }}
                customStyles={{
                  dateInput: {
                    borderWidth: 0,
                    alignItems: 'flex-start',
                    //marginLeft: 10,
                  },
                  dateText: {
                    color: '#000',
                    fontSize: 18,
                  },
                  disabled: {
                    backgroundColor: '#ffff',
                  },
                }}
              />
            )}
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                backgroundColor: '#fff',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Amount'}
              labelStyle={{
                color: '#000',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter Amount '}
              value={this.state.amount}
              onChangeText={(text) => this.setState({amount: text})}
            />
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.orderId !== "" &&
                    this.state.amount.length>0
                  ) {
                   stepTwo({
                  orderId:this.state.orderId,paidDate:moment(this.state.stepTwoDate,'DD-MM-YYYY').format('YYYY-MM-DD'),amount:this.state.amount,insertedId:this.state.insertedId
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth},()=>{
                      this.setState({pageDepth:4,settingsLoading:false,changingPage:false,orderId:'',stepTwoDate:moment().format('DD-MM-YYYY'),amount:0},()=>{
                        this.getReportHistoryData()
                      })
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.orderId == "") {
                    alert("Please enter Order ID");
                  } else if (this.state.amount<1) {
                    alert("Please enter amount");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getHistory(dataType) {
    return (
      <View style={{flex: 1, width: '100%'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#fff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          {this.state.previousDepth !== 3 && (
            <View
              style={{
                flex: 1,
                justifyContent: 'center',
                alignItems: 'center',
              }}>
              <Icon
                size={30}
                name={
                  this.state.previousDepth == 3 ? 'checkcircle' : 'arrowleft'
                }
                type={'antdesign'}
                color={'#00000090'}
                underlayColor="rgba(255,255,255,0)"
                onPress={() => {
                  this.handleBackButtonClick();
                }}
              />
            </View>
          )}
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 20, color: '#00000090'}}>
              {dataType !== ''
                ? dataType == 'mahagram'
                  ? 'Transaction History'
                  : dataType == 'kseb'
                  ? 'KSEB Payment History'
                  : dataType == 'AEPS Transaction History'
                  ? 'AEPS Transaction History'
                  : dataType == 'Agent Dashboard History'
                  ? 'Transaction History'
                  : dataType == 'Vehicle Commission History'
                  ? 'Commission History'
                  : dataType == 'TeacherInd Registration History'
                  ? 'TeacherInd Registration History'
                  : dataType == 'Health Commission History'
                  ? 'Commission History'
                  : dataType == 'Travel Commission History'
                  ? 'Commission History'
                  : dataType == 'Fastag Registration History'
                  ? 'Fastag Registration History'
                  : dataType == 'Fastag Recharge History'
                  ? 'Fastag Recharge History'
                  : dataType == 'Fastag Recharge Icici History'
                  ? 'Fastag Recharge History'
                  : dataType == 'icici'
                  ? 'Transaction History'
                  : dataType == 'water_authority'
                  ? 'Water Authority Payment History'
                  : dataType == 'bsnl'
                  ? 'BSNL Payment History'
                  : dataType == 'asianet'
                  ? 'Asianet Payment History'
                  : dataType == 'mobile'
                  ? 'Mobile Recharge History'
                  : dataType == 'dth'
                  ? 'Dth Recharge History'
                  : dataType == 'settlement'
                  ? 'Settlement History'
                  : dataType == 'transfer_beneficiary'
                  ? 'Money Transfer History'
                  : dataType == 'alltransaction'
                  ? 'All Transactions'
                  : dataType == 'wallet_request'
                  ? 'Wallet Request History'
                  : 'Withdrawal Reports'
                : 'History Details'}
            </Text>
          </View>

          <View style={{flex: 2}} />
          {this.state.previousDepth == 3 && (
            <View
              style={{
                flex: 1,
                justifyContent: 'center',
                alignItems: 'center',
              }}>
              <Icon
                size={32}
                name={
                  this.state.previousDepth == 3 ? 'checkcircle' : 'arrowleft'
                }
                type={'antdesign'}
                color={'#00000090'}
                underlayColor="rgba(255,255,255,0)"
                onPress={() => {
                  if (this.state.pageDepth == 4) {
                    this.setState(
                      {
                        changingPage: true,
                        settingsLoading: true,
                        reportLoading: true,
                      },
                      () => {
                        setTimeout(() => {
                          this.setState(
                            {
                              pageDepth: 0,
                              previousDepth: 0,
                              settingsLoading: false,
                              changingPage: false,
                            },
                            () => {},
                          );
                        }, 100);
                      },
                    );
                  } else {
                    this.setState(
                      {
                        changingPage: true,
                        settingsLoading: true,
                        reportLoading: true,
                      },
                      () => {
                        setTimeout(() => {
                          this.setState(
                            {
                              pageDepth: 0,
                              settingsLoading: false,
                              changingPage: false,
                            },
                            () => {},
                          );
                        }, 100);
                      },
                    );
                  }
                }}
              />
            </View>
          )}
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
            paddingTop: 20,
          }}>
          <View style={{width: '100%', flex: 1}}>
            {this.state.fromDate !== '' &&
              this.state.toDate !== '' &&
              !this.state.keyboardOpen &&
              this.state.searchKey.length < 1 && (
                <PlusButton
                  disabled={
                    this.state.fromDate == '' && this.state.toDate == ''
                  }
                  iconName={'sliders'}
                  iconType={'font-awesome'}
                  iconColor={'#fff'}
                  backgroundColor={'#2C4259'}
                  onPress={() => {
                    if (
                      this.state.fromDate !== '' &&
                      this.state.toDate !== ''
                    ) {
                      this.setState(
                        {
                          tempFromDate: this.state.fromDate,
                          tempToDate: this.state.toDate,
                          tempType: this.state.type,
                          singleOption: this.state.singleDateInModal,
                        },
                        () => {
                          if (this.state.singleOption == true) {
                            this.setState({
                              singleOption_tempSingleDate: this.state.toDate,
                            });
                          } else {
                            this.setState({
                              singleOption_tempFromDate: this.state.fromDate,
                              singleOption_tempTODate: this.state.toDate,
                            });
                          }
                          this.setState(
                            {
                              modalOpen: true,
                              settingFilter: true,
                            },
                            () => {
                              if (
                                this.state.fromDate == this.state.minimumDate &&
                                this.state.toDate == this.state.maximumDate
                              ) {
                                this.setState({
                                  filteredData: this.state.mainData,
                                });
                              }
                            },
                          );
                        },
                      );
                    }
                  }}
                />
              )}
            <View
              style={{
                height: normalize(50),
                width: '100%',
                marginTop: 8,
                alignItems: 'center',
                justifyContent: 'center',
              }}>
              <Input
                autoCapitalize={'none'}
                inputContainerStyle={{
                  paddingLeft: 0,
                  borderWidth: 1,
                  borderRadius: 6,
                  borderColor: '#EDEDEF',
                  backgroundColor: '#EDEDEF',
                }}
                inputStyle={{
                  marginLeft: 6,
                  fontSize: 18,
                  paddingLeft: 0,
                  color: '#0C0C0C',
                  fontWeight: 'bold',
                  justifyContent: 'center',
                }}
                containerStyle={{
                  width: '92%',
                  paddingHorizontal: 0,
                }}
                autoCorrect={false}
                // keyboardType={'email-address'}
                // label={'Username'}
                labelStyle={{
                  color: '#002b36',
                  fontSize: 14,
                  marginBottom: 10,
                }}
                placeholderTextColor={'#4D4B4B'}
                placeholder={'Search'}
                value={this.state.searchKey}
                onChangeText={(text) => {
                  this.setState({searchKey: text}, () => {
                    if (this.state.searchKey == '') {
                      this.setState({
                        historyData: this.state.tempData,

                        searching: false,
                      });
                    } else {
                      let data = this.state.searchData.filter((value) => {
                        let searchTerm = '';
                        if (dataType == 'report') {
                          searchTerm = `${value.name} ${value.id} ${value.orderid} ${value.amount}  ${value.mobileno} ${value.billno} ${value.created_at}  ${value.amount} ${value.status}`;
                        } else if (dataType == 'mahagram') {
                          searchTerm = `${value.details.data.tid} ${value.details.data.mid} ${value.details.data.txnamount} ${value.details.data.date}  ${value.details.data.cardno} ${value.billno} ${value.credate}  ${value.amount} ${value.status}`;
                        } else if (dataType == 'icici') {
                          searchTerm = `${value.details.data.transAmount} ${value.details.data.bankRrn} ${value.details.data.cardNum} ${value.details.data.date}  ${value.details.data.cardno} ${value.billno} ${value.credate}  ${value.credate1} ${value.status}`;
                        } else if (dataType == 'water_authority') {
                          searchTerm = `${value.name} ${value.mobile} ${value.section} ${value.consumerid}  ${value.consumerno} ${value.billno} ${value.credate}  ${value.amount} ${value.status}`;
                        } else if (dataType == 'asianet') {
                          searchTerm = `${value.name} ${value.mobile} ${value.address} ${value.subscriberid} ${value.time} ${value.credate}  ${value.amount} ${value.status} ${value.type} `;
                        } else if (dataType == 'bsnl') {
                          searchTerm = `${value.name} ${value.mobile} ${value.landline_no} ${value.provider} ${value.account_no}  ${value.connection_type} ${value.credate}  ${value.amount} ${value.status}`;
                        } else if (dataType == 'kseb') {
                          searchTerm = `${value.name} ${value.mobile} ${value.place} ${value.consumerid} ${value.time} ${value.credate}  ${value.amount} ${value.status}`;
                        } else if (dataType == 'mobile') {
                          searchTerm = `${value.recharge_number} ${value.provider} ${value.service_type} ${value.credate} ${value.time} ${value.amount} ${value.recharge_status}`;
                        } else if (dataType == 'dth') {
                          searchTerm = `${value.recharge_number} ${value.provider} ${value.service_type} ${value.credate} ${value.time} ${value.amount} ${value.recharge_status}`;
                        } else if (dataType == 'transfer_beneficiary') {
                          searchTerm = `${value.bankaccountname} ${value.bankaccountno} ${value.credate} ${value.branch} ${value.branch} ${value.ifsc} ${value.purpose} ${value.status}  ${value.time}`;
                        } else if (dataType == 'wallet_request') {
                          searchTerm = `${value.type_of_deposit} ${value.reference} ${value.remarks} ${value.date_of_deposit} ${value.amount} ${value.branch} ${value.ifsc} ${value.purpose} ${value.status}  ${value.time}`;
                        } else if (dataType == 'settlement') {
                          searchTerm = `${value.credate} ${value.time} ${value.remarks} ${value.date_of_deposit} ${value.amount} ${value.branch} ${value.ifsc} ${value.purpose} ${value.status}`;
                        } else if (dataType == 'alltransaction' || dataType =='Agent Dashboard History') {
                          searchTerm = `${value.redumssion} ${value.paytype}  ${value.time} ${value.credate}  ${value.amount}`;
                        } else if (dataType == 'Vehicle Commission History') {
                          searchTerm = `${value.commission} ${value.company}  ${value.customer_name} ${value.credate} ${value.policy_no} ${value.status} ${value.totalpremium} ${value.trackid} ${value.vehicle_type} ${value.vehicleno} ${value.tp} ${value.od}`;
                        } else if (
                          dataType == 'Health Commission History' ||
                          dataType == 'Travel Commission History'
                        ) {
                          searchTerm = `${value.commission} ${value.company}  ${value.customer_name} ${value.credate} ${value.policy_no} ${value.status} ${value.amount} ${value.trackid} ${value.customer_number} ${value.vehicleno} ${value.tp} ${value.od}`;
                        } else if (dataType == 'Fastag Registration History') {
                          searchTerm = `${value.JoiningFee} ${value.address}  ${value.amount} ${value.credate} ${value.commercial_type} ${value.status} ${value.fasttag_no} ${value.mobile_no} ${value.name} ${value.paytmno} ${value.totalAmount} ${value.vehicle_class} ${value.vehicle_no}`;
                        } else if (dataType == 'Fastag Recharge History') {
                          searchTerm = `${value.address} ${value.amount}  ${value.fasttag_no} ${value.credate} ${value.mobile_no} ${value.status} ${value.name} ${value.vehicle_class} ${value.vehicle_no} ${value.vehicleno} ${value.tp} ${value.od}`;
                        } else if (
                          dataType == 'Fastag Recharge Icici History'
                        ) {
                          searchTerm = `${value.address} ${value.amount}  ${value.fasttag_no} ${value.credate} ${value.mobile_no} ${value.status} ${value.name} ${value.vehicle_class} ${value.vehicle_no} ${value.vehicleno} ${value.tp} ${value.od}`;
                        } else if (
                          dataType == 'TeacherInd Registration History'
                        ) {
                          searchTerm = `${value.address} ${value.course_institution}  ${value.course_name} ${value.credate} ${value.course_semester} ${value.status} ${value.course_tutionfor} ${value.district} ${value.email} ${value.mobile} ${value.name} ${value.taluk}`;
                        } else if (dataType == 'AEPS Transaction History') {
                          searchTerm = `${value.txnstatus} ${value.amount}  ${value.transactionId} ${value.credate} ${value.txntype} ${value.status} ${value.course_tutionfor} ${value.district} ${value.email} ${value.mobile} ${value.name} ${value.taluk}`;
                        }

                        let search = this.state.searchKey.toString();
                        if (search.length > 0) {
                          if (search.indexOf('.') == 0 && search.length < 3) {
                            if (
                              searchTerm
                                .toLocaleLowerCase()
                                .includes(search.trimEnd().toLocaleLowerCase())
                            ) {
                              return value;
                            }
                          } else {
                            if (
                              searchTerm
                                .toLocaleLowerCase()
                                .includes(search.toLocaleLowerCase())
                            ) {
                              return value;
                            }
                          }
                        } else {
                          return value;
                        }
                      });
                      if (
                        this.state.searchKey.length == 1 &&
                        this.state.searching == false
                      ) {
                        this.setState(
                          {
                            tempData: this.state.historyData,

                            searching: true,
                          },
                          () => {
                            this.setState({
                              historyData: data,
                            });
                          },
                        );
                      } else {
                        this.setState({
                          historyData: data,
                        });
                      }
                    }
                  });
                }}
                leftIcon={
                  <View
                    style={{
                      height: 30,
                      width: 30,
                      justifyContent: 'center',
                      alignItems: 'center',
                      paddingLeft: 3,
                    }}>
                    <Icon
                      name="search"
                      type={'Octicons'}
                      size={22}
                      color="#8a8a8f"
                    />
                  </View>
                }
                rightIcon={
                  <TouchableOpacity
                    disabled={!this.state.searching}
                    style={{
                      height: 30,
                      width: 30,
                      alignItems: 'center',
                      justifyContent: 'center',
                    }}
                    onPress={() => {
                      this.setState({searchKey: ''}, () => {
                        this.setState({
                          historyData: this.state.searchData,
                          searching: false,
                        });
                      });
                    }}>
                    <Icon
                      name={this.state.searching ? 'closecircle' : ''}
                      type={'antdesign'}
                      size={22}
                      color="#B8B8C0"
                      //color={"#004482ab"}
                    />
                  </TouchableOpacity>
                }
                leftIconContainerStyle={{marginLeft: 6}}
                rightIconContainerStyle={{marginRight: 6}}
              />
            </View>
            <View
              style={{
                marginTop: 10,
                flex: 1,
                width: '100%',
              }}>
              {this.state.historyData.length == 0 &&
                this.state.searching == false &&
                this.state.reportLoading == true && (
                  <WaveIndicator
                    size={150}
                    color={'#FF408160'}
                    animating={this.props.animating}
                    hidesWhenStopped={true}
                  />
                )}
              <FlatList
                onRefresh={() => {
                  // this.setState({ refreshingValue: true }, () => {
                  //   listBeneficiaryList_MoneyTransfer()
                  //     .then(result => {
                  //       this.setState({ refreshingValue: false });
                  //       if (
                  //         result.data.response &&
                  //         result.data.response.length > 0
                  //       ) {
                  //         this.setState({ userData: result.data.response });
                  //       } else {
                  //         this.setState({ userData: [] });
                  //       }
                  //     })
                  //     .catch(err => {
                  //       this.setState({ refreshingValue: false }, () => {});
                  //       console.log("Error", err.response);
                  //     });
                  // });
                }}
                keyboardShouldPersistTaps={'handled'}
                refreshing={this.state.refreshingValue}
                numColumns={1}
                showsVerticalScrollIndicator={false}
                contentContainerStyle={{
                  alignContent: 'center',
                  paddingLeft: '1%',
                  paddingBottom: '7%',
                }}
                data={
                  this.state.searchKey.length > 0
                    ? this.state.historyData
                    : this.state.fromDate == this.state.minimumDate &&
                      this.state.toDate == this.state.maximumDate &&
                      this.state.settingFilter == false &&
                      this.state.type == 'BOTH'
                    ? this.state.historyData
                    : this.state.filteredData
                }
                renderItem={({item, index, separators}) => (
                  <HistoryComponent data={item} type={dataType} />
                )}
                ListEmptyComponent={() => {
                  return (
                    <View
                      style={{
                        //  position: "relative",
                        paddingTop: 60,
                        justifyContent: 'center',
                        alignItems: 'center',
                      }}>
                      {!this.state.settingsLoading &&
                        !this.state.refreshing && (
                          <Text style={{fontSize: 17, color: '#A19D9D'}}>
                            {this.state.searching == true
                              ? 'Search list is empty'
                              : this.state.reportLoading == false
                              ? 'Report list is empty'
                              : ''}
                          </Text>
                        )}
                    </View>
                  );
                }}
              />
            </View>
            <Modal
              isVisible={this.state.modalOpen}
              onBackButtonPress={() => {
                this.setState(
                  {
                    modalOpen: !this.state.modalOpen,
                  },
                  () => {
                    this.setState({
                      fromDate: this.state.tempFromDate,
                      toDate: this.state.tempToDate,
                      type: this.state.tempType,
                      singleDateInModal: this.state.singleOption,
                      settingFilter: false,
                    });
                  },
                );
              }}
              animationIn="slideInUp"
              animationOut="slideOutDown"
              backdropOpacity={0.22}
              style={{
                alignItems: 'center',
              }}
              onBackdropPress={() => {
                this.setState(
                  {
                    modalOpen: !this.state.modalOpen,
                  },
                  () => {
                    this.setState({
                      fromDate: this.state.tempFromDate,
                      toDate: this.state.tempToDate,
                      type: this.state.tempType,
                      singleDateInModal: this.state.singleOption,
                      settingFilter: false,
                    });
                  },
                );
              }}>
              <View
                style={{
                  display: 'flex',
                  backgroundColor: '#fff',
                  //height: this.state.singleDateInModal ? 250 : 370,
                  width: 300,
                  borderRadius: 5,
                  padding: 5,
                }}>
                <View
                  style={{
                    // flex: 1,

                    justifyContent: 'flex-end',
                    marginTop: 5,
                    marginRight: -3,
                    flexDirection: 'row',
                  }}>
                  <TouchableOpacity
                    style={{
                      paddingVertical: 5,
                      width: '15%',
                      alignItems: 'center',
                      justifyContent: 'center',
                    }}
                    onPress={() => {
                      this.setState({
                        fromDate: this.state.minimumDate,
                        toDate: this.state.maximumDate,
                        searchData: this.state.mainData,
                        historyData: this.state.mainData,
                        type: 'BOTH',
                      });
                    }}>
                    <Icon
                      name={'refresh'}
                      type={'Octicons'}
                      size={22}
                      //color="#A19D9D"

                      color={'#111'}
                    />
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={{
                      paddingVertical: 5,
                      width: '15%',
                      alignItems: 'center',
                      justifyContent: 'center',
                    }}
                    onPress={() => {
                      this.setState(
                        {
                          modalOpen: !this.state.modalOpen,
                        },
                        () => {
                          this.setState({
                            fromDate: this.state.tempFromDate,
                            toDate: this.state.tempToDate,
                            type: this.state.tempType,
                            singleDateInModal: this.state.singleOption,
                            settingFilter: false,
                          });
                        },
                      );
                    }}>
                    <Icon
                      name={'close'}
                      type={'Octicons'}
                      size={22}
                      //color="#A19D9D"
                      color={'#111'}
                    />
                  </TouchableOpacity>
                </View>
                <View style={{paddingvertical: 5, alignItems: 'center'}}>
                  {/* <View
              style={{
                height: 80,
                width: "100%",
                alignItems: "flex-start",
                marginTop: 20
              }}
            >
              <ModalDropDownMenu
                initialValue={this.state.type}
                LabelpaddingBottom={10}
                list={["Both", "Mobile","Dth"]}
                label={"Type"}
                value={this.state.type}
                dropDownLayoutHeight={50}
                dropDownLayoutWidth={250}
                showLabel={true}
                labelStyle={{
                  color: "#002b36",
                  fontSize: 18,
                  marginBottom: 10,
                  alignSelf: "center",
                  marginRight: 10
                }}
                // paddingLeft={-5}
                //dropDownWidth={'95%'}
                optionalColor={"black"}
                editable={true}
                textColor={"#4D4B4B"}
                onSelectAnOption={index => {
                  if (index == 0) {
                    this.setState({ type: "BOTH" });
                  } else if (index == 1) {
                    this.setState({ type: "MOBILE" });
                  }else if (index == 2) {
                    this.setState({ type: "DTH" });
                  }
                }}
              />
            </View> */}

                  {this.state.singleDateInModal == true && (
                    <Input
                      editable={false}
                      autoCapitalize={'none'}
                      inputContainerStyle={{
                        paddingLeft: 12,
                        paddingRight: 10,
                        borderWidth: 1,
                        borderRadius: 3,
                        borderColor: '#c0c0c8',
                        marginLeft: 1,
                      }}
                      containerStyle={{
                        width: '95%',
                        paddingHorizontal: 0,
                        marginTop: 20,
                      }}
                      inputStyle={{fontSize: 18, fontWeight: 'bold'}}
                      autoCorrect={false}
                      // keyboardType={'email-address'}
                      label={'Date'}
                      labelStyle={{
                        color: '#002b36',
                        fontSize: 18,
                        marginBottom: 10,
                        alignSelf: 'center',
                        marginRight: 10,
                      }}
                      placeholderTextColor={'grey'}
                      placeholder={'Enter date'}
                      value={this.state.toDate}
                      rightIcon={
                        <Icon
                          color="#444"
                          size={22}
                          type="entypo"
                          underlayColor="rgba(255,255,255,0)"
                          name={'calendar'}
                          //name={'eye'}
                          onPress={() =>
                            this.setState({
                              singleDatePicker: !this.state.singleDatePicker,
                            })
                          }
                        />
                      }
                      //onChangeText={text => this.setState({ DateofPayment: text })}
                    />
                  )}

                  {this.state.singleDatePicker && (
                    <DatePicker
                      style={{backgroundColor: '#fff', width: '100%'}}
                      mode="date"
                      format="DD-MM-YYYY"
                      minimumDate={
                        new Date(
                          parseInt(this.state.minimumDate.split('-')[2]),
                          parseInt(this.state.minimumDate.split('-')[1]) - 1,
                          parseInt(this.state.minimumDate.split('-')[0]),
                        )
                      }
                      maximumDate={
                        new Date(
                          parseInt(this.state.maximumDate.split('-')[2]),
                          parseInt(this.state.maximumDate.split('-')[1]) - 1,
                          parseInt(this.state.maximumDate.split('-')[0]),
                        )
                      }
                      date={this.state.fromDate}
                      value={
                        new Date(
                          parseInt(this.state.fromDate.split('-')[2]),
                          parseInt(this.state.fromDate.split('-')[1]) - 1,
                          parseInt(this.state.fromDate.split('-')[0]),
                        )
                      }
                      confirmBtnText={'Confirm'}
                      cancelBtnText={'Cancel'}
                      showIcon={false}
                      onChange={(event, date) => {
                        this.setState(
                          {
                            fromDate: moment(date).format('DD-MM-YYYY'),
                            toDate: moment(date).format('DD-MM-YYYY'),
                            singleDatePicker: false,
                          },
                          () => {
                            console.log(
                              this.state.fromDate,
                              this.state.toDate,
                              'wtf',
                            );
                          },
                        );
                      }}
                      customStyles={{
                        dateInput: {
                          borderWidth: 0,
                          alignItems: 'flex-start',
                          //marginLeft: 10,
                        },
                        dateText: {
                          color: '#000',
                          fontSize: 18,
                        },
                        disabled: {
                          backgroundColor: '#ffff',
                        },
                      }}
                    />
                  )}
                  {this.state.singleDateInModal == false && (
                    <Input
                      editable={false}
                      autoCapitalize={'none'}
                      inputContainerStyle={{
                        paddingLeft: 12,
                        paddingRight: 10,
                        borderWidth: 1,
                        borderRadius: 3,
                        borderColor: '#c0c0c8',
                        marginLeft: 1,
                      }}
                      containerStyle={{
                        width: '95%',
                        paddingHorizontal: 0,
                        marginTop: 20,
                      }}
                      inputStyle={{fontSize: 18, fontWeight: 'bold'}}
                      autoCorrect={false}
                      // keyboardType={'email-address'}
                      label={'From Date'}
                      labelStyle={{
                        color: '#002b36',
                        fontSize: 18,
                        marginBottom: 10,
                        alignSelf: 'center',
                        marginRight: 10,
                      }}
                      placeholderTextColor={'grey'}
                      placeholder={'Enter from date'}
                      value={this.state.fromDate}
                      rightIcon={
                        <Icon
                          color="#444"
                          size={22}
                          type="entypo"
                          underlayColor="rgba(255,255,255,0)"
                          name={'calendar'}
                          //name={'eye'}
                          onPress={() =>
                            this.setState({
                              fromDatePicker: !this.state.fromDatePicker,
                            })
                          }
                        />
                      }
                      //onChangeText={text => this.setState({ DateofPayment: text })}
                    />
                  )}
                  {this.state.fromDatePicker && (
                    <DatePicker
                      style={{backgroundColor: '#fff', width: '100%'}}
                      mode="date"
                      format="DD-MM-YYYY"
                      minimumDate={
                        new Date(
                          parseInt(this.state.minimumDate.split('-')[2]),
                          parseInt(this.state.minimumDate.split('-')[1]) - 1,
                          parseInt(this.state.minimumDate.split('-')[0]),
                        )
                      }
                      maximumDate={
                        new Date(
                          parseInt(this.state.maximumDate.split('-')[2]),
                          parseInt(this.state.maximumDate.split('-')[1]) - 1,
                          parseInt(this.state.maximumDate.split('-')[0]),
                        )
                      }
                      date={this.state.fromDate}
                      value={
                        new Date(
                          parseInt(this.state.fromDate.split('-')[2]),
                          parseInt(this.state.fromDate.split('-')[1]) - 1,
                          parseInt(this.state.fromDate.split('-')[0]),
                        )
                      }
                      confirmBtnText={'Confirm'}
                      cancelBtnText={'Cancel'}
                      showIcon={false}
                      onChange={(event, date) => {
                        this.setState(
                          {
                            fromDate: moment(date).format('DD-MM-YYYY'),

                            fromDatePicker: false,
                          },
                          () => {},
                        );
                      }}
                      customStyles={{
                        dateInput: {
                          borderWidth: 0,
                          alignItems: 'flex-start',
                          //marginLeft: 10,
                        },
                        dateText: {
                          color: '#000',
                          fontSize: 18,
                        },
                        disabled: {
                          backgroundColor: '#ffff',
                        },
                      }}
                    />
                  )}
                  {this.state.singleDateInModal == false && (
                    <Input
                      editable={false}
                      autoCapitalize={'none'}
                      inputContainerStyle={{
                        paddingLeft: 12,
                        paddingRight: 10,
                        borderWidth: 1,
                        borderRadius: 3,
                        borderColor: '#c0c0c8',
                        marginLeft: 1,
                      }}
                      containerStyle={{
                        width: '95%',
                        paddingHorizontal: 0,
                        marginTop: 20,
                      }}
                      inputStyle={{fontSize: 18, fontWeight: 'bold'}}
                      autoCorrect={false}
                      // keyboardType={'email-address'}
                      label={'To Date'}
                      labelStyle={{
                        color: '#002b36',
                        fontSize: 18,
                        marginBottom: 10,
                        alignSelf: 'center',
                        marginRight: 10,
                      }}
                      placeholderTextColor={'grey'}
                      placeholder={'Enter to date'}
                      value={this.state.toDate}
                      rightIcon={
                        <Icon
                          color="#444"
                          size={22}
                          type="entypo"
                          underlayColor="rgba(255,255,255,0)"
                          name={'calendar'}
                          //name={'eye'}
                          onPress={() =>
                            this.setState({
                              toDatePicker: !this.state.toDatePicker,
                            })
                          }
                        />
                      }
                      //onChangeText={text => this.setState({ DateofPayment: text })}
                    />
                  )}
                  {this.state.toDatePicker && (
                    <DatePicker
                      style={{backgroundColor: '#fff', width: '100%'}}
                      mode="date"
                      format="DD-MM-YYYY"
                      minimumDate={
                        new Date(
                          parseInt(this.state.minimumDate.split('-')[2]),
                          parseInt(this.state.minimumDate.split('-')[1]) - 1,
                          parseInt(this.state.minimumDate.split('-')[0]),
                        )
                      }
                      maximumDate={
                        new Date(
                          parseInt(this.state.maximumDate.split('-')[2]),
                          parseInt(this.state.maximumDate.split('-')[1]) - 1,
                          parseInt(this.state.maximumDate.split('-')[0]),
                        )
                      }
                      date={this.state.toDate}
                      value={
                        new Date(
                          parseInt(this.state.toDate.split('-')[2]),
                          parseInt(this.state.toDate.split('-')[1]) - 1,
                          parseInt(this.state.toDate.split('-')[0]),
                        )
                      }
                      confirmBtnText={'Confirm'}
                      cancelBtnText={'Cancel'}
                      showIcon={false}
                      onChange={(event, date) => {
                        this.setState({
                          toDate: moment(date).format('DD-MM-YYYY'),

                          toDatePicker: false,
                        });
                      }}
                      customStyles={{
                        dateInput: {
                          borderWidth: 0,
                          alignItems: 'flex-start',
                          //marginLeft: 10,
                        },
                        dateText: {
                          color: '#000',
                          fontSize: 18,
                        },
                        disabled: {
                          backgroundColor: '#ffff',
                        },
                      }}
                    />
                  )}
                </View>
                <View style={{}}>
                  <CheckBox
                    // checkedIcon={<Image source={require("../checked.png")} />}
                    //uncheckedIcon={<Image source={require("../unchecked.png")} />}
                    containerStyle={{
                      borderWidth: 0,
                      backgroundColor: '#fff',
                      paddingVertical: 5,
                    }}
                    title={'Single Date'}
                    textStyle={{marginBottom: 3}}
                    checked={this.state.singleDateInModal}
                    onPress={() => {
                      if (this.state.minimumDate != this.state.maximumDate) {
                        if (
                          this.state.singleOption == true &&
                          this.state.singleDateInModal == false
                        ) {
                          this.setState({
                            fromDate: this.state.singleOption_tempSingleDate,
                            toDate: this.state.singleOption_tempSingleDate,
                            singleDateInModal: !this.state.singleDateInModal,
                          });
                        } else if (
                          this.state.singleOption == true &&
                          this.state.singleDateInModal == true
                        ) {
                          this.setState({
                            fromDate: this.state.minimumDate,
                            toDate: this.state.maximumDate,
                            singleDateInModal: !this.state.singleDateInModal,
                          });
                        }

                        if (
                          this.state.singleOption == false &&
                          this.state.singleDateInModal == true
                        ) {
                          this.setState({
                            fromDate: this.state.singleOption_tempFromDate,
                            toDate: this.state.singleOption_tempTODate,
                            singleDateInModal: !this.state.singleDateInModal,
                          });
                        } else if (
                          this.state.singleOption == false &&
                          this.state.singleDateInModal == false
                        ) {
                          this.setState({
                            fromDate: this.state.minimumDate,
                            toDate: this.state.maximumDate,
                            singleDateInModal: !this.state.singleDateInModal,
                          });
                        }

                        this.setState({
                          singleDateInModal: !this.state.singleDateInModal,
                        });
                      }
                    }}
                  />
                </View>
                <View
                  style={{
                    paddingVertical: 10,
                    alignItems: 'center',
                    justifyContent: 'flex-end',
                    // backgroundColor: "#004482fa",
                    backgroundColor: '#fff',
                    borderBottomLeftRadius: 5,
                    borderBottomRightRadius: 5,
                    overflow: 'hidden',
                  }}>
                  <TouchableOpacity
                    style={{
                      height: 50,
                      width: '90%',
                      backgroundColor: '#0086B6',
                      justifyContent: 'center',
                      alignItems: 'center',
                      borderRadius: 5,
                    }}
                    onPress={() => {
                      if (this.state.singleDateInModal == true) {
                        this.setState({fromDate: this.state.toDate}, () => {
                          let compare_fromDate = moment(
                            this.state.fromDate,
                            'DD-MM-YYYY',
                          ).toDate();
                          let compare_toDate = moment(
                            this.state.toDate,
                            'DD-MM-YYYY',
                          ).toDate();
                          console.log(
                            compare_fromDate,
                            compare_toDate,
                            compare_toDate == compare_fromDate,
                            'same date',
                          );
                          if (compare_fromDate <= compare_toDate) {
                            let filteredData = [];
                            if (compare_fromDate == compare_toDate) {
                              this.state.mainData.map((value) => {
                                let dateJsonType = value.credate;
                                let dateJsonTypeformat = 'DD-MM-YYYY';
                                if (dataType == 'wallet_request') {
                                  dateJsonType = value.date_of_deposit;
                                } else if (dataType == 'report') {
                                  dateJsonType = value.paiddate;
                                  dateJsonTypeformat = 'YYYY-MM-DD';
                                }

                                let item_Date = moment(
                                  dateJsonType,
                                  dateJsonTypeformat,
                                ).toDate();
                                if (item_Date == compare_fromDate) {
                                  filteredData.push(value);
                                }
                              });
                            } else {
                              this.state.mainData.map((value) => {
                                let dateJsonType = value.credate;
                                let dateJsonTypeformat = 'DD-MM-YYYY';
                                if (dataType == 'wallet_request') {
                                  dateJsonType = value.date_of_deposit;
                                } else if (dataType == 'report') {
                                  dateJsonType = value.paiddate;
                                  dateJsonTypeformat = 'YYYY-MM-DD';
                                }
                                let item_Date = moment(
                                  dateJsonType,
                                  dateJsonTypeformat,
                                ).toDate();
                                if (
                                  item_Date >= compare_fromDate &&
                                  item_Date <= compare_toDate
                                ) {
                                  filteredData.push(value);
                                }
                              });
                            }

                            this.setState({
                              searchData: filteredData,
                              filteredData,
                              modalOpen: !this.state.modalOpen,
                              settingFilter: false,
                            });
                          } else {
                            this.generalAwesomeAlertMessage(
                              'From Date cannot exceed To Date',
                            );
                          }
                        });
                      } else {
                        let compare_fromDate = moment(
                          this.state.fromDate,
                          'DD-MM-YYYY',
                        ).toDate();
                        let compare_toDate = moment(
                          this.state.toDate,
                          'DD-MM-YYYY',
                        ).toDate();
                        console.log(
                          compare_fromDate,
                          compare_toDate,
                          compare_toDate == compare_fromDate,
                          'same date',
                        );
                        if (compare_fromDate <= compare_toDate) {
                          let filteredData = [];
                          if (compare_fromDate == compare_toDate) {
                            this.state.mainData.map((value) => {
                              let dateJsonType = value.credate;
                              let dateJsonTypeformat = 'DD-MM-YYYY';
                              if (dataType == 'wallet_request') {
                                dateJsonType = value.date_of_deposit;
                              } else if (dataType == 'report') {
                                dateJsonType = value.paiddate;
                                dateJsonTypeformat = 'YYYY-MM-DD';
                              }
                              let item_Date = moment(
                                dateJsonType,
                                dateJsonTypeformat,
                              ).toDate();
                              if (item_Date == compare_fromDate) {
                                filteredData.push(value);
                              }
                            });
                          } else {
                            this.state.mainData.map((value) => {
                              let dateJsonType = value.credate;
                              let dateJsonTypeformat = 'DD-MM-YYYY';
                              if (dataType == 'wallet_request') {
                                dateJsonType = value.date_of_deposit;
                              } else if (dataType == 'report') {
                                dateJsonType = value.paiddate;
                                dateJsonTypeformat = 'YYYY-MM-DD';
                              }
                              let item_Date = moment(
                                dateJsonType,
                                dateJsonTypeformat,
                              ).toDate();
                              if (
                                item_Date >= compare_fromDate &&
                                item_Date <= compare_toDate
                              ) {
                                filteredData.push(value);
                              }
                            });
                          }

                          this.setState({
                            searchData: filteredData,
                            filteredData,
                            modalOpen: !this.state.modalOpen,
                            settingFilter: false,
                          });
                        } else {
                          this.generalAwesomeAlertMessage(
                            'From Date cannot exceed To Date',
                          );
                        }
                      }
                    }}>
                    <Text
                      style={{
                        fontSize: 18,
                        color: '#fff',
                        fontWeight: 'bold',
                      }}>
                      Submit
                    </Text>
                  </TouchableOpacity>
                </View>
              </View>
            </Modal>

            {/* </ScrollView> */}
          </View>
        </View>
      </View>
    );
  }

  getAllHistory(dataType) {
    return (
      <View style={{flex: 1, width: '100%'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#fff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          {this.state.previousDepth !== 3 && (
            <View
              style={{
                flex: 1,
                justifyContent: 'center',
                alignItems: 'center',
              }}>
              <Icon
                size={30}
                name={
                  this.state.previousDepth == 3 ? 'checkcircle' : 'arrowleft'
                }
                type={'antdesign'}
                color={'#00000090'}
                underlayColor="rgba(255,255,255,0)"
                onPress={() => {
                  this.handleBackButtonClick();
                }}
              />
            </View>
          )}
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 20, color: '#00000090'}}>
              {dataType !== ''
                ? dataType == 'mahagram'
                  ? 'Transaction History'
                  : dataType == 'kseb'
                  ? 'KSEB Payment History'
                  : dataType == 'water_authority'
                  ? 'Water Authority Payment History'
                  : dataType == 'bsnl'
                  ? 'BSNL Payment History'
                  : dataType == 'asianet'
                  ? 'Asianet Payment History'
                  : dataType == 'mobile'
                  ? 'Mobile Recharge History'
                  : dataType == 'dth'
                  ? 'Dth Recharge History'
                  : dataType == 'settlement'
                  ? 'Settlement History'
                  : dataType == 'transfer_beneficiary'
                  ? 'Money Transfer History'
                  : dataType == 'alltransaction'
                  ? 'All Transactions'
                  : dataType == 'wallet_request'
                  ? 'Wallet Request History'
                  : 'Withdrawal Reports'
                : 'History Details'}
            </Text>
          </View>

          <View style={{flex: 2}} />
          {dataType == 'alltransaction' && (
            <View
              style={{
                flex: 1,
                justifyContent: 'center',
                alignItems: 'center',
              }}>
              <Icon
                size={24}
                name={'settings'}
                type={'feather'}
                color={'#00000090'}
                underlayColor="rgba(255,255,255,0)"
                onPress={() => {
                  if (
                    this.state.allhistory_minimumDate !== '' &&
                    this.state.allhistory_maximumDate !== ''
                  ) {
                    this.setState(
                      {
                        allhistory_pdf_minimumDate: this.state
                          .allhistory_minimumDate,
                        allhistory_pdf_maximumDate: this.state
                          .allhistory_maximumDate,

                        allhistory_pdf_fromDate: this.state
                          .allhistory_minimumDate,
                        allhistory_pdf_toDate: this.state
                          .allhistory_maximumDate,
                        allhistory_pdf_tempFromDate: this.state
                          .allhistory_minimumDate,
                        allhistory_pdf_tempToDate: this.state
                          .allhistory_maximumDate,
                        allhistory_pdf_tempType: this.state.allhistory_pdf_type,
                        allhistory_pdf_singleOption: this.state
                          .allhistory_pdf_singleDate_default,
                        allhistory_pdf_singleDateInModal: this.state
                          .allhistory_pdf_singleDate_default,
                      },
                      () => {
                        if (this.state.allhistory_pdf_singleOption == true) {
                          this.setState({
                            allhistory_pdf_singleOption_tempSingleDate: this
                              .state.allhistory_pdf_toDate,
                          });
                        } else {
                          this.setState({
                            allhistory_pdf_singleOption_tempFromDate: this.state
                              .allhistory_pdf_fromDate,
                            allhistory_pdf_singleOption_tempTODate: this.state
                              .allhistory_pdf_toDate,
                          });
                        }
                        this.setState(
                          {
                            allhistory_pdf_modalOpen: true,
                            allhistory_pdf_settingFilter: true,
                          },
                          () => {
                            if (
                              this.state.allhistory_pdf_fromDate ==
                                this.state.allhistory_pdf_minimumDate &&
                              this.state.allhistory_pdf_toDate ==
                                this.state.allhistory_pdf_maximumDate
                            ) {
                              this.setState({
                                allhistory_pdf_filteredData: this.state
                                  .allhistory_pdf_mainData,
                              });
                            }
                          },
                        );
                      },
                    );
                  }
                }}
              />
            </View>
          )}
          {this.state.previousDepth == 3 && (
            <View
              style={{
                flex: 1,
                justifyContent: 'center',
                alignItems: 'center',
              }}>
              <Icon
                size={32}
                name={
                  this.state.previousDepth == 3 ? 'checkcircle' : 'arrowleft'
                }
                type={'antdesign'}
                color={'#00000090'}
                underlayColor="rgba(255,255,255,0)"
                onPress={() => {
                  if (this.state.pageDepth == 4) {
                    this.setState(
                      {
                        changingPage: true,
                        settingsLoading: true,
                        allhistory_reportLoading: true,
                      },
                      () => {
                        setTimeout(() => {
                          this.setState(
                            {
                              pageDepth: 0,
                              previousDepth: 0,
                              settingsLoading: false,
                              changingPage: false,
                            },
                            () => {},
                          );
                        }, 100);
                      },
                    );
                  } else {
                    this.setState(
                      {
                        changingPage: true,
                        settingsLoading: true,
                        allhistory_reportLoading: true,
                      },
                      () => {
                        setTimeout(() => {
                          this.setState(
                            {
                              pageDepth: 0,
                              settingsLoading: false,
                              changingPage: false,
                            },
                            () => {},
                          );
                        }, 100);
                      },
                    );
                  }
                }}
              />
            </View>
          )}
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
            paddingTop: 20,
          }}>
          <View style={{width: '100%', flex: 1}}>
            {this.state.allhistory_fromDate !== '' &&
              this.state.allhistory_toDate !== '' &&
              !this.state.keyboardOpen &&
              this.state.allhistory_searchKey.length < 1 && (
                <PlusButton
                  disabled={
                    this.state.allhistory_fromDate == '' &&
                    this.state.allhistory_toDate == ''
                  }
                  iconName={'sliders'}
                  iconType={'font-awesome'}
                  iconColor={'#fff'}
                  backgroundColor={'#2C4259'}
                  onPress={() => {
                    if (
                      this.state.allhistory_fromDate !== '' &&
                      this.state.allhistory_toDate !== ''
                    ) {
                      this.setState(
                        {
                          allhistory_tempFromDate: this.state
                            .allhistory_fromDate,
                          allhistory_tempToDate: this.state.allhistory_toDate,
                          allhistory_tempType: this.state.allhistory_type,
                          allhistory_singleOption: this.state
                            .allhistory_singleDateInModal,
                        },
                        () => {
                          if (this.state.allhistory_singleOption == true) {
                            this.setState({
                              allhistory_singleOption_tempSingleDate: this.state
                                .allhistory_toDate,
                            });
                          } else {
                            this.setState({
                              allhistory_singleOption_tempFromDate: this.state
                                .allhistory_fromDate,
                              allhistory_singleOption_tempTODate: this.state
                                .allhistory_toDate,
                            });
                          }
                          this.setState(
                            {
                              allhistory_modalOpen: true,
                              allhistory_settingFilter: true,
                            },
                            () => {
                              if (
                                this.state.allhistory_fromDate ==
                                  this.state.allhistory_minimumDate &&
                                this.state.allhistory_toDate ==
                                  this.state.allhistory_maximumDate
                              ) {
                                this.setState({
                                  allhistory_filteredData: this.state
                                    .allhistory_mainData,
                                });
                              }
                            },
                          );
                        },
                      );
                    }
                  }}
                />
              )}
            <View
              style={{
                height: normalize(50),
                width: '100%',
                marginTop: 8,
                alignItems: 'center',
                justifyContent: 'center',
              }}>
              <Input
                autoCapitalize={'none'}
                inputContainerStyle={{
                  paddingLeft: 0,
                  borderWidth: 1,
                  borderRadius: 6,
                  borderColor: '#EDEDEF',
                  backgroundColor: '#EDEDEF',
                }}
                inputStyle={{
                  marginLeft: 6,
                  fontSize: 18,
                  paddingLeft: 0,
                  color: '#0C0C0C',
                  fontWeight: 'bold',
                  justifyContent: 'center',
                }}
                containerStyle={{
                  width: '92%',
                  paddingHorizontal: 0,
                }}
                autoCorrect={false}
                // keyboardType={'email-address'}
                // label={'Username'}
                labelStyle={{
                  color: '#002b36',
                  fontSize: 14,
                  marginBottom: 10,
                }}
                placeholderTextColor={'#4D4B4B'}
                placeholder={'Search'}
                value={this.state.allhistory_searchKey}
                onChangeText={(text) => {
                  this.setState({allhistory_searchKey: text}, () => {
                    if (this.state.allhistory_searchKey == '') {
                      this.setState({
                        allhistory_historyData: this.state.allhistory_tempData,

                        allhistory_searching: false,
                      });
                    } else {
                      let data = this.state.allhistory_searchData.filter(
                        (value) => {
                          let searchTerm = '';
                          if (dataType == 'report') {
                            searchTerm = `${value.name} ${value.id} ${value.orderid} ${value.amount}  ${value.mobileno} ${value.billno} ${value.created_at}  ${value.amount} ${value.status}`;
                          } else if (dataType == 'mahagram') {
                            searchTerm = `${value.details.data.tid} ${value.details.data.mid} ${value.details.data.txnamount} ${value.details.data.date}  ${value.details.data.cardno} ${value.billno} ${value.credate}  ${value.amount} ${value.status}`;
                          } else if (dataType == 'water_authority') {
                            searchTerm = `${value.name} ${value.mobile} ${value.section} ${value.consumerid}  ${value.consumerno} ${value.billno} ${value.credate}  ${value.amount} ${value.status}`;
                          } else if (dataType == 'asianet') {
                            searchTerm = `${value.name} ${value.mobile} ${value.address} ${value.subscriberid} ${value.time} ${value.credate}  ${value.amount} ${value.status} ${value.type} `;
                          } else if (dataType == 'bsnl') {
                            searchTerm = `${value.name} ${value.mobile} ${value.landline_no} ${value.provider} ${value.account_no}  ${value.connection_type} ${value.credate}  ${value.amount} ${value.status}`;
                          } else if (dataType == 'kseb') {
                            searchTerm = `${value.name} ${value.mobile} ${value.place} ${value.consumerid} ${value.time} ${value.credate}  ${value.amount} ${value.status}`;
                          } else if (dataType == 'mobile') {
                            searchTerm = `${value.recharge_number} ${value.provider} ${value.service_type} ${value.credate} ${value.time} ${value.amount} ${value.recharge_status}`;
                          } else if (dataType == 'dth') {
                            searchTerm = `${value.recharge_number} ${value.provider} ${value.service_type} ${value.credate} ${value.time} ${value.amount} ${value.recharge_status}`;
                          } else if (dataType == 'transfer_beneficiary') {
                            searchTerm = `${value.bankaccountname} ${value.bankaccountno} ${value.credate} ${value.branch} ${value.branch} ${value.ifsc} ${value.purpose} ${value.status}  ${value.time}`;
                          } else if (dataType == 'wallet_request') {
                            searchTerm = `${value.type_of_deposit} ${value.reference} ${value.remarks} ${value.date_of_deposit} ${value.amount} ${value.branch} ${value.ifsc} ${value.purpose} ${value.status}  ${value.time}`;
                          } else if (dataType == 'settlement') {
                            searchTerm = `${value.credate} ${value.time} ${value.remarks} ${value.date_of_deposit} ${value.amount} ${value.branch} ${value.ifsc} ${value.purpose} ${value.status}`;
                          } else if (dataType == 'alltransaction') {
                            searchTerm = `${value.redumssion} ${value.paytype}  ${value.time} ${value.credate}  ${value.amount}`;
                          }

                          let search = this.state.allhistory_searchKey;
                          if (search && search.length >= 1) {
                            if (
                              searchTerm
                                .toLocaleLowerCase()
                                .includes(search.toLocaleLowerCase())
                            ) {
                              return value;
                            }
                          } else {
                            return value;
                          }
                        },
                      );
                      if (
                        this.state.allhistory_searchKey.length == 1 &&
                        this.state.allhistory_searching == false
                      ) {
                        this.setState(
                          {
                            allhistory_tempData: this.state
                              .allhistory_historyData,

                            allhistory_searching: true,
                          },
                          () => {
                            this.setState({
                              allhistory_historyData: data,
                            });
                          },
                        );
                      } else {
                        this.setState({
                          allhistory_historyData: data,
                        });
                      }
                    }
                  });
                }}
                leftIcon={
                  <View
                    style={{
                      height: 30,
                      width: 30,
                      justifyContent: 'center',
                      alignItems: 'center',
                      paddingLeft: 3,
                    }}>
                    <Icon
                      name="search"
                      type={'Octicons'}
                      size={22}
                      color="#8a8a8f"
                    />
                  </View>
                }
                rightIcon={
                  <TouchableOpacity
                    disabled={!this.state.allhistory_searching}
                    style={{
                      height: 30,
                      width: 30,
                      alignItems: 'center',
                      justifyContent: 'center',
                    }}
                    onPress={() => {
                      this.setState({allhistory_searchKey: ''}, () => {
                        this.setState({
                          allhistory_historyData: this.state
                            .allhistory_searchData,
                          allhistory_searching: false,
                        });
                      });
                    }}>
                    <Icon
                      name={
                        this.state.allhistory_searching ? 'closecircle' : ''
                      }
                      type={'antdesign'}
                      size={22}
                      color="#B8B8C0"
                      //color={"#004482ab"}
                    />
                  </TouchableOpacity>
                }
                leftIconContainerStyle={{marginLeft: 6}}
                rightIconContainerStyle={{marginRight: 6}}
              />
            </View>
            <View
              style={{
                marginTop: 10,
                flex: 1,
                width: '100%',
              }}>
              {this.state.allhistory_historyData.length == 0 &&
                this.state.allhistory_searching == false &&
                this.state.allhistory_reportLoading == true && (
                  <WaveIndicator
                    size={150}
                    color={'#FF408160'}
                    animating={this.props.animating}
                    hidesWhenStopped={true}
                  />
                )}
              <FlatList
                onRefresh={() => {
                  // this.setState({ refreshingValue: true }, () => {
                  //   listBeneficiaryList_MoneyTransfer()
                  //     .then(result => {
                  //       this.setState({ refreshingValue: false });
                  //       if (
                  //         result.data.response &&
                  //         result.data.response.length > 0
                  //       ) {
                  //         this.setState({ userData: result.data.response });
                  //       } else {
                  //         this.setState({ userData: [] });
                  //       }
                  //     })
                  //     .catch(err => {
                  //       this.setState({ refreshingValue: false }, () => {});
                  //       console.log("Error", err.response);
                  //     });
                  // });
                }}
                keyboardShouldPersistTaps={'handled'}
                refreshing={this.state.allhistory_refreshingValue}
                numColumns={1}
                showsVerticalScrollIndicator={false}
                contentContainerStyle={{
                  alignContent: 'center',
                  paddingLeft: '1%',
                  paddingBottom: '7%',
                }}
                data={
                  this.state.allhistory_searchKey.length > 0
                    ? this.state.allhistory_historyData
                    : this.state.allhistory_fromDate ==
                        this.state.allhistory_minimumDate &&
                      this.state.allhistory_toDate ==
                        this.state.allhistory_maximumDate &&
                      this.state.allhistory_settingFilter == false &&
                      this.state.allhistory_type == 'BOTH'
                    ? this.state.allhistory_historyData
                    : this.state.allhistory_filteredData
                }
                renderItem={({item, index, separators}) => (
                  <HistoryComponent data={item} type={dataType} />
                )}
                ListEmptyComponent={() => {
                  return (
                    <View
                      style={{
                        //  position: "relative",
                        paddingTop: 60,
                        justifyContent: 'center',
                        alignItems: 'center',
                      }}>
                      {!this.state.settingsLoading &&
                        !this.state.allhistory_refreshing && (
                          <Text style={{fontSize: 17, color: '#A19D9D'}}>
                            {this.state.allhistory_searching == true
                              ? 'Search list is empty'
                              : this.state.allhistory_reportLoading == false
                              ? 'Report list is empty'
                              : ''}
                          </Text>
                        )}
                    </View>
                  );
                }}
              />
            </View>
            <Modal
              isVisible={this.state.allhistory_modalOpen}
              onBackButtonPress={() => {
                this.setState(
                  {
                    allhistory_modalOpen: !this.state.allhistory_modalOpen,
                  },
                  () => {
                    this.setState({
                      allhistory_fromDate: this.state.allhistory_tempFromDate,
                      allhistory_toDate: this.state.allhistory_tempToDate,
                      allhistory_type: this.state.allhistory_tempType,
                      allhistory_singleDateInModal: this.state
                        .allhistory_singleOption,
                      allhistory_settingFilter: false,
                    });
                  },
                );
              }}
              animationIn="slideInUp"
              animationOut="slideOutDown"
              backdropOpacity={0.22}
              style={{
                alignItems: 'center',
              }}
              onBackdropPress={() => {
                this.setState(
                  {
                    allhistory_modalOpen: !this.state.allhistory_modalOpen,
                  },
                  () => {
                    this.setState({
                      allhistory_fromDate: this.state.allhistory_tempFromDate,
                      allhistory_toDate: this.state.allhistory_tempToDate,
                      allhistory_type: this.state.allhistory_tempType,
                      allhistory_singleDateInModal: this.state
                        .allhistory_singleOption,
                      allhistory_settingFilter: false,
                    });
                  },
                );
              }}>
              <View
                style={{
                  display: 'flex',
                  backgroundColor: '#fff',
                  //height: this.state.allhistory_singleDateInModal ? 250 : 370,
                  width: 300,
                  borderRadius: 5,
                  padding: 5,
                }}>
                <View
                  style={{
                    paddingVerical: 5,
                    justifyContent: 'flex-end',
                    marginTop: 5,
                    marginRight: -3,
                    flexDirection: 'row',
                  }}>
                  <TouchableOpacity
                    style={{
                      width: '15%',
                      alignItems: 'center',
                      justifyContent: 'center',
                    }}
                    onPress={() => {
                      this.setState({
                        allhistory_fromDate: this.state.allhistory_minimumDate,
                        allhistory_toDate: this.state.allhistory_maximumDate,
                        allhistory_searchData: this.state.allhistory_mainData,
                        allhistory_historyData: this.state.allhistory_mainData,
                        allhistory_type: 'BOTH',
                      });
                    }}>
                    <Icon
                      name={'refresh'}
                      type={'Octicons'}
                      size={22}
                      //color="#A19D9D"

                      color={'#111'}
                    />
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={{
                      width: '15%',
                      alignItems: 'center',
                      justifyContent: 'center',
                    }}
                    onPress={() => {
                      this.setState(
                        {
                          allhistory_modalOpen: !this.state
                            .allhistory_modalOpen,
                        },
                        () => {
                          this.setState({
                            allhistory_fromDate: this.state
                              .allhistory_tempFromDate,
                            allhistory_toDate: this.state.allhistory_tempToDate,
                            allhistory_type: this.state.allhistory_tempType,
                            allhistory_singleDateInModal: this.state
                              .allhistory_singleOption,
                            allhistory_settingFilter: false,
                          });
                        },
                      );
                    }}>
                    <Icon
                      name={'close'}
                      type={'Octicons'}
                      size={22}
                      //color="#A19D9D"
                      color={'#111'}
                    />
                  </TouchableOpacity>
                </View>
                <View
                  style={{
                    paddingVerical: 5,
                    alignItems: 'center',
                  }}>
                  {/* <View
              style={{
                height: 80,
                width: "100%",
                alignItems: "flex-start",
                marginTop: 20
              }}
            >
              <ModalDropDownMenu
                initialValue={this.state.type}
                LabelpaddingBottom={10}
                list={["Both", "Mobile","Dth"]}
                label={"Type"}
                value={this.state.type}
                dropDownLayoutHeight={50}
                dropDownLayoutWidth={250}
                showLabel={true}
                labelStyle={{
                  color: "#002b36",
                  fontSize: 18,
                  marginBottom: 10,
                  alignSelf: "center",
                  marginRight: 10
                }}
                // paddingLeft={-5}
                //dropDownWidth={'95%'}
                optionalColor={"black"}
                editable={true}
                textColor={"#4D4B4B"}
                onSelectAnOption={index => {
                  if (index == 0) {
                    this.setState({ type: "BOTH" });
                  } else if (index == 1) {
                    this.setState({ type: "MOBILE" });
                  }else if (index == 2) {
                    this.setState({ type: "DTH" });
                  }
                }}
              />
            </View> */}

                  {this.state.allhistory_singleDateInModal == true && (
                    <Input
                      editable={false}
                      autoCapitalize={'none'}
                      inputContainerStyle={{
                        paddingLeft: 12,
                        paddingRight: 10,
                        borderWidth: 1,
                        borderRadius: 3,
                        borderColor: '#c0c0c8',
                        marginLeft: 1,
                      }}
                      containerStyle={{
                        width: '95%',
                        paddingHorizontal: 0,
                        marginTop: 20,
                      }}
                      inputStyle={{fontSize: 18, fontWeight: 'bold'}}
                      autoCorrect={false}
                      // keyboardType={'email-address'}
                      label={'Date'}
                      labelStyle={{
                        color: '#002b36',
                        fontSize: 18,
                        marginBottom: 10,
                        alignSelf: 'center',
                        marginRight: 10,
                      }}
                      placeholderTextColor={'grey'}
                      placeholder={'Enter date'}
                      value={this.state.allhistory_toDate}
                      rightIcon={
                        <Icon
                          color="#444"
                          size={22}
                          type="entypo"
                          underlayColor="rgba(255,255,255,0)"
                          name={'calendar'}
                          //name={'eye'}
                          onPress={() =>
                            this.setState({
                              allhistory_singleDatePicker: !this.state
                                .allhistory_singleDatePicker,
                            })
                          }
                        />
                      }
                      //onChangeText={text => this.setState({ DateofPayment: text })}
                    />
                  )}

                  {this.state.allhistory_singleDatePicker && (
                    <DatePicker
                      style={{backgroundColor: '#fff', width: '100%'}}
                      mode="date"
                      format="DD-MM-YYYY"
                      minimumDate={
                        new Date(
                          parseInt(
                            this.state.allhistory_minimumDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_minimumDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_minimumDate.split('-')[0],
                          ),
                        )
                      }
                      maximumDate={
                        new Date(
                          parseInt(
                            this.state.allhistory_maximumDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_maximumDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_maximumDate.split('-')[0],
                          ),
                        )
                      }
                      date={this.state.allhistory_fromDate}
                      value={
                        new Date(
                          parseInt(
                            this.state.allhistory_fromDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_fromDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_fromDate.split('-')[0],
                          ),
                        )
                      }
                      confirmBtnText={'Confirm'}
                      cancelBtnText={'Cancel'}
                      showIcon={false}
                      onChange={(event, date) => {
                        this.setState(
                          {
                            allhistory_fromDate: moment(date).format(
                              'DD-MM-YYYY',
                            ),
                            allhistory_toDate: moment(date).format(
                              'DD-MM-YYYY',
                            ),
                            allhistory_singleDatePicker: false,
                          },
                          () => {
                            console.log(
                              this.state.allhistory_fromDate,
                              this.state.allhistory_toDate,
                              'wtf',
                            );
                          },
                        );
                      }}
                      customStyles={{
                        dateInput: {
                          borderWidth: 0,
                          alignItems: 'flex-start',
                          //marginLeft: 10,
                        },
                        dateText: {
                          color: '#000',
                          fontSize: 18,
                        },
                        disabled: {
                          backgroundColor: '#ffff',
                        },
                      }}
                    />
                  )}
                  {this.state.allhistory_singleDateInModal == false && (
                    <Input
                      editable={false}
                      autoCapitalize={'none'}
                      inputContainerStyle={{
                        paddingLeft: 12,
                        paddingRight: 10,
                        borderWidth: 1,
                        borderRadius: 3,
                        borderColor: '#c0c0c8',
                        marginLeft: 1,
                      }}
                      containerStyle={{
                        width: '95%',
                        paddingHorizontal: 0,
                        marginTop: 20,
                      }}
                      inputStyle={{fontSize: 18, fontWeight: 'bold'}}
                      autoCorrect={false}
                      // keyboardType={'email-address'}
                      label={'From Date'}
                      labelStyle={{
                        color: '#002b36',
                        fontSize: 18,
                        marginBottom: 10,
                        alignSelf: 'center',
                        marginRight: 10,
                      }}
                      placeholderTextColor={'grey'}
                      placeholder={'Enter from date'}
                      value={this.state.allhistory_fromDate}
                      rightIcon={
                        <Icon
                          color="#444"
                          size={22}
                          type="entypo"
                          underlayColor="rgba(255,255,255,0)"
                          name={'calendar'}
                          //name={'eye'}
                          onPress={() =>
                            this.setState({
                              allhistory_fromDatePicker: !this.state
                                .allhistory_fromDatePicker,
                            })
                          }
                        />
                      }
                      //onChangeText={text => this.setState({ DateofPayment: text })}
                    />
                  )}
                  {this.state.allhistory_fromDatePicker && (
                    <DatePicker
                      style={{backgroundColor: '#fff', width: '100%'}}
                      mode="date"
                      format="DD-MM-YYYY"
                      minimumDate={
                        new Date(
                          parseInt(
                            this.state.allhistory_minimumDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_minimumDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_minimumDate.split('-')[0],
                          ),
                        )
                      }
                      maximumDate={
                        new Date(
                          parseInt(
                            this.state.allhistory_maximumDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_maximumDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_maximumDate.split('-')[0],
                          ),
                        )
                      }
                      date={this.state.allhistory_fromDate}
                      value={
                        new Date(
                          parseInt(
                            this.state.allhistory_fromDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_fromDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_fromDate.split('-')[0],
                          ),
                        )
                      }
                      confirmBtnText={'Confirm'}
                      cancelBtnText={'Cancel'}
                      showIcon={false}
                      onChange={(event, date) => {
                        this.setState(
                          {
                            allhistory_fromDate: moment(date).format(
                              'DD-MM-YYYY',
                            ),

                            allhistory_fromDatePicker: false,
                          },
                          () => {},
                        );
                      }}
                      customStyles={{
                        dateInput: {
                          borderWidth: 0,
                          alignItems: 'flex-start',
                          //marginLeft: 10,
                        },
                        dateText: {
                          color: '#000',
                          fontSize: 18,
                        },
                        disabled: {
                          backgroundColor: '#ffff',
                        },
                      }}
                    />
                  )}
                  {this.state.allhistory_singleDateInModal == false && (
                    <Input
                      editable={false}
                      autoCapitalize={'none'}
                      inputContainerStyle={{
                        paddingLeft: 12,
                        paddingRight: 10,
                        borderWidth: 1,
                        borderRadius: 3,
                        borderColor: '#c0c0c8',
                        marginLeft: 1,
                      }}
                      containerStyle={{
                        width: '95%',
                        paddingHorizontal: 0,
                        marginTop: 20,
                      }}
                      inputStyle={{fontSize: 18, fontWeight: 'bold'}}
                      autoCorrect={false}
                      // keyboardType={'email-address'}
                      label={'To Date'}
                      labelStyle={{
                        color: '#002b36',
                        fontSize: 18,
                        marginBottom: 10,
                        alignSelf: 'center',
                        marginRight: 10,
                      }}
                      placeholderTextColor={'grey'}
                      placeholder={'Enter to date'}
                      value={this.state.allhistory_toDate}
                      rightIcon={
                        <Icon
                          color="#444"
                          size={22}
                          type="entypo"
                          underlayColor="rgba(255,255,255,0)"
                          name={'calendar'}
                          //name={'eye'}
                          onPress={() =>
                            this.setState({
                              allhistory_toDatePicker: !this.state
                                .allhistory_toDatePicker,
                            })
                          }
                        />
                      }
                      //onChangeText={text => this.setState({ DateofPayment: text })}
                    />
                  )}
                  {this.state.allhistory_toDatePicker && (
                    <DatePicker
                      style={{backgroundColor: '#fff', width: '100%'}}
                      mode="date"
                      format="DD-MM-YYYY"
                      minimumDate={
                        new Date(
                          parseInt(
                            this.state.allhistory_minimumDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_minimumDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_minimumDate.split('-')[0],
                          ),
                        )
                      }
                      maximumDate={
                        new Date(
                          parseInt(
                            this.state.allhistory_maximumDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_maximumDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_maximumDate.split('-')[0],
                          ),
                        )
                      }
                      date={this.state.allhistory_toDate}
                      value={
                        new Date(
                          parseInt(this.state.allhistory_toDate.split('-')[2]),
                          parseInt(this.state.allhistory_toDate.split('-')[1]) -
                            1,
                          parseInt(this.state.allhistory_toDate.split('-')[0]),
                        )
                      }
                      confirmBtnText={'Confirm'}
                      cancelBtnText={'Cancel'}
                      showIcon={false}
                      onChange={(event, date) => {
                        this.setState({
                          allhistory_toDate: moment(date).format('DD-MM-YYYY'),

                          allhistory_toDatePicker: false,
                        });
                      }}
                      customStyles={{
                        dateInput: {
                          borderWidth: 0,
                          alignItems: 'flex-start',
                          //marginLeft: 10,
                        },
                        dateText: {
                          color: '#000',
                          fontSize: 18,
                        },
                        disabled: {
                          backgroundColor: '#ffff',
                        },
                      }}
                    />
                  )}
                </View>
                <View style={{}}>
                  <CheckBox
                    // checkedIcon={<Image source={require("../checked.png")} />}
                    //uncheckedIcon={<Image source={require("../unchecked.png")} />}
                    containerStyle={{
                      borderWidth: 0,
                      backgroundColor: '#fff',
                      paddingVerical: 5,
                    }}
                    title={'Single Date'}
                    textStyle={{marginBottom: 3}}
                    checked={this.state.allhistory_singleDateInModal}
                    onPress={() => {
                      if (
                        this.state.allhistory_minimumDate !=
                        this.state.allhistory_maximumDate
                      ) {
                        if (
                          this.state.allhistory_singleOption == true &&
                          this.state.allhistory_singleDateInModal == false
                        ) {
                          this.setState({
                            allhistory_fromDate: this.state
                              .allhistory_singleOption_tempSingleDate,
                            allhistory_toDate: this.state
                              .allhistory_singleOption_tempSingleDate,
                            allhistory_singleDateInModal: !this.state
                              .allhistory_singleDateInModal,
                          });
                        } else if (
                          this.state.allhistory_singleOption == true &&
                          this.state.allhistory_singleDateInModal == true
                        ) {
                          this.setState({
                            allhistory_fromDate: this.state
                              .allhistory_minimumDate,
                            allhistory_toDate: this.state
                              .allhistory_maximumDate,
                            allhistory_singleDateInModal: !this.state
                              .allhistory_singleDateInModal,
                          });
                        }

                        if (
                          this.state.allhistory_singleOption == false &&
                          this.state.allhistory_singleDateInModal == true
                        ) {
                          this.setState({
                            allhistory_fromDate: this.state
                              .allhistory_singleOption_tempFromDate,
                            allhistory_toDate: this.state
                              .allhistory_singleOption_tempTODate,
                            allhistory_singleDateInModal: !this.state
                              .allhistory_singleDateInModal,
                          });
                        } else if (
                          this.state.allhistory_singleOption == false &&
                          this.state.allhistory_singleDateInModal == false
                        ) {
                          this.setState({
                            allhistory_fromDate: this.state
                              .allhistory_minimumDate,
                            allhistory_toDate: this.state
                              .allhistory_maximumDate,
                            allhistory_singleDateInModal: !this.state
                              .allhistory_singleDateInModal,
                          });
                        }

                        this.setState({
                          allhistory_singleDateInModal: !this.state
                            .allhistory_singleDateInModal,
                        });
                      }
                    }}
                  />
                </View>
                <View
                  style={{
                    paddingVertical: 10,
                    alignItems: 'center',
                    justifyContent: 'flex-end',
                    // backgroundColor: "#004482fa",
                    backgroundColor: '#fff',
                    borderBottomLeftRadius: 5,
                    borderBottomRightRadius: 5,
                    overflow: 'hidden',
                  }}>
                  <TouchableOpacity
                    style={{
                      height: 50,
                      width: '90%',
                      backgroundColor: '#0086B6',
                      justifyContent: 'center',
                      alignItems: 'center',
                      borderRadius: 5,
                    }}
                    onPress={() => {
                      if (this.state.allhistory_singleDateInModal == true) {
                        this.setState(
                          {allhistory_fromDate: this.state.allhistory_toDate},
                          () => {
                            let compare_fromDate = moment(
                              this.state.allhistory_fromDate,
                              'DD-MM-YYYY',
                            ).toDate();
                            let compare_toDate = moment(
                              this.state.allhistory_toDate,
                              'DD-MM-YYYY',
                            ).toDate();
                            console.log(
                              compare_fromDate,
                              compare_toDate,
                              compare_toDate == compare_fromDate,
                              'same date',
                            );
                            if (compare_fromDate <= compare_toDate) {
                              let filteredData = [];
                              if (compare_fromDate == compare_toDate) {
                                this.state.allhistory_mainData.map((value) => {
                                  let dateJsonType = value.credate;
                                  let dateJsonTypeformat = 'DD-MM-YYYY';
                                  if (dataType == 'wallet_request') {
                                    dateJsonType = value.date_of_deposit;
                                  } else if (dataType == 'report') {
                                    dateJsonType = value.paiddate;
                                    dateJsonTypeformat = 'YYYY-MM-DD';
                                  }

                                  let item_Date = moment(
                                    dateJsonType,
                                    dateJsonTypeformat,
                                  ).toDate();
                                  if (item_Date == compare_fromDate) {
                                    filteredData.push(value);
                                  }
                                });
                              } else {
                                this.state.allhistory_mainData.map((value) => {
                                  let dateJsonType = value.credate;
                                  let dateJsonTypeformat = 'DD-MM-YYYY';
                                  if (dataType == 'wallet_request') {
                                    dateJsonType = value.date_of_deposit;
                                  } else if (dataType == 'report') {
                                    dateJsonType = value.paiddate;
                                    dateJsonTypeformat = 'YYYY-MM-DD';
                                  }
                                  let item_Date = moment(
                                    dateJsonType,
                                    dateJsonTypeformat,
                                  ).toDate();
                                  if (
                                    item_Date >= compare_fromDate &&
                                    item_Date <= compare_toDate
                                  ) {
                                    filteredData.push(value);
                                  }
                                });
                              }

                              this.setState({
                                allhistory_searchData: filteredData,
                                allhistory_filteredData: filteredData,
                                allhistory_modalOpen: !this.state
                                  .allhistory_modalOpen,
                                allhistory_settingFilter: false,
                              });
                            } else {
                              this.generalAwesomeAlertMessage(
                                'From Date cannot exceed To Date',
                              );
                            }
                          },
                        );
                      } else {
                        let compare_fromDate = moment(
                          this.state.allhistory_fromDate,
                          'DD-MM-YYYY',
                        ).toDate();
                        let compare_toDate = moment(
                          this.state.allhistory_toDate,
                          'DD-MM-YYYY',
                        ).toDate();
                        console.log(
                          compare_fromDate,
                          compare_toDate,
                          compare_toDate == compare_fromDate,
                          'same date',
                        );
                        if (compare_fromDate <= compare_toDate) {
                          let filteredData = [];
                          if (compare_fromDate == compare_toDate) {
                            this.state.allhistory_mainData.map((value) => {
                              let dateJsonType = value.credate;
                              let dateJsonTypeformat = 'DD-MM-YYYY';
                              if (dataType == 'wallet_request') {
                                dateJsonType = value.date_of_deposit;
                              } else if (dataType == 'report') {
                                dateJsonType = value.paiddate;
                                dateJsonTypeformat = 'YYYY-MM-DD';
                              }
                              let item_Date = moment(
                                dateJsonType,
                                dateJsonTypeformat,
                              ).toDate();
                              if (item_Date == compare_fromDate) {
                                filteredData.push(value);
                              }
                            });
                          } else {
                            this.state.allhistory_mainData.map((value) => {
                              let dateJsonType = value.credate;
                              let dateJsonTypeformat = 'DD-MM-YYYY';
                              if (dataType == 'wallet_request') {
                                dateJsonType = value.date_of_deposit;
                              } else if (dataType == 'report') {
                                dateJsonType = value.paiddate;
                                dateJsonTypeformat = 'YYYY-MM-DD';
                              }
                              let item_Date = moment(
                                dateJsonType,
                                dateJsonTypeformat,
                              ).toDate();
                              if (
                                item_Date >= compare_fromDate &&
                                item_Date <= compare_toDate
                              ) {
                                filteredData.push(value);
                              }
                            });
                          }

                          this.setState({
                            allhistory_searchData: filteredData,
                            allhistory_filteredData: filteredData,
                            allhistory_modalOpen: !this.state
                              .allhistory_modalOpen,
                            allhistory_settingFilter: false,
                          });
                        } else {
                          this.generalAwesomeAlertMessage(
                            'From Date cannot exceed To Date',
                          );
                        }
                      }
                    }}>
                    <Text
                      style={{
                        fontSize: 18,
                        color: '#fff',
                        fontWeight: 'bold',
                      }}>
                      Submit
                    </Text>
                  </TouchableOpacity>
                </View>
              </View>
            </Modal>

            {/* PDF share and download */}
            <Modal
              isVisible={this.state.allhistory_pdf_modalOpen}
              onBackButtonPress={() => {
                this.setState(
                  {
                    allhistory_pdf_modalOpen: !this.state
                      .allhistory_pdf_modalOpen,
                  },
                  () => {
                    this.setState({
                      allhistory_pdf_fromDate: this.state
                        .allhistory_minimumDate,
                      allhistory_pdf_toDate: this.state.allhistory_maximumDate,

                      allhistory_pdf_singleDateInModal: this.state
                        .allhistory_singleDateInModal,
                    });
                  },
                );
              }}
              animationIn="slideInUp"
              animationOut="slideOutDown"
              backdropOpacity={0.22}
              style={{
                alignItems: 'center',
              }}
              onBackdropPress={() => {
                this.setState(
                  {
                    allhistory_pdf_modalOpen: !this.state
                      .allhistory_pdf_modalOpen,
                  },
                  () => {
                    this.setState({
                      allhistory_pdf_fromDate: this.state
                        .allhistory_minimumDate,
                      allhistory_pdf_toDate: this.state.allhistory_maximumDate,

                      allhistory_pdf_singleDateInModal: this.state
                        .allhistory_singleDateInModal,
                      allhistory_pdf_settingFilter: false,
                    });
                  },
                );
              }}>
              <View
                style={{
                  display: 'flex',
                  backgroundColor: '#fff',
                  //height: this.state.allhistory_singleDateInModal ? 250 : 370,
                  width: 300,
                  borderRadius: 5,
                  padding: 5,
                }}>
                <View
                  style={{
                    paddingVerical: 5,
                    justifyContent: 'flex-end',
                    marginTop: 5,
                    marginRight: -3,
                    flexDirection: 'row',
                  }}>
                  <TouchableOpacity
                    style={{
                      width: '15%',
                      alignItems: 'center',
                      justifyContent: 'center',
                    }}
                    onPress={() => {
                      this.setState({
                        allhistory_pdf_fromDate: this.state
                          .allhistory_minimumDate,
                        allhistory_pdf_toDate: this.state
                          .allhistory_maximumDate,
                      });
                    }}>
                    <Icon
                      name={'refresh'}
                      type={'Octicons'}
                      size={22}
                      //color="#A19D9D"

                      color={'#111'}
                    />
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={{
                      width: '15%',
                      alignItems: 'center',
                      justifyContent: 'center',
                    }}
                    onPress={() => {
                      this.setState(
                        {
                          allhistory_pdf_modalOpen: !this.state
                            .allhistory_pdf_modalOpen,
                        },
                        () => {
                          this.setState({
                            allhistory_pdf_fromDate: this.state
                              .allhistory_minimumDate,
                            allhistory_pdf_toDate: this.state
                              .allhistory_maximumDate,
                            allhistory_pdf_type: this.state
                              .allhistory_pdf_tempType,
                            allhistory_pdf_singleDateInModal: this.state
                              .allhistory_pdf_singleOption,
                          });
                        },
                      );
                    }}>
                    <Icon
                      name={'close'}
                      type={'Octicons'}
                      size={22}
                      //color="#A19D9D"
                      color={'#111'}
                    />
                  </TouchableOpacity>
                </View>
                <View
                  style={{
                    paddingVerical: 5,
                    alignItems: 'center',
                  }}>
                  {/* <View
              style={{
                height: 80,
                width: "100%",
                alignItems: "flex-start",
                marginTop: 20
              }}
            >
              <ModalDropDownMenu
                initialValue={this.state.type}
                LabelpaddingBottom={10}
                list={["Both", "Mobile","Dth"]}
                label={"Type"}
                value={this.state.type}
                dropDownLayoutHeight={50}
                dropDownLayoutWidth={250}
                showLabel={true}
                labelStyle={{
                  color: "#002b36",
                  fontSize: 18,
                  marginBottom: 10,
                  alignSelf: "center",
                  marginRight: 10
                }}
                // paddingLeft={-5}
                //dropDownWidth={'95%'}
                optionalColor={"black"}
                editable={true}
                textColor={"#4D4B4B"}
                onSelectAnOption={index => {
                  if (index == 0) {
                    this.setState({ type: "BOTH" });
                  } else if (index == 1) {
                    this.setState({ type: "MOBILE" });
                  }else if (index == 2) {
                    this.setState({ type: "DTH" });
                  }
                }}
              />
            </View> */}

                  {this.state.allhistory_pdf_singleDateInModal == true && (
                    <Input
                      editable={false}
                      autoCapitalize={'none'}
                      inputContainerStyle={{
                        paddingLeft: 12,
                        paddingRight: 10,
                        borderWidth: 1,
                        borderRadius: 3,
                        borderColor: '#c0c0c8',
                        marginLeft: 1,
                      }}
                      containerStyle={{
                        width: '95%',
                        paddingHorizontal: 0,
                        marginTop: 20,
                      }}
                      inputStyle={{fontSize: 18, fontWeight: 'bold'}}
                      autoCorrect={false}
                      // keyboardType={'email-address'}
                      label={'Date'}
                      labelStyle={{
                        color: '#002b36',
                        fontSize: 18,
                        marginBottom: 10,
                        alignSelf: 'center',
                        marginRight: 10,
                      }}
                      placeholderTextColor={'grey'}
                      placeholder={'Enter date'}
                      value={this.state.allhistory_pdf_toDate}
                      rightIcon={
                        <Icon
                          color="#444"
                          size={22}
                          type="entypo"
                          underlayColor="rgba(255,255,255,0)"
                          name={'calendar'}
                          //name={'eye'}
                          onPress={() =>
                            this.setState({
                              allhistory_pdf_singleDatePicker: !this.state
                                .allhistory_pdf_singleDatePicker,
                            })
                          }
                        />
                      }
                      //onChangeText={text => this.setState({ DateofPayment: text })}
                    />
                  )}

                  {this.state.allhistory_pdf_singleDatePicker && (
                    <DatePicker
                      style={{backgroundColor: '#fff', width: '100%'}}
                      mode="date"
                      format="DD-MM-YYYY"
                      minimumDate={
                        new Date(
                          parseInt(
                            this.state.allhistory_pdf_minimumDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_pdf_minimumDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_pdf_minimumDate.split('-')[0],
                          ),
                        )
                      }
                      maximumDate={
                        new Date(
                          parseInt(
                            this.state.allhistory_pdf_maximumDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_pdf_maximumDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_pdf_maximumDate.split('-')[0],
                          ),
                        )
                      }
                      date={this.state.allhistory_pdf_fromDate}
                      value={
                        new Date(
                          parseInt(
                            this.state.allhistory_pdf_fromDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_pdf_fromDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_pdf_fromDate.split('-')[0],
                          ),
                        )
                      }
                      confirmBtnText={'Confirm'}
                      cancelBtnText={'Cancel'}
                      showIcon={false}
                      onChange={(event, date) => {
                        this.setState(
                          {
                            allhistory_pdf_fromDate: moment(date).format(
                              'DD-MM-YYYY',
                            ),
                            allhistory_pdf_toDate: moment(date).format(
                              'DD-MM-YYYY',
                            ),
                            allhistory_pdf_singleDatePicker: false,
                          },
                          () => {
                            console.log(
                              this.state.allhistory_pdf_fromDate,
                              this.state.allhistory_pdf_toDate,
                              'wtf',
                            );
                          },
                        );
                      }}
                      customStyles={{
                        dateInput: {
                          borderWidth: 0,
                          alignItems: 'flex-start',
                          //marginLeft: 10,
                        },
                        dateText: {
                          color: '#000',
                          fontSize: 18,
                        },
                        disabled: {
                          backgroundColor: '#ffff',
                        },
                      }}
                    />
                  )}
                  {this.state.allhistory_pdf_singleDateInModal == false && (
                    <Input
                      editable={false}
                      autoCapitalize={'none'}
                      inputContainerStyle={{
                        paddingLeft: 12,
                        paddingRight: 10,
                        borderWidth: 1,
                        borderRadius: 3,
                        borderColor: '#c0c0c8',
                        marginLeft: 1,
                      }}
                      containerStyle={{
                        width: '95%',
                        paddingHorizontal: 0,
                        marginTop: 20,
                      }}
                      inputStyle={{fontSize: 18, fontWeight: 'bold'}}
                      autoCorrect={false}
                      // keyboardType={'email-address'}
                      label={'From Date'}
                      labelStyle={{
                        color: '#002b36',
                        fontSize: 18,
                        marginBottom: 10,
                        alignSelf: 'center',
                        marginRight: 10,
                      }}
                      placeholderTextColor={'grey'}
                      placeholder={'Enter from date'}
                      value={this.state.allhistory_pdf_fromDate}
                      rightIcon={
                        <Icon
                          color="#444"
                          size={22}
                          type="entypo"
                          underlayColor="rgba(255,255,255,0)"
                          name={'calendar'}
                          //name={'eye'}
                          onPress={() =>
                            this.setState({
                              allhistory_pdf_fromDatePicker: !this.state
                                .allhistory_pdf_fromDatePicker,
                            })
                          }
                        />
                      }
                      //onChangeText={text => this.setState({ DateofPayment: text })}
                    />
                  )}
                  {this.state.allhistory_pdf_fromDatePicker && (
                    <DatePicker
                      style={{backgroundColor: '#fff', width: '100%'}}
                      mode="date"
                      format="DD-MM-YYYY"
                      minimumDate={
                        new Date(
                          parseInt(
                            this.state.allhistory_pdf_minimumDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_pdf_minimumDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_pdf_minimumDate.split('-')[0],
                          ),
                        )
                      }
                      maximumDate={
                        new Date(
                          parseInt(
                            this.state.allhistory_pdf_maximumDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_pdf_maximumDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_pdf_maximumDate.split('-')[0],
                          ),
                        )
                      }
                      date={this.state.allhistory_pdf_fromDate}
                      value={
                        new Date(
                          parseInt(
                            this.state.allhistory_pdf_fromDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_pdf_fromDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_pdf_fromDate.split('-')[0],
                          ),
                        )
                      }
                      confirmBtnText={'Confirm'}
                      cancelBtnText={'Cancel'}
                      showIcon={false}
                      onChange={(event, date) => {
                        this.setState(
                          {
                            allhistory_pdf_fromDate: moment(date).format(
                              'DD-MM-YYYY',
                            ),

                            allhistory_pdf_fromDatePicker: false,
                          },
                          () => {},
                        );
                      }}
                      customStyles={{
                        dateInput: {
                          borderWidth: 0,
                          alignItems: 'flex-start',
                          //marginLeft: 10,
                        },
                        dateText: {
                          color: '#000',
                          fontSize: 18,
                        },
                        disabled: {
                          backgroundColor: '#ffff',
                        },
                      }}
                    />
                  )}
                  {this.state.allhistory_pdf_singleDateInModal == false && (
                    <Input
                      editable={false}
                      autoCapitalize={'none'}
                      inputContainerStyle={{
                        paddingLeft: 12,
                        paddingRight: 10,
                        borderWidth: 1,
                        borderRadius: 3,
                        borderColor: '#c0c0c8',
                        marginLeft: 1,
                      }}
                      containerStyle={{
                        width: '95%',
                        paddingHorizontal: 0,
                        marginTop: 20,
                      }}
                      inputStyle={{fontSize: 18, fontWeight: 'bold'}}
                      autoCorrect={false}
                      // keyboardType={'email-address'}
                      label={'To Date'}
                      labelStyle={{
                        color: '#002b36',
                        fontSize: 18,
                        marginBottom: 10,
                        alignSelf: 'center',
                        marginRight: 10,
                      }}
                      placeholderTextColor={'grey'}
                      placeholder={'Enter to date'}
                      value={this.state.allhistory_pdf_toDate}
                      rightIcon={
                        <Icon
                          color="#444"
                          size={22}
                          type="entypo"
                          underlayColor="rgba(255,255,255,0)"
                          name={'calendar'}
                          //name={'eye'}
                          onPress={() =>
                            this.setState({
                              allhistory_pdf_toDatePicker: !this.state
                                .allhistory_pdf_toDatePicker,
                            })
                          }
                        />
                      }
                      //onChangeText={text => this.setState({ DateofPayment: text })}
                    />
                  )}
                  {this.state.allhistory_pdf_toDatePicker && (
                    <DatePicker
                      style={{backgroundColor: '#fff', width: '100%'}}
                      mode="date"
                      format="DD-MM-YYYY"
                      minimumDate={
                        new Date(
                          parseInt(
                            this.state.allhistory_pdf_minimumDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_pdf_minimumDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_pdf_minimumDate.split('-')[0],
                          ),
                        )
                      }
                      maximumDate={
                        new Date(
                          parseInt(
                            this.state.allhistory_pdf_maximumDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_pdf_maximumDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_pdf_maximumDate.split('-')[0],
                          ),
                        )
                      }
                      date={this.state.allhistory_pdf_toDate}
                      value={
                        new Date(
                          parseInt(
                            this.state.allhistory_pdf_toDate.split('-')[2],
                          ),
                          parseInt(
                            this.state.allhistory_pdf_toDate.split('-')[1],
                          ) - 1,
                          parseInt(
                            this.state.allhistory_pdf_toDate.split('-')[0],
                          ),
                        )
                      }
                      confirmBtnText={'Confirm'}
                      cancelBtnText={'Cancel'}
                      showIcon={false}
                      onChange={(event, date) => {
                        this.setState({
                          allhistory_pdf_toDate: moment(date).format(
                            'DD-MM-YYYY',
                          ),

                          allhistory_pdf_toDatePicker: false,
                        });
                      }}
                      customStyles={{
                        dateInput: {
                          borderWidth: 0,
                          alignItems: 'flex-start',
                          //marginLeft: 10,
                        },
                        dateText: {
                          color: '#000',
                          fontSize: 18,
                        },
                        disabled: {
                          backgroundColor: '#ffff',
                        },
                      }}
                    />
                  )}
                </View>
                <View style={{}}>
                  <CheckBox
                    // checkedIcon={<Image source={require("../checked.png")} />}
                    //uncheckedIcon={<Image source={require("../unchecked.png")} />}
                    containerStyle={{
                      borderWidth: 0,
                      backgroundColor: '#fff',
                      paddingVerical: 5,
                    }}
                    title={'Single Date'}
                    textStyle={{marginBottom: 3}}
                    checked={this.state.allhistory_pdf_singleDateInModal}
                    onPress={() => {
                      if (
                        this.state.allhistory_pdf_minimumDate !=
                        this.state.allhistory_pdf_maximumDate
                      ) {
                        if (
                          this.state.allhistory_pdf_singleOption == true &&
                          this.state.allhistory_pdf_singleDateInModal == false
                        ) {
                          this.setState({
                            allhistory_pdf_fromDate: this.state
                              .allhistory_pdf_singleOption_tempSingleDate,
                            allhistory_pdf_toDate: this.state
                              .allhistory_pdf_singleOption_tempSingleDate,
                            allhistory_pdf_singleDateInModal: !this.state
                              .allhistory_pdf_singleDateInModal,
                          });
                        } else if (
                          this.state.allhistory_pdf_singleOption == true &&
                          this.state.allhistory_pdf_singleDateInModal == true
                        ) {
                          this.setState({
                            allhistory_pdf_fromDate: this.state
                              .allhistory_pdf_minimumDate,
                            allhistory_pdf_toDate: this.state
                              .allhistory_pdf_maximumDate,
                            allhistory_pdf_singleDateInModal: !this.state
                              .allhistory_pdf_singleDateInModal,
                          });
                        }

                        if (
                          this.state.allhistory_pdf_singleOption == false &&
                          this.state.allhistory_pdf_singleDateInModal == true
                        ) {
                          this.setState({
                            allhistory_pdf_fromDate: this.state
                              .allhistory_pdf_singleOption_tempFromDate,
                            allhistory_pdf_toDate: this.state
                              .allhistory_pdf_singleOption_tempTODate,
                            allhistory_pdf_singleDateInModal: !this.state
                              .allhistory_pdf_singleDateInModal,
                          });
                        } else if (
                          this.state.allhistory_pdf_singleOption == false &&
                          this.state.allhistory_pdf_singleDateInModal == false
                        ) {
                          this.setState({
                            allhistory_pdf_fromDate: this.state
                              .allhistory_pdf_minimumDate,
                            allhistory_pdf_toDate: this.state
                              .allhistory_pdf_maximumDate,
                            allhistory_pdf_singleDateInModal: !this.state
                              .allhistory_pdf_singleDateInModal,
                          });
                        }

                        this.setState({
                          allhistory_pdf_singleDateInModal: !this.state
                            .allhistory_pdf_singleDateInModal,
                        });
                      }
                    }}
                  />
                </View>
                <View
                  style={{
                    paddingVertical: 10,
                    alignItems: 'center',
                    justifyContent: 'flex-end',
                    // backgroundColor: "#004482fa",
                    backgroundColor: '#fff',
                    borderBottomLeftRadius: 5,
                    borderBottomRightRadius: 5,
                    overflow: 'hidden',
                  }}>
                  <TouchableOpacity
                    style={{
                      height: 50,
                      width: '90%',
                      backgroundColor: '#aaa9ad',
                      justifyContent: 'center',
                      alignItems: 'center',
                      borderRadius: 5,
                    }}
                    onPress={() => {
                      this.setState(
                        {allhistory_pdf_share_loading: true},
                        () => {
                          if (
                            this.state.allhistory_pdf_singleDateInModal == true
                          ) {
                            this.setState(
                              {
                                allhistory_pdf_fromDate: this.state
                                  .allhistory_pdf_toDate,
                              },
                              () => {
                                let compare_fromDate = moment(
                                  this.state.allhistory_pdf_fromDate,
                                  'DD-MM-YYYY',
                                ).toDate();
                                let compare_toDate = moment(
                                  this.state.allhistory_pdf_toDate,
                                  'DD-MM-YYYY',
                                ).toDate();
                                console.log(
                                  compare_fromDate,
                                  compare_toDate,
                                  compare_toDate == compare_fromDate,
                                  'same date',
                                );
                                if (compare_fromDate <= compare_toDate) {
                                  this.downloadFile(
                                    this.state.allhistory_pdf_fromDate,
                                    this.state.allhistory_pdf_toDate,
                                    'share',
                                  );
                                } else {
                                  this.generalAwesomeAlertMessage(
                                    'From Date cannot exceed To Date',
                                  );
                                }
                              },
                            );
                          } else {
                            let compare_fromDate = moment(
                              this.state.allhistory_pdf_fromDate,
                              'DD-MM-YYYY',
                            ).toDate();
                            let compare_toDate = moment(
                              this.state.allhistory_pdf_toDate,
                              'DD-MM-YYYY',
                            ).toDate();
                            console.log(
                              compare_fromDate,
                              compare_toDate,
                              compare_toDate == compare_fromDate,
                              'same date',
                            );
                            if (compare_fromDate <= compare_toDate) {
                              this.downloadFile(
                                this.state.allhistory_pdf_fromDate,
                                this.state.allhistory_pdf_toDate,
                                'share',
                              );
                            } else {
                              this.generalAwesomeAlertMessage(
                                'From Date cannot exceed To Date',
                              );
                            }
                          }
                        },
                      );
                    }}>
                    {this.state.allhistory_pdf_share_loading == true ? (
                      <ActivityIndicator size={'small'} color={'#fff'} />
                    ) : (
                      <Text
                        style={{
                          fontSize: 18,
                          color: '#fff',
                          fontWeight: 'bold',
                        }}>
                        Share
                      </Text>
                    )}
                  </TouchableOpacity>
                </View>
                <View
                  style={{
                    paddingVertical: 10,
                    alignItems: 'center',
                    justifyContent: 'flex-end',
                    // backgroundColor: "#004482fa",
                    backgroundColor: '#fff',
                    borderBottomLeftRadius: 5,
                    borderBottomRightRadius: 5,
                    overflow: 'hidden',
                  }}>
                  <TouchableOpacity
                    style={{
                      height: 50,
                      width: '90%',
                      backgroundColor: '#0086B6',
                      justifyContent: 'center',
                      alignItems: 'center',
                      borderRadius: 5,
                    }}
                    onPress={() => {
                      this.setState(
                        {allhistory_pdf_download_loading: true},
                        () => {
                          if (
                            this.state.allhistory_pdf_singleDateInModal == true
                          ) {
                            this.setState(
                              {
                                allhistory_pdf_fromDate: this.state
                                  .allhistory_pdf_toDate,
                              },
                              () => {
                                let compare_fromDate = moment(
                                  this.state.allhistory_pdf_fromDate,
                                  'DD-MM-YYYY',
                                ).toDate();
                                let compare_toDate = moment(
                                  this.state.allhistory_pdf_toDate,
                                  'DD-MM-YYYY',
                                ).toDate();

                                if (compare_fromDate <= compare_toDate) {
                                  this.downloadFile(
                                    this.state.allhistory_pdf_fromDate,
                                    this.state.allhistory_pdf_toDate,
                                    'download',
                                  );
                                } else {
                                  this.generalAwesomeAlertMessage(
                                    'From Date cannot exceed To Date',
                                  );
                                }
                              },
                            );
                          } else {
                            let compare_fromDate = moment(
                              this.state.allhistory_pdf_fromDate,
                              'DD-MM-YYYY',
                            ).toDate();
                            let compare_toDate = moment(
                              this.state.allhistory_pdf_toDate,
                              'DD-MM-YYYY',
                            ).toDate();

                            if (compare_fromDate <= compare_toDate) {
                              this.downloadFile(
                                this.state.allhistory_pdf_fromDate,
                                this.state.allhistory_pdf_toDate,
                                'download',
                              );
                            } else {
                              this.generalAwesomeAlertMessage(
                                'From Date cannot exceed To Date',
                              );
                            }
                          }
                        },
                      );
                    }}>
                    {this.state.allhistory_pdf_download_loading == true ? (
                      <ActivityIndicator size={'small'} color={'#fff'} />
                    ) : (
                      <Text
                        style={{
                          fontSize: 18,
                          color: '#fff',
                          fontWeight: 'bold',
                        }}>
                        Download
                      </Text>
                    )}
                  </TouchableOpacity>
                </View>
              </View>
            </Modal>

            {/* </ScrollView> */}
          </View>
        </View>
      </View>
    );
  }

  getListingAndDetailsPageTemplate(heading) {
    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              {heading}
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'flex-end',
              height: '100%',
              paddingHorizontal: 20,
              paddingVertical: 10,
            }}>
            {heading == 'Recharge' && (
              <TouchableOpacity
                style={{alignItems: 'center', flexDirection: 'row'}}
                onPress={() => {
                  this.openUrlFunction(
                    'https://www.91mobiles.com/recharge-plans',
                  );
                }}>
                <Icon
                  color="#00000090"
                  size={25}
                  type="feather"
                  underlayColor="rgba(255,255,255,0)"
                  name={'clipboard'}
                  //name={'eye'}
                />
              </TouchableOpacity>
            )}
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            // backgroundColor: "#EDF0F7",
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <View
              style={{
                height: 350,
                width: '100%',
                alignItems: 'center',
                justifyContent: 'center',
              }}>
              <View
                style={{
                  flex: 1,
                  alignItems: 'center',
                  justifyContent: 'center',
                  width: '100%',
                }}>
                <Image
                  style={{
                    width: 130,
                    justifyContent: 'center',
                    height: '100%',
                  }}
                  resizeMode={'contain'}
                  source={require('../../images/teacherind_logo.jpg')}
                />
              </View>

              <View
                style={{
                  flex: 1,
                  lignItems: 'center',
                  justifyContent: 'center',
                  width: '100%',
                }}>
                <Text
                  style={{
                    fontSize: 16,
                    textAlign: 'justify',
                    width: '100%',
                    paddingHorizontal: 20,
                    color: 'grey',
                  }}>
                  A Personal Mentoring platform to offer individual online
                  tuitions for students in Schools & Colleges in Maths, Science,
                  Commerce & languages, Btech subjects & various Skill
                  development courses like Robotics & Coding. Visit our website
                  to know more
                </Text>
              </View>
              <View
                style={{
                  flex: 0.4,
                  width: '100%',
                  alignItems: 'flex-end',
                  justifyContent: 'center',
                  paddingHorizontal: 20,
                }}>
                <TouchableOpacity
                  onPress={() => {
                    this.openUrlFunction('http://www.teacherind.com');
                  }}
                  style={{
                    padding: 7,
                    backgroundColor: '#00BC86',
                    borderRadius: 6,
                    flexDirection: 'row',
                  }}>
                  <View
                    style={{justifyContent: 'center', alignItems: 'center'}}>
                    <Icon
                      color="#fff"
                      size={18}
                      type="feather"
                      name={'globe'}
                      //name={'eye'}
                    />
                  </View>
                  <Text
                    style={{
                      fontSize: 16,
                      paddingLeft: 7,
                      paddingRight: 10,
                      color: '#fff',
                      fontWeight: 'bold',
                    }}>
                    More Info
                  </Text>
                </TouchableOpacity>
              </View>
            </View>

            <View
              style={{
                flex: 1,
                width: '100%',
                alignItems: 'center',
                justifyContent: 'flex-start',
              }}>
              <FlatList
                style={{width: '100%'}}
                keyboardShouldPersistTaps={'always'}
                showsVerticalScrollIndicator={false}
                contentContainerStyle={{
                  paddingTop: 20,
                  width: '100%',
                }}
                data={this.setPaymentData()}
                keyExtractor={(item, index) => String(index)}
                renderItem={({item, index, separators}) => (
                  <View
                    style={{
                      width: '93%',
                      backgroundColor: '#ffff',
                      marginBottom: 20,
                      alignSelf: 'center',
                      borderRadius: 8,
                      shadowColor: '#c0c0c8',
                      shadowOffset: {
                        width: 2,
                        height: 2,
                      },
                      shadowOpacity: 0.25,
                      shadowRadius: 2,
                      elevation: 2,
                    }}>
                    <LinearGradient
                      //colors={[item.color1, item.color2]}
                      colors={['#3361B4', '#4075D3']}
                      start={{x: 0, y: 0}}
                      end={{x: 1, y: 0}}
                      style={{
                        flex: 1,
                        width: '100%',
                        justifyContent: 'center',
                        paddingVertical: 10,
                        borderTopLeftRadius: 8,
                        borderTopRightRadius: 8,
                        paddingLeft: 5,
                        paddingVertical: 12,
                      }}>
                      <Text
                        style={{paddingLeft: 5, fontSize: 18, color: '#fff'}}>
                        {item.name}
                      </Text>
                    </LinearGradient>
                    <View style={{flex: 5, width: '100%'}}>
                      <FlatList
                        style={{width: '100%'}}
                        keyboardShouldPersistTaps={'always'}
                        showsVerticalScrollIndicator={false}
                        contentContainerStyle={{
                          width: '100%',
                        }}
                        data={item.data}
                        keyExtractor={(item, index) => String(index)}
                        renderItem={({item, index, separators}) => (
                          <TouchableOpacity
                            style={{
                              flex: 1,
                              width: '100%',
                              backgroundColor: '#fff',
                              flexDirection: 'row',
                              borderBottomWidth: item.finish == false ? 0.8 : 0,
                              borderBottomLeftRadius: 8,
                              borderBottomRightRadius: 8,
                              borderColor: '#c0c0c8a0',
                            }}
                            onPress={() => {
                              this.onPressFunction(item.pageDepth);
                            }}>
                            <View
                              style={{
                                height: '100%',
                                width: '90%',
                                justifyContent: 'center',
                                flexDirection: 'row',
                                paddingVertical: 20,
                              }}>
                              <View
                                style={{
                                  height: '100%',
                                  width: '13%',
                                  justifyContent: 'center',
                                  alignItems: 'center',
                                }}>
                                <Icon
                                  size={20}
                                  name={item.iconName}
                                  type={item.iconType}
                                  color={'#596497'}
                                />
                              </View>
                              <View
                                style={{
                                  height: '100%',
                                  width: '87%',
                                  justifyContent: 'center',
                                  alignItems: 'flex-start',
                                }}>
                                <Text
                                  style={{
                                    fontSize: 17,
                                    marginLeft: -4,
                                    fontWeight: 'bold',
                                    color: '#556080',
                                  }}>
                                  {item.data_name}
                                </Text>
                              </View>
                            </View>
                            <View
                              style={{
                                height: '100%',
                                width: '10%',
                                justifyContent: 'center',
                                alignItems: 'center',
                              }}>
                              <Icon
                                size={25}
                                name={'arrow-circle-right'}
                                type={'font-awesome'}
                                color={'#00000090'}
                                underlayColor="rgba(255,255,255,0)"
                              />
                            </View>
                          </TouchableOpacity>
                        )}
                      />
                    </View>
                  </View>
                )}
              />
            </View>
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getListingPageTemplate(heading) {
    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              {heading}
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'flex-end',
              height: '100%',
              paddingHorizontal: 20,
              paddingVertical: 10,
            }}>
            {heading == 'Recharge' && (
              <TouchableOpacity
                style={{alignItems: 'center', flexDirection: 'row'}}
                onPress={() => {
                  this.openUrlFunction(
                    'https://www.91mobiles.com/recharge-plans',
                  );
                }}>
                <Icon
                  color="#00000090"
                  size={25}
                  type="feather"
                  underlayColor="rgba(255,255,255,0)"
                  name={'clipboard'}
                  //name={'eye'}
                />
              </TouchableOpacity>
            )}
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            // backgroundColor: "#EDF0F7",
            backgroundColor: '#fff',
          }}>
          <FlatList
            style={{width: '100%'}}
            keyboardShouldPersistTaps={'always'}
            showsVerticalScrollIndicator={false}
            contentContainerStyle={{
              paddingTop: 20,
              width: '100%',
            }}
            data={this.setPaymentData()}
            keyExtractor={(item, index) => String(index)}
            renderItem={({item, index, separators}) => (
              <View
                style={{
                  width: '93%',
                  backgroundColor: '#ffff',
                  marginBottom: 20,
                  alignSelf: 'center',
                  borderRadius: 8,
                  shadowColor: '#c0c0c8',
                  shadowOffset: {
                    width: 2,
                    height: 2,
                  },
                  shadowOpacity: 0.25,
                  shadowRadius: 2,
                  elevation: 2,
                }}>
                <LinearGradient
                  //colors={[item.color1, item.color2]}
                  colors={['#3361B4', '#4075D3']}
                  start={{x: 0, y: 0}}
                  end={{x: 1, y: 0}}
                  style={{
                    flex: 1,
                    width: '100%',
                    justifyContent: 'center',
                    paddingVertical: 10,
                    borderTopLeftRadius: 8,
                    borderTopRightRadius: 8,
                    paddingLeft: 5,
                    paddingVertical: 12,
                  }}>
                  <Text style={{paddingLeft: 5, fontSize: 18, color: '#fff'}}>
                    {item.name}
                  </Text>
                </LinearGradient>
                <View style={{flex: 5, width: '100%'}}>
                  <FlatList
                    style={{width: '100%'}}
                    keyboardShouldPersistTaps={'always'}
                    showsVerticalScrollIndicator={false}
                    contentContainerStyle={{
                      width: '100%',
                    }}
                    data={item.data}
                    keyExtractor={(item, index) => String(index)}
                    renderItem={({item, index, separators}) => (
                      <TouchableOpacity
                        style={{
                          flex: 1,
                          width: '100%',
                          backgroundColor: '#fff',
                          flexDirection: 'row',
                          borderBottomWidth: item.finish == false ? 0.8 : 0,
                          borderBottomLeftRadius: 8,
                          borderBottomRightRadius: 8,
                          borderColor: '#c0c0c8a0',
                        }}
                        onPress={() => {
                          this.onPressFunction(item.pageDepth);
                        }}>
                        <View
                          style={{
                            height: '100%',
                            width: '90%',
                            justifyContent: 'center',
                            flexDirection: 'row',
                            paddingVertical: 20,
                          }}>
                          <View
                            style={{
                              height: '100%',
                              width: '13%',
                              justifyContent: 'center',
                              alignItems: 'center',
                            }}>
                            <Icon
                              size={20}
                              name={item.iconName}
                              type={item.iconType}
                              color={'#596497'}
                            />
                          </View>
                          <View
                            style={{
                              height: '100%',
                              width: '87%',
                              justifyContent: 'center',
                              alignItems: 'flex-start',
                            }}>
                            <Text
                              style={{
                                fontSize: 17,
                                marginLeft: -4,
                                fontWeight: 'bold',
                                color: '#556080',
                              }}>
                              {item.data_name}
                            </Text>
                          </View>
                        </View>
                        <View
                          style={{
                            height: '100%',
                            width: '10%',
                            justifyContent: 'center',
                            alignItems: 'center',
                          }}>
                          <Icon
                            size={25}
                            name={'arrow-circle-right'}
                            type={'font-awesome'}
                            color={'#00000090'}
                            underlayColor="rgba(255,255,255,0)"
                          />
                        </View>
                      </TouchableOpacity>
                    )}
                  />
                </View>
              </View>
            )}
          />
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getHelpLineContacts(heading) {
    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              {heading}
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'flex-end',
              height: '100%',
              paddingHorizontal: 20,
              paddingVertical: 10,
            }}>
            {heading == 'Recharge' && (
              <TouchableOpacity
                style={{alignItems: 'center', flexDirection: 'row'}}
                onPress={() => {
                  this.openUrlFunction(
                    'https://www.91mobiles.com/recharge-plans',
                  );
                }}>
                <Icon
                  color="#00000090"
                  size={25}
                  type="feather"
                  underlayColor="rgba(255,255,255,0)"
                  name={'clipboard'}
                  //name={'eye'}
                />
              </TouchableOpacity>
            )}
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            // backgroundColor: "#EDF0F7",
            backgroundColor: '#fff',
          }}>
          <FlatList
            style={{width: '100%'}}
            keyboardShouldPersistTaps={'always'}
            showsVerticalScrollIndicator={false}
            contentContainerStyle={{
              paddingTop: 20,
              width: '100%',
            }}
            data={this.state.profile_contact_details}
            keyExtractor={(item, index) => String(index)}
            renderItem={({item, index, separators}) => (
              <View
                style={{
                  width: '94%',
                  backgroundColor: '#fff',
                  marginBottom: 20,
                  alignSelf: 'center',
                  borderRadius: 8,
                  shadowColor: '#c0c0c8',
                  shadowOffset: {
                    width: 2,
                    height: 2,
                  },
                  shadowOpacity: 0.2,
                  shadowRadius: 2,
                  elevation: 4,
                  borderWidth: 0.2,
                  borderColor: '#F1F1F1',
                }}>
                <View style={{}}>
                  <View
                    style={{
                      height: 80,
                      width: '100%',
                      flexDirection: 'row',
                      backgroundColor: '#FAFAFA',
                      borderTopLeftRadius: 8,
                      borderTopRightRadius: 8,
                    }}>
                    <View
                      style={{
                        flex: 1,
                        alignItems: 'center',
                        justifyContent: 'center',
                      }}>
                      <Icon
                        size={55}
                        name={'user-circle'}
                        type={'font-awesome'}
                        color={'#F1F1F1'}
                        underlayColor="rgba(255,255,255,0)"
                      />
                    </View>
                    <View
                      style={{
                        flex: 3.5,
                        alignItems: 'flex-start',
                        justifyContent: 'center',
                      }}>
                      <Text
                        style={{
                          paddingLeft: 5,
                          fontSize: 25,
                          color: '#594F57',
                          fontWeight: 'bold',
                        }}>
                        {item.name}
                      </Text>
                    </View>
                  </View>
                  <TouchableOpacity
                    style={{height: 70, width: '100%', flexDirection: 'row'}}
                    onPress={() => {
                      Linking.openURL(`tel:${item.number}`);
                    }}>
                    <View
                      style={{
                        flex: 1,
                        alignItems: 'center',
                        justifyContent: 'center',
                      }}>
                      <Icon
                        size={30}
                        name={'phone'}
                        type={'font-awesome'}
                        color={'#A5A5A5'}
                        underlayColor="rgba(255,255,255,0)"
                      />
                    </View>
                    <View
                      style={{
                        flex: 5,
                        alignItems: 'flex-start',
                        justifyContent: 'center',
                      }}>
                      <Text
                        style={{
                          paddingLeft: 5,
                          fontSize: 14,
                          color: '#A8A8A8',
                        }}>
                        MOBILE
                      </Text>
                      <Text
                        style={{
                          paddingLeft: 5,
                          fontSize: 17,
                          color: '#242424',
                        }}>
                        {item.number}
                      </Text>
                    </View>
                  </TouchableOpacity>
                  {item.mobileno2 && (
                    <TouchableOpacity
                      style={{height: 70, width: '100%', flexDirection: 'row'}}
                      onPress={() => {
                        Linking.openURL(`tel:${item.mobileno2}`);
                      }}>
                      <View
                        style={{
                          flex: 1,
                          alignItems: 'center',
                          justifyContent: 'center',
                        }}>
                        <Icon
                          size={30}
                          name={'phone'}
                          type={'font-awesome'}
                          color={'#A5A5A5'}
                          underlayColor="rgba(255,255,255,0)"
                        />
                      </View>
                      <View
                        style={{
                          flex: 5,
                          alignItems: 'flex-start',
                          justifyContent: 'center',
                        }}>
                        <Text
                          style={{
                            paddingLeft: 5,
                            fontSize: 14,
                            color: '#A8A8A8',
                          }}>
                          MOBILE
                        </Text>
                        <Text
                          style={{
                            paddingLeft: 5,
                            fontSize: 17,
                            color: '#242424',
                          }}>
                          {item.mobileno2}
                        </Text>
                      </View>
                    </TouchableOpacity>
                  )}
                </View>
                <View
                  style={{
                    width: '100%',
                    paddingVertical: 3,
                    backgroundColor: '#fafafa',
                    borderBottomLeftRadius: 8,
                    borderBottomRightRadius: 8,
                  }}>
                  <View
                    style={{
                      flexDirection: 'row',
                      paddingVertical: 5,
                      paddingHorizontal: 5,
                    }}>
                    <View
                      style={{
                        flex: 1,
                        alignItems: 'center',
                        justifyContent: 'center',
                        minHeight: 30,
                      }}>
                      <Icon
                        size={30}
                        name={'dot-single'}
                        type={'entypo'}
                        color={'#9C9A9D'}
                        underlayColor="rgba(255,255,255,0)"
                      />
                    </View>
                    <View
                      style={{
                        flex: 10,
                        alignItems: 'flex-start',
                        justifyContent: 'center',
                        minHeight: 30,
                      }}>
                      <Text
                        style={{
                          paddingLeft: 5,
                          fontSize: 15,
                          color: '#9C9A9D',
                        }}>
                        {item.description}
                      </Text>
                    </View>
                  </View>

                  {/* <FlatList
                    style={{width: '100%'}}
                    keyboardShouldPersistTaps={'always'}
                    showsVerticalScrollIndicator={false}
                    contentContainerStyle={{
                      width: '100%',
                    }}
                    data={item.description}
                    keyExtractor={(item, index) => String(index)}
                    renderItem={({item, index, separators}) => (
                      <View style={{flexDirection: 'row', paddingVertical: 5,paddingHorizontal:5}}>
                        <View
                          style={{
                            flex: 1,
                            alignItems: 'flex-start',
                            justifyContent: 'center',
                          }}>
                          <Icon
                            size={30}
                            name={'dot-single'}
                            type={'entypo'}
                            color={'#9C9A9D'}
                            underlayColor="rgba(255,255,255,0)"
                          />
                        </View>
                        <View
                          style={{
                            flex: 10,
                            alignItems: 'flex-start',
                            justifyContent: 'center',
                          }}>
                          <Text
                            style={{
                              paddingLeft: 5,
                              fontSize: 15,
                              color: '#9C9A9D',
                            }}>
                            {item.about}
                          </Text>
                        </View>
                      </View>
                    )}
                  /> */}
                </View>
              </View>
            )}
          />
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getKsebPaymentPage() {
    const {
      kseb_boxDimension,
      kseb_showPassword,
      kseb_Name,
      kseb_consumerId,
      kseb_mobileNumber,
      kseb_dueDate,
      kseb_billNumber,
      kseb_amount,
      kseb_place,
      kseb_date,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              KSEB Payment
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                if (this.state.kseb_amount_loading == false) {
                  Keyboard.dismiss();

                  let kseb_mobileNum = kseb_mobileNumber.toString();

                  this.setState({buttonLoading: true}, () => {
                    if (
                      //kseb_Name !== "" &&
                      kseb_consumerId !== '' &&
                      // kseb_mobileNum.length == 10 &&
                      //kseb_billNumber !== "" &&
                      kseb_amount !== '0'
                      // && kseb_place !== ""
                    ) {
                      ksebRequest_billPayment({
                        // kseb_date,
                        //  kseb_Name,
                        kseb_consumerId,
                        // kseb_mobileNum,
                        // kseb_dueDate,
                        // kseb_billNumber,
                        kseb_amount,
                        //kseb_place,
                      })
                        .then((result) => {
                          if (result.data && result.data.response == true) {
                            console.log(
                              result.data,
                              'kseb bill payment done successfully',
                            );
                            this.setState(
                              {
                                kseb_dueDate: kseb_date,
                                kseb_Name: '',
                                kseb_consumerId: '',
                                kseb_mobileNumber: '',
                                kseb_billNumber: '',
                                kseb_amount: '0',
                                kseb_place: '',
                                kseb_serviceCharge: 0,
                              },
                              () => {
                                this.successAwesomeAlertMessage(
                                  result.data.message &&
                                    result.data.message == ''
                                    ? result.data.message
                                    : 'kseb bill payment done successfully',
                                  0,
                                );
                                //kseb back if needed
                              },
                            );
                          } else if (
                            result.data &&
                            result.data.response == false
                          ) {
                            this.setState({buttonLoading: false});
                            if (
                              result.data.message &&
                              result.data.message !== ''
                            ) {
                              this.errorAwesomeAlertMessage(
                                result.data.message,
                                0,
                              );
                            } else {
                              this.errorAwesomeAlertMessage(
                                'Something went wrong',
                                0,
                              );
                            }
                          }
                          this.setState({buttonLoading: false}, () => {
                            if (
                              result.data &&
                              result.data.response &&
                              result.data.response == true
                            ) {
                              //this.handleBackButtonClick();
                            }
                          });
                        })
                        .catch((err) => {
                          this.setState({buttonLoading: false}, () => {});
                          this.generalAwesomeAlertMessage(
                            'Something went wrong',
                          );
                          console.log('Error', err.response);
                        });
                    } else {
                      this.setState({buttonLoading: false}, () => {
                        // if (kseb_Name == "") {
                        //   alert("Please enter a name");
                        // } else
                        if (kseb_consumerId == '') {
                          this.generalAwesomeAlertMessage(
                            'Please enter a consumer number',
                          );
                        }
                        //  else if (kseb_mobileNum.length < 10) {
                        //   alert("Please enter valid mobile number");
                        // } else if (kseb_billNumber == "") {
                        //   alert("Please enter  bill number");
                        // } else if (kseb_place == "") {
                        //   this.generalAwesomeAlertMessage("Please enter a place");
                        // }
                        else if (kseb_amount == '0') {
                          this.generalAwesomeAlertMessage(
                            'Please enter valid Consumer number',
                          );
                        }
                      });
                    }
                  });

                  // this.setState({ settingsLoading: true }, () => {
                  //   if (
                  //     this.state.name !== "" &&
                  //     this.state.mobile.length==10
                  //   ) {
                  //     stepOne({
                  //       name:this.state.name,mobile:this.state.mobile
                  //     })
                  //       .then(result => {
                  //         this.setState({ settingsLoading: false });

                  //         if (result.data.success==true) {
                  //           console.log(result.data, "result add/edit beneficiary");
                  //           aceAlert('Wallet Request done successfully\nPending approval')
                  //           NavigatorService.pop()
                  //         }
                  //         else{
                  //           aceAlert('Wallet Request failed\nPlease enter correct details')
                  //         }
                  //       })
                  //       .catch(err => {
                  //         this.setState({ settingsLoading: false }, () => {});

                  //         console.log("Error", err.response);
                  //       });
                  //   } else {
                  //     this.setState({ settingsLoading: false }, () => {
                  //       if (this.state.name == "") {
                  //         alert("Please enter name");
                  //       } else if (this.state.mobile<10) {
                  //         alert("Please enter mobile number");
                  //       }
                  //     });
                  //   }
                  // });
                } else {
                  // Mahagram.Toast("Fetching amount from server");
                }
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Date'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter benefiary name'}
              value={moment().format('DD-MM-YYYY')}
              editable={false}
              //onChangeText={text => this.setState({ Beneficiaryname: text })}
            />
            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Name"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter name"}
              value={this.state.kseb_Name}
              onChangeText={(text) => this.setState({ kseb_Name: text })}
            /> */}
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                justifyContent: 'center',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              maxLength={13}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Consumer No'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter consumer no'}
              value={this.state.kseb_consumerId}
              onChangeText={(text) => {
                if (this.state.kseb_consumerId.toString().length <= 13) {
                  this.setState(
                    {kseb_consumerId: text, kseb_amount: '0'},
                    () => {
                      // this.doFetchAmount(this.state.kseb_consumerId, 'kseb');
                    },
                  );
                }
              }}
              rightIcon={this.getActivityShow(this.state.kseb_amount_loading)}
            />
            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              keyboardType={"numeric"}
              label={"Mobile Number"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter mobile number"}
              value={this.state.kseb_mobileNumber}
              maxLength={10}
              onChangeText={(text) =>
                this.setState({ kseb_mobileNumber: text })
              }
            /> */}
            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              keyboardType={"numeric"}
              label={"Bill Number"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter bill number"}
              value={this.state.kseb_billNumber}
              onChangeText={(text) => this.setState({ kseb_billNumber: text })}
            /> */}

            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Place"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter place"}
              value={this.state.kseb_place}
              onChangeText={(text) => this.setState({ kseb_place: text })}
            /> */}
            {/* <Input
              editable={false}
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                // marginTop: 5
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Due Date"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter due date"}
              value={this.state.kseb_dueDate}
              rightIcon={
                <Icon
                  color="#444"
                  size={20}
                  type="entypo"
                  underlayColor="rgba(255,255,255,0)"
                  name={"calendar"}
                  //name={'eye'}
                  onPress={() =>
                    this.setState({
                      kseb_changeDateOfPayment: !this.state
                        .kseb_changeDateOfPayment,
                    })
                  }
                />
              }
              //onChangeText={text => this.setState({ DateofPayment: text })}
            />
            {this.state.kseb_changeDateOfPayment && (
              <DatePicker
                style={{ backgroundColor: "#fff", width: "100%" }}
                mode="date"
                format="DD-MM-YYYY"
                minimumDate={
                  new Date(
                    parseInt(
                      moment()
                        .format("DD-MM-YYYY")
                        .split("-")[2]
                    ),
                    parseInt(
                      moment()
                        .format("DD-MM-YYYY")
                        .split("-")[1]
                    ) - 1,
                    parseInt(
                      moment()
                        .format("DD-MM-YYYY")
                        .split("-")[0]
                    )
                  )
                }
                date={this.state.kseb_dueDate}
                value={
                  new Date(
                    parseInt(this.state.kseb_dueDate.split("-")[2]),
                    parseInt(this.state.kseb_dueDate.split("-")[1]) - 1,
                    parseInt(this.state.kseb_dueDate.split("-")[0])
                  )
                }
                confirmBtnText={"Confirm"}
                cancelBtnText={"Cancel"}
                showIcon={false}
                onChange={(event, date) => {
                  this.setState({
                    kseb_dueDate: moment(date).format("DD-MM-YYYY"),

                    kseb_changeDateOfPayment: false,
                  });
                }}
                customStyles={{
                  dateInput: {
                    borderWidth: 0,
                    alignItems: "flex-start",
                    //marginLeft: 10,
                  },
                  dateText: {
                    color: "#000",
                    fontSize: 18,
                  },
                  disabled: {
                    backgroundColor: "#ffff",
                  },
                }}
              />
            )} */}
            <View
              style={{
                marginBottom: 25,
                width: '100%',
                alignItems: 'flex-start',
                justifyContent: 'center',
                paddingHorizontal: 10,
              }}>
              <TouchableOpacity
                onPress={() => {
                  if (this.state.kseb_consumerId.toString().length == 13) {
                    this.doFetchAmount(this.state.kseb_consumerId, 'kseb');
                  } else {
                    this.generalAwesomeAlertMessage(
                      'Please enter valid consumer number',
                    );
                  }
                }}
                style={{
                  padding: 7,
                  backgroundColor: '#00BC86',
                  borderRadius: 6,
                  flexDirection: 'row',
                  alignSelf: 'flex-start',
                }}>
                <View style={{justifyContent: 'center', alignItems: 'center'}}>
                  <Icon
                    color="#fff"
                    size={20}
                    type="material-community"
                    name={'cloud-download'}
                    //name={'eye'}
                  />
                </View>
                <Text
                  style={{
                    fontSize: 16,
                    paddingLeft: 7,
                    paddingRight: 10,
                    color: '#fff',
                    fontWeight: 'bold',
                  }}>
                  Get Amount
                </Text>
              </TouchableOpacity>
            </View>
            <Input
              editable={false}
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderBottomWidth: 0,
                //borderRadius: 3,
                // borderColor: '#c0c0c8',
                // marginLeft: 1,
              }}
              containerStyle={{
                width: '90%',
                paddingHorizontal: 0,
                // marginTop: 5
              }}
              inputStyle={{fontSize: 35, fontWeight: 'bold'}}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Amount'}
              labelStyle={{
                color: '#002b36',
                fontSize: 18,
                marginBottom: -10,
                marginLeft: 0,
              }}
              leftIcon={
                <Icon
                  name="rupee"
                  type={'font-awesome'}
                  size={22}
                  color="#000"
                />
              }
              placeholderTextColor={'grey'}
              placeholder={'Amount'}
              value={this.state.kseb_amount
                .toString()
                .replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,')}
              //onChangeText={(text) => this.setState({ kseb_amount: text })}
            />

            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft:1
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                marginTop:20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Service Charge"}
              labelStyle={{ color: "#002b36", fontSize: 14, marginBottom: 10 ,marginLeft:0}}
              placeholderTextColor={"grey"}
              placeholder={"Enter service charge"}
              value={this.state.serviceCharge}
              
              onChangeText={text => this.setState({ serviceCharge: text })}
              
            /> */}
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getUpdateKYCPage() {
    let {
      kyc_update_name,
      kyc_update_mobileno,
      kyc_update_address,
      kyc_update_proof_type_list,
      kyc_update_proof_type_selected_value,
      kyc_update_id_proof_value,
      kyc_update_document_file,
      kyc_update_document_file_status,
    } = this.state;

    var radio_props = [
      {label: 'Yes', value: 1},
      {label: 'No', value: 0},
    ];

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Update KYC
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();

                this.setState({buttonLoading: true}, () => {
                  if (
                    kyc_update_name != '' &&
                    kyc_update_mobileno.length == 10 &&
                    kyc_update_address != '' &&
                    // kyc_update_id_proof_value != '' &&
                    kyc_update_document_file_status == true
                  ) {
                    updateKYCDetails({
                      kyc_update_name,
                      kyc_update_mobileno,
                      kyc_update_address,
                      kyc_update_document_file,
                      kyc_update_proof_type_selected_value,
                      // kyc_update_id_proof_value,
                    })
                      .then((result) => {
                        if (result.data && result.data.success == true) {
                          console.log(result.data, 'kyct done successfully');
                          this.setState(
                            {
                              kyc_update_name: '',
                              kyc_update_mobileno: '',
                              kyc_update_address: '',

                              kyc_update_proof_type_selected_value: 'License',
                              kyc_update_id_proof_value: '',
                              kyc_update_document_file: {},
                              kyc_update_document_file_status: false,
                            },
                            () => {
                              this.successAwesomeAlertMessage(
                                'Update KYC request is successful\nPending Approval',
                                0,
                              );

                              //kseb back if needed
                            },
                          );
                          this.setState({buttonLoading: false});
                        } else if (
                          result.data &&
                          result.data.success == false
                        ) {
                          this.setState({buttonLoading: false});

                          this.errorAwesomeAlertMessage(
                            result.data.message
                              ? result.data.message
                              : 'Something went wrong',
                            0,
                          );
                        }
                      })
                      .catch((err) => {
                        this.setState({buttonLoading: false}, () => {});

                        this.errorAwesomeAlertMessage(
                          'Something went wrong',
                          0,
                        );
                        console.log('Error', err);
                      });
                  } else {
                    this.setState({buttonLoading: false}, () => {
                      if (kyc_update_name == '') {
                        this.generalAwesomeAlertMessage('Please enter name');
                      } else if (kyc_update_mobileno.length < 10) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid mobile number',
                        );
                      } else if (kyc_update_address == '') {
                        this.generalAwesomeAlertMessage('Please enter address');
                      }
                      // else if (kyc_update_id_proof_value == '') {
                      //   this.generalAwesomeAlertMessage(
                      //     'Please enter id proof',
                      //   );
                      // }
                      else if (kyc_update_document_file_status == false) {
                        this.generalAwesomeAlertMessage(
                          'Please add KYC document image',
                        );
                      }
                    });
                  }
                });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                alignItems: 'flex-start',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              inputStyle={{overflow: 'hidden'}}
              autoCorrect={false}
              //keyboardType={'numeric'}

              label={'Name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter name'}
              value={this.state.kyc_update_name}
              onChangeText={(text) => this.setState({kyc_update_name: text})}
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              maxLength={10}
              label={'Mobile No'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter mobile number'}
              value={this.state.kyc_update_mobileno}
              onChangeText={(text) =>
                this.setState({kyc_update_mobileno: text})
              }
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              numberOfLines={4}
              autoCorrect={false}
              multiline={true}
              //keyboardType={'numeric'}
              label={'Address'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter address'}
              value={this.state.kyc_update_address}
              onChangeText={(text) => this.setState({kyc_update_address: text})}
            />
            <View
              style={{
                height: 100,
                width: '95%',
                alignItems: 'flex-start',
                marginTop: 5,
                marginBottom: 10,
              }}>
              <Text
                style={{fontSize: 14, fontWeight: 'bold', marginBottom: 11}}>
                Proof Type
              </Text>
              <ModalSelectorInput
                containerStyle={{
                  borderWidth: 1,
                  borderRadius: 3,
                  height: '52%',
                  borderColor: '#c0c0c8',
                }}
                activiy={this.state.mobile_providerListActivity}
                data={this.state.kyc_update_proof_type_list}
                editable={true}
                value={this.state.kyc_update_proof_type_selected_value}
                placeholder={'Select Type'}
                keyboardOpen={this.state.keyboardOpen}
                onItemSelect={(value) => {
                  this.setState({
                    kyc_update_proof_type_selected_value: value.name,
                  });
                }}
              />
            </View>
            {/* <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              label={'ID Proof'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter id proof'}
              value={this.state.kyc_update_id_proof_value}
              onChangeText={(text) =>
                this.setState({kyc_update_id_proof_value: text})
              }
            /> */}
            {/*            

            <TouchableOpacity
              style={{
                paddingHorizontal: 15,
                //borderWidth: 1,
                borderBottomWidth: 0,
                // borderColor: '#c0c0c8',
                marginTop: 10,
                justifyContent: 'center',
                alignItems: 'center',
                backgroundColor: '#5CC8D8',
                height: 80,
                borderRadius: 8,
                width: '95%',
                flexDirection: 'row',
              }}
              onPress={() => {
                this.fileUploader('front_of_rc');
              }}>
              <View
                style={{
                  flex: 1.2,
                  height: '100%',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}>
                <Icon
                  name={
                    this.state.fastag_newfastag_front_of_rc_file_status == true
                      ? 'cloud-check'
                      : 'cloud-upload'
                  }
                  type={'material-community'}
                  size={42}
                  color={'#fff'}
                />
              </View>
              <View
                style={{
                  flex: 6,
                  height: '100%',
                  alignItems: 'center',
                  justifyContent: 'center',
                  paddingHorizontal: 15,
                  paddingVertical: 5,
                }}>
                <View
                  style={{
                    flex: 2.4,
                    width: '100%',
                    alignItems: 'flex-start',
                    justifyContent: 'flex-end',
                  }}>
                  <Text style={{fontSize: 22, color: '#fff'}}>Front Of RC</Text>
                </View>

                <View
                  style={{
                    flex: 2,
                    width: '100%',
                    alignItems: 'flex-start',
                    justifyContent: 'flex-start',
                    paddingTop: 0.5,
                  }}>
                  <Text style={{fontSize: 13, color: '#fff'}}>
                    {'Maximum upload file size: 500 KB'}
                  </Text>
                </View>
              </View>
            </TouchableOpacity> */}

            <TouchableOpacity
              style={{
                paddingHorizontal: 15,
                //borderWidth: 1,
                borderBottomWidth: 0,
                // borderColor: '#c0c0c8',
                marginTop: 10,
                justifyContent: 'center',
                alignItems: 'center',
                backgroundColor: '#5CC8D8',
                height: 80,
                borderRadius: 8,
                width: '95%',
                flexDirection: 'row',
              }}
              onPress={() => {
                this.fileUploader('kyc_update_document');
              }}>
              <View
                style={{
                  flex: 1.2,
                  height: '100%',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}>
                <Icon
                  name={
                    this.state.kyc_update_document_file_status == true
                      ? 'cloud-check'
                      : 'cloud-upload'
                  }
                  type={'material-community'}
                  size={42}
                  color={'#fff'}
                />
              </View>
              <View
                style={{
                  flex: 6,
                  height: '100%',
                  alignItems: 'center',
                  justifyContent: 'center',
                  paddingHorizontal: 15,
                  paddingVertical: 5,
                }}>
                <View
                  style={{
                    flex: 2.4,
                    width: '100%',
                    alignItems: 'flex-start',
                    justifyContent: 'flex-end',
                  }}>
                  <Text style={{fontSize: 22, color: '#fff'}}>
                    KYC Document
                  </Text>
                </View>

                <View
                  style={{
                    flex: 2,
                    width: '100%',
                    alignItems: 'flex-start',
                    justifyContent: 'flex-start',
                    paddingTop: 0.5,
                  }}>
                  <Text style={{fontSize: 13, color: '#fff'}}>
                    {'Maximum upload file size: 500 KB'}
                  </Text>
                </View>
              </View>
            </TouchableOpacity>
            {/* <TouchableOpacity
              style={{
                paddingHorizontal: 15,
                //borderWidth: 1,
                borderBottomWidth: 0,
                // borderColor: '#c0c0c8',
                marginTop: 10,
                justifyContent: 'center',
                alignItems: 'center',
                backgroundColor: '#5CC8D8',
                height: 80,
                borderRadius: 8,
                width: '95%',
                flexDirection: 'row',
              }}
              onPress={() => {
                this.fileUploader('fastag_photo');
              }}>
              <View
                style={{
                  flex: 1.2,
                  height: '100%',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}>
                <Icon
                  name={
                    this.state.fastag_newfastag_fastag_photo_file_status == true
                      ? 'cloud-check'
                      : 'cloud-upload'
                  }
                  type={'material-community'}
                  size={42}
                  color={'#fff'}
                />
              </View>
              <View
                style={{
                  flex: 6,
                  height: '100%',
                  alignItems: 'center',
                  justifyContent: 'center',
                  paddingHorizontal: 15,
                  paddingVertical: 5,
                }}>
                <View
                  style={{
                    flex: 2.4,
                    width: '100%',
                    alignItems: 'flex-start',
                    justifyContent: 'flex-end',
                  }}>
                  <Text style={{fontSize: 22, color: '#fff'}}>
                    Fastag Photo (if any)
                  </Text>
                </View>

                <View
                  style={{
                    flex: 2,
                    width: '100%',
                    alignItems: 'flex-start',
                    justifyContent: 'flex-start',
                    paddingTop: 0.5,
                  }}>
                  <Text style={{fontSize: 13, color: '#fff'}}>
                    {'Maximum upload file size: 500 KB'}
                  </Text>
                </View>
              </View>
            </TouchableOpacity> */}
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getNewFastagPaymentPage() {
    let {
      fastag_newfastag_applyfor,
      fastag_newfastag_amount,
      fastag_newfastag_service_charge,
      fastag_newfastag_vehicle_class,
      fastag_newfastag_vehicle_number,
      fastag_newfastag_name,
      fastag_newfastag_mobile_number,
      fastag_newfastag_address,
      fastag_newfastag_fastag_number,
      fastag_newfastag_paytm_mobile_number,
      fastag_newfastag_commercial_type,
      fastag_newfastag_back_of_rc_file,
      fastag_newfastag_back_of_rc_file_status,
      fastag_newfastag_fastag_photo_file,
      fastag_newfastag_fastag_photo_file_status,
      fastag_newfastag_front_of_rc_file,
      fastag_newfastag_front_of_rc_file_status,
    } = this.state;

    var radio_props = [
      {label: 'Yes', value: 1},
      {label: 'No', value: 0},
    ];

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              New Fastag
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();

                this.setState({buttonLoading: true}, () => {
                  if (
                    fastag_newfastag_applyfor != '' &&
                    fastag_newfastag_amount > 0 &&
                    fastag_newfastag_service_charge > 0 &&
                    fastag_newfastag_vehicle_number != '' &&
                    fastag_newfastag_name != '' &&
                    fastag_newfastag_mobile_number.length == 10 &&
                    fastag_newfastag_address != '' &&
                    // fastag_newfastag_fastag_number!=''&&
                    fastag_newfastag_paytm_mobile_number.length == 10 &&
                    fastag_newfastag_back_of_rc_file_status == true &&
                    fastag_newfastag_front_of_rc_file_status == true
                  ) {
                    newFastag_Fastag({
                      fastag_newfastag_applyfor,
                      fastag_newfastag_amount,
                      fastag_newfastag_service_charge,
                      fastag_newfastag_vehicle_class,
                      fastag_newfastag_vehicle_number,
                      fastag_newfastag_name,
                      fastag_newfastag_mobile_number,
                      fastag_newfastag_address,
                      fastag_newfastag_fastag_number,
                      fastag_newfastag_paytm_mobile_number,
                      fastag_newfastag_commercial_type,
                      fastag_newfastag_fastag_photo_file,
                      fastag_newfastag_front_of_rc_file,
                      fastag_newfastag_back_of_rc_file,
                    })
                      .then((result) => {
                        if (result.data && result.data.success == true) {
                          console.log(
                            result.data,
                            'kseb bill payment done successfully',
                          );
                          this.setState(
                            {
                              fastag_newfastag_applyfor: '',
                              fastag_newfastag_amount: 0,
                              fastag_newfastag_service_charge: 0,
                              fastag_newfastag_vehicle_class: '',
                              fastag_newfastag_vehicle_number: '',
                              fastag_newfastag_name: '',
                              fastag_newfastag_mobile_number: '',
                              fastag_newfastag_address: '',
                              fastag_newfastag_fastag_number: '',
                              fastag_newfastag_paytm_mobile_number: '',
                              fastag_newfastag_commercial_type: 1,
                              fastag_newfastag_front_of_rc_file: {},
                              fastag_newfastag_front_of_rc_file_status: false,
                              fastag_newfastag_back_of_rc_file: {},
                              fastag_newfastag_back_of_rc_file_status: false,
                              fastag_newfastag_fastag_photo_file: null,
                              fastag_newfastag_fastag_photo_file_status: false,
                            },
                            () => {
                              this.successAwesomeAlertMessage(
                                'New Fastag request is successful\nPending Approval',
                                0,
                              );

                              //kseb back if needed
                            },
                          );
                          this.setState({buttonLoading: false});
                        } else if (
                          result.data &&
                          result.data.success == false
                        ) {
                          this.setState({buttonLoading: false});

                          this.errorAwesomeAlertMessage(
                            result.data.message
                              ? result.data.message
                              : 'Something went wrong',
                            0,
                          );
                        }
                      })
                      .catch((err) => {
                        this.setState({buttonLoading: false}, () => {});

                        this.errorAwesomeAlertMessage(
                          'Something went wrong',
                          0,
                        );
                        console.log('Error', err);
                      });
                  } else {
                    this.setState({buttonLoading: false}, () => {
                      if (fastag_newfastag_applyfor == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid apply for',
                        );
                      } else if (fastag_newfastag_amount == 0) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid amount',
                        );
                      } else if (fastag_newfastag_service_charge == 0) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid service charge',
                        );
                      } else if (fastag_newfastag_vehicle_number == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter a vehicle number',
                        );
                      } else if (fastag_newfastag_name == '') {
                        this.generalAwesomeAlertMessage('Please enter name');
                      } else if (fastag_newfastag_mobile_number.length < 10) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid mobile number',
                        );
                      } else if (fastag_newfastag_address == '') {
                        this.generalAwesomeAlertMessage('Please enter address');
                      }
                      // else if (fastag_newfastag_fastag_number == '') {
                      //   this.generalAwesomeAlertMessage(
                      //     'Please enter fastag number',
                      //   );
                      // }
                      else if (
                        fastag_newfastag_paytm_mobile_number.length < 10
                      ) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid paytm mobile number',
                        );
                      } else if (
                        fastag_newfastag_front_of_rc_file_status == false
                      ) {
                        this.generalAwesomeAlertMessage(
                          'Please add front of RC image',
                        );
                      } else if (fastag_newfastag_back_of_rc_file == '') {
                        this.generalAwesomeAlertMessage(
                          'Please add back of RC image',
                        );
                      }
                    });
                  }
                });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              editable={false}
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                alignItems: 'flex-start',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              maxLength={40}
              inputStyle={{overflow: 'hidden'}}
              autoCorrect={false}
              //keyboardType={'numeric'}

              label={'Apply For'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter apply for'}
              value={this.state.fastag_newfastag_applyfor}
              onChangeText={(text) =>
                this.setState({fastag_newfastag_applyfor: text})
              }
            />
            <Input
              editable={false}
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Enter Amount'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter amount'}
              value={this.state.fastag_newfastag_amount}
              onChangeText={(text) =>
                this.setState({fastag_newfastag_amount: text})
              }
            />
            <Input
              editable={false}
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Service Charge'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter service charge'}
              value={this.state.fastag_newfastag_service_charge}
              onChangeText={(text) =>
                this.setState({fastag_newfastag_service_charge: text})
              }
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              label={'Vehicle Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter vehicle number'}
              value={this.state.fastag_newfastag_vehicle_number}
              onChangeText={(text) =>
                this.setState({fastag_newfastag_vehicle_number: text})
              }
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              label={'Name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter name'}
              value={this.state.fastag_newfastag_name}
              onChangeText={(text) =>
                this.setState({fastag_newfastag_name: text})
              }
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              maxLength={10}
              label={'Mobile Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter mobile number'}
              value={this.state.fastag_newfastag_mobile_number}
              onChangeText={(text) =>
                this.setState({fastag_newfastag_mobile_number: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              multiline={true}
              numberOfLines={4}
              label={'Address'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter address'}
              value={this.state.fastag_newfastag_address}
              onChangeText={(text) =>
                this.setState({fastag_newfastag_address: text})
              }
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              label={'Fastag Number (Not mandatory)'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter fastag no'}
              value={this.state.fastag_newfastag_fastag_number}
              onChangeText={(text) =>
                this.setState({fastag_newfastag_fastag_number: text})
              }
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              maxLength={10}
              label={'Paytm Mobile Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter paytm mobile number'}
              value={this.state.fastag_newfastag_paytm_mobile_number}
              onChangeText={(text) =>
                this.setState({fastag_newfastag_paytm_mobile_number: text})
              }
            />
            <View
              style={{
                alignItems: 'flex-start',
                width: '100%',
                paddingHorizontal: 15,
                marginTop: 5,
              }}>
              <Text
                style={{fontSize: 14, fontWeight: 'bold', marginBottom: 11}}>
                Commercial Type
              </Text>
            </View>
            <View
              style={{
                alignItems: 'flex-start',
                width: '100%',
                paddingHorizontal: 15,
                marginTop: 0,
                marginBottom: 25,
              }}>
              <RadioForm
                labelStyle={{fontSize: 17, fontWeight: 'bold'}}
                labelColor={'#00000090'}
                style={{fontSize: 50}}
                radio_props={radio_props}
                initial={0}
                onPress={(value) => {
                  this.setState({
                    fastag_newfastag_commercial_type: value,
                  });
                }}
              />
            </View>

            <TouchableOpacity
              style={{
                paddingHorizontal: 15,
                //borderWidth: 1,
                borderBottomWidth: 0,
                // borderColor: '#c0c0c8',
                marginTop: 10,
                justifyContent: 'center',
                alignItems: 'center',
                backgroundColor: '#5CC8D8',
                height: 80,
                borderRadius: 8,
                width: '95%',
                flexDirection: 'row',
              }}
              onPress={() => {
                this.fileUploader('front_of_rc');
              }}>
              <View
                style={{
                  flex: 1.2,
                  height: '100%',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}>
                <Icon
                  name={
                    this.state.fastag_newfastag_front_of_rc_file_status == true
                      ? 'cloud-check'
                      : 'cloud-upload'
                  }
                  type={'material-community'}
                  size={42}
                  color={'#fff'}
                />
              </View>
              <View
                style={{
                  flex: 6,
                  height: '100%',
                  alignItems: 'center',
                  justifyContent: 'center',
                  paddingHorizontal: 15,
                  paddingVertical: 5,
                }}>
                <View
                  style={{
                    flex: 2.4,
                    width: '100%',
                    alignItems: 'flex-start',
                    justifyContent: 'flex-end',
                  }}>
                  <Text style={{fontSize: 22, color: '#fff'}}>Front Of RC</Text>
                </View>

                <View
                  style={{
                    flex: 2,
                    width: '100%',
                    alignItems: 'flex-start',
                    justifyContent: 'flex-start',
                    paddingTop: 0.5,
                  }}>
                  <Text style={{fontSize: 13, color: '#fff'}}>
                    {'Maximum upload file size: 500 KB'}
                  </Text>
                </View>
              </View>
            </TouchableOpacity>
            <TouchableOpacity
              style={{
                paddingHorizontal: 15,
                //borderWidth: 1,
                borderBottomWidth: 0,
                // borderColor: '#c0c0c8',
                marginTop: 10,
                justifyContent: 'center',
                alignItems: 'center',
                backgroundColor: '#5CC8D8',
                height: 80,
                borderRadius: 8,
                width: '95%',
                flexDirection: 'row',
              }}
              onPress={() => {
                this.fileUploader('back_of_rc');
              }}>
              <View
                style={{
                  flex: 1.2,
                  height: '100%',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}>
                <Icon
                  name={
                    this.state.fastag_newfastag_back_of_rc_file_status == true
                      ? 'cloud-check'
                      : 'cloud-upload'
                  }
                  type={'material-community'}
                  size={42}
                  color={'#fff'}
                />
              </View>
              <View
                style={{
                  flex: 6,
                  height: '100%',
                  alignItems: 'center',
                  justifyContent: 'center',
                  paddingHorizontal: 15,
                  paddingVertical: 5,
                }}>
                <View
                  style={{
                    flex: 2.4,
                    width: '100%',
                    alignItems: 'flex-start',
                    justifyContent: 'flex-end',
                  }}>
                  <Text style={{fontSize: 22, color: '#fff'}}>Back Of RC</Text>
                </View>

                <View
                  style={{
                    flex: 2,
                    width: '100%',
                    alignItems: 'flex-start',
                    justifyContent: 'flex-start',
                    paddingTop: 0.5,
                  }}>
                  <Text style={{fontSize: 13, color: '#fff'}}>
                    {'Maximum upload file size: 500 KB'}
                  </Text>
                </View>
              </View>
            </TouchableOpacity>
            <TouchableOpacity
              style={{
                paddingHorizontal: 15,
                //borderWidth: 1,
                borderBottomWidth: 0,
                // borderColor: '#c0c0c8',
                marginTop: 10,
                justifyContent: 'center',
                alignItems: 'center',
                backgroundColor: '#5CC8D8',
                height: 80,
                borderRadius: 8,
                width: '95%',
                flexDirection: 'row',
              }}
              onPress={() => {
                this.fileUploader('fastag_photo');
              }}>
              <View
                style={{
                  flex: 1.2,
                  height: '100%',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}>
                <Icon
                  name={
                    this.state.fastag_newfastag_fastag_photo_file_status == true
                      ? 'cloud-check'
                      : 'cloud-upload'
                  }
                  type={'material-community'}
                  size={42}
                  color={'#fff'}
                />
              </View>
              <View
                style={{
                  flex: 6,
                  height: '100%',
                  alignItems: 'center',
                  justifyContent: 'center',
                  paddingHorizontal: 15,
                  paddingVertical: 5,
                }}>
                <View
                  style={{
                    flex: 2.4,
                    width: '100%',
                    alignItems: 'flex-start',
                    justifyContent: 'flex-end',
                  }}>
                  <Text style={{fontSize: 22, color: '#fff'}}>
                    Fastag Photo (if any)
                  </Text>
                </View>

                <View
                  style={{
                    flex: 2,
                    width: '100%',
                    alignItems: 'flex-start',
                    justifyContent: 'flex-start',
                    paddingTop: 0.5,
                  }}>
                  <Text style={{fontSize: 13, color: '#fff'}}>
                    {'Maximum upload file size: 500 KB'}
                  </Text>
                </View>
              </View>
            </TouchableOpacity>
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getFastagRechargeIciciPage() {
    let {
      fastag_fastag_recharge_icici_name,
      fastag_fastag_recharge_icici_mobile_number,
      fastag_fastag_recharge_icici_vehicle_number,
      fastag_fastag_recharge_icici_bill_number,
      fastag_fastag_recharge_icici_vehicle_category_list,
      fastag_fastag_recharge_icici_vehicle_category_id,
      fastag_fastag_recharge_icici_vehicle_category_fetch,
      fastag_fastag_recharge_icici_vehicle_category_fetch_temp,
      fastag_fastag_recharge_icici_vehicle_category_name,
      fastag_fastag_recharge_icici_vehicle_category_id_temp,
      fastag_fastag_recharge_icici_vehicle_category_name_temp,
      fastag_fastag_recharge_icici_amount,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Fastag Recharge
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                if (this.state.fastag_icici_amount_loading == false) {
                  Keyboard.dismiss();

                  this.setState({buttonLoading: true}, () => {
                    if (
                      fastag_fastag_recharge_icici_name !== '' &&
                      fastag_fastag_recharge_icici_mobile_number.length == 10 &&
                      fastag_fastag_recharge_icici_vehicle_number !== '' &&
                      // fastag_fastag_recharge_icici_bill_number !== '' &&
                      fastag_fastag_recharge_icici_vehicle_category_name !==
                        '' &&
                      fastag_fastag_recharge_icici_amount !== '0'
                    ) {
                      fastag_icici_billPayment({
                        name: fastag_fastag_recharge_icici_name,
                        mobileno: fastag_fastag_recharge_icici_mobile_number,
                        vehicleno: fastag_fastag_recharge_icici_vehicle_number,
                        amount: fastag_fastag_recharge_icici_amount,
                        biller_category: fastag_fastag_recharge_icici_vehicle_category_id,
                      })
                        .then((result) => {
                          if (result.data && result.data.response == true) {
                            console.log(
                              result.data,
                              'fastag payment done successfully',
                            );
                            this.setState(
                              {
                                fastag_fastag_recharge_icici_name: '',
                                fastag_fastag_recharge_icici_mobile_number: '',
                                fastag_fastag_recharge_icici_vehicle_number: '',
                                fastag_fastag_recharge_icici_bill_number: '',
                                fastag_fastag_recharge_icici_vehicle_category_list: [],
                                fastag_fastag_recharge_icici_vehicle_category_id: 0,
                                fastag_fastag_recharge_icici_vehicle_category_fetch: false,
                                fastag_fastag_recharge_icici_vehicle_category_fetch_temp: false,
                                fastag_fastag_recharge_icici_vehicle_category_name:
                                  '',
                                fastag_fastag_recharge_icici_vehicle_category_id_temp: 0,
                                fastag_fastag_recharge_icici_vehicle_category_name_temp:
                                  '',
                                fastag_fastag_recharge_icici_amount: 0,
                                fastag_icici_amount_loading: false,
                                buttonLoading: false,
                              },
                              () => {
                                this.successAwesomeAlertMessage(
                                  result.data.message &&
                                    result.data.message == ''
                                    ? result.data.message
                                    : 'Fastag payment done successfully',
                                  0,
                                );
                              },
                            );
                          } else if (
                            result.data &&
                            result.data.response == false
                          ) {
                            this.setState({buttonLoading: false});
                            if (
                              result.data.message &&
                              result.data.message !== ''
                            ) {
                              this.errorAwesomeAlertMessage(
                                result.data.message &&
                                  result.data.message !== ''
                                  ? result.data.message
                                  : 'Something went wrong',
                                0,
                              );
                            } else {
                              this.errorAwesomeAlertMessage(
                                'Something went wrong',
                                0,
                              );
                            }
                          }
                          this.setState({buttonLoading: false}, () => {
                            if (
                              result.data &&
                              result.data.response &&
                              result.data.response == true
                            ) {
                              //this.handleBackButtonClick();
                            }
                          });
                        })
                        .catch((err) => {
                          this.setState({buttonLoading: false}, () => {});
                          this.errorAwesomeAlertMessage(
                            'Something went wrong',
                            0,
                          );
                          console.log('Error', err.response);
                        });
                    } else {
                      this.setState({buttonLoading: false}, () => {
                        // if (bsnl_Name == "") {
                        //   alert("Please enter a name");
                        // } else if (bsnl_mobileNum.length < 10) {
                        //   this.generalAwesomeAlertMessage("Please enter valid mobile number");
                        // } else if (bsnl_selectedOperator == "") {
                        //   alert("Please select an operator");
                        // } else

                        if (fastag_fastag_recharge_icici_name == '') {
                          this.generalAwesomeAlertMessage(
                            'Please enter your name',
                          );
                        } else if (
                          fastag_fastag_recharge_icici_mobile_number.length < 10
                        ) {
                          this.generalAwesomeAlertMessage(
                            'Please enter valid mobile number',
                          );
                        } else if (
                          fastag_fastag_recharge_icici_vehicle_number == ''
                        ) {
                          this.generalAwesomeAlertMessage(
                            'Please enter your vehicle number',
                          );
                        } else if (
                          fastag_fastag_recharge_icici_vehicle_category_name ==
                          ''
                        ) {
                          this.generalAwesomeAlertMessage(
                            'Please select valid category',
                          );
                        } else if (fastag_fastag_recharge_icici_amount == '0') {
                          this.generalAwesomeAlertMessage(
                            'Please enter valid amount',
                          );
                        }
                      });
                    }
                  });
                } else {
                  // Mahagram.Toast("Fetching amount from server");
                }
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              label={'Name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter name'}
              value={this.state.fastag_fastag_icici_recharge_name}
              onChangeText={(text) =>
                this.setState({fastag_fastag_recharge_icici_name: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              maxLength={10}
              label={'Mobile Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter mobile number'}
              value={this.state.fastag_fastag_recharge_icici_mobile_number}
              onChangeText={(text) =>
                this.setState({
                  fastag_fastag_recharge_icici_mobile_number: text,
                })
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              label={'Vehicle Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter vehicle no'}
              value={this.state.fastag_fastag_recharge_icici_vehicle_number}
              onChangeText={(text) =>
                this.setState({
                  fastag_fastag_recharge_icici_vehicle_number: text,
                })
              }
              rightIcon={this.getActivityShow(
                this.state.fastag_icici_amount_loading,
              )}
            />

            {/* <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              label={'Bill Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter bill no'}
              value={this.state.fastag_fastag_recharge_icici_bill_number}
              onChangeText={(text) =>
                this.setState({fastag_fastag_recharge_icici_bill_number: text})
              }
            /> */}

            <View
              style={{
                height: 100,
                width: '95%',
                alignItems: 'flex-start',
                marginTop: 10,
              }}>
              <Text
                style={{fontSize: 14, fontWeight: 'bold', marginBottom: 11}}>
                Category
              </Text>
              <ModalSelectorInput
                containerStyle={{
                  borderWidth: 1,
                  borderRadius: 3,
                  height: '52%',
                  borderColor: '#c0c0c8',
                }}
                activiy={this.state.mobile_regionListActivity}
                data={
                  this.state.fastag_fastag_recharge_icici_vehicle_category_list
                }
                editable={true}
                value={
                  this.state.fastag_fastag_recharge_icici_vehicle_category_name
                }
                placeholder={'Choose Option'}
                keyboardOpen={this.state.keyboardOpen}
                onItemSelect={(value) => {
                  this.setState({
                    fastag_fastag_recharge_icici_vehicle_category_name:
                      value.name,
                    fastag_fastag_recharge_icici_vehicle_category_id: value.id,
                    fastag_fastag_recharge_icici_vehicle_category_fetch:
                      value.fetch,
                  });
                }}
              />
            </View>
            {this.state.fastag_fastag_recharge_icici_vehicle_category_fetch ==
            false ? (
              <Input
                autoCapitalize={'none'}
                inputContainerStyle={{
                  paddingHorizontal: 7,
                  borderWidth: 1,
                  borderRadius: 3,
                  borderColor: '#c0c0c8',
                  marginLeft: 1,
                }}
                containerStyle={{
                  width: '95%',
                  paddingHorizontal: 0,
                  marginTop: 10,
                }}
                autoCorrect={false}
                keyboardType={'numeric'}
                label={'Amount'}
                labelStyle={{
                  color: '#002b36',
                  fontSize: 14,
                  marginBottom: 10,
                  marginLeft: 0,
                }}
                placeholderTextColor={'grey'}
                placeholder={'Enter amount'}
                value={this.state.fastag_fastag_recharge_icici_amount}
                onChangeText={(text) =>
                  this.setState({fastag_fastag_recharge_icici_amount: text})
                }
              />
            ) : (
              <View
                style={{
                  marginTop: 20,
                  width: '100%',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}>
                <View
                  style={{
                    marginBottom: 25,
                    width: '100%',
                    alignItems: 'flex-start',
                    justifyContent: 'center',
                    paddingHorizontal: 10,
                  }}>
                  <TouchableOpacity
                    onPress={() => {
                      if (
                        this.state.fastag_fastag_recharge_icici_vehicle_number.toString()
                          .length > 0 &&
                        this.state.fastag_fastag_recharge_icici_vehicle_category_name.toString()
                          .length > 0
                      ) {
                        this.doFetchAmount(
                          this.state
                            .fastag_fastag_recharge_icici_vehicle_number,
                          'fastag',
                        );
                      } else if (
                        this.state.fastag_fastag_recharge_icici_vehicle_number.toString()
                          .length == 0
                      ) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid vehicle number',
                        );
                      } else if (
                        this.state.fastag_fastag_recharge_icici_vehicle_category_name.toString()
                          .length == 0
                      ) {
                        this.generalAwesomeAlertMessage(
                          'Please select a category',
                        );
                      }
                    }}
                    style={{
                      padding: 7,
                      backgroundColor: '#00BC86',
                      borderRadius: 6,
                      flexDirection: 'row',
                      alignSelf: 'flex-start',
                    }}>
                    <View
                      style={{justifyContent: 'center', alignItems: 'center'}}>
                      <Icon
                        color="#fff"
                        size={20}
                        type="material-community"
                        name={'cloud-download'}
                        //name={'eye'}
                      />
                    </View>
                    <Text
                      style={{
                        fontSize: 16,
                        paddingLeft: 7,
                        paddingRight: 10,
                        color: '#fff',
                        fontWeight: 'bold',
                      }}>
                      Get Amount
                    </Text>
                  </TouchableOpacity>
                </View>
                <Input
                  editable={false}
                  autoCapitalize={'none'}
                  inputContainerStyle={{
                    paddingHorizontal: 10,
                    borderBottomWidth: 0,
                    //borderRadius: 3,
                    // borderColor: '#c0c0c8',
                    // marginLeft: 1,
                  }}
                  containerStyle={{
                    width: '90%',
                    paddingHorizontal: 0,
                    // marginTop: 5
                  }}
                  inputStyle={{fontSize: 35, fontWeight: 'bold'}}
                  autoCorrect={false}
                  keyboardType={'numeric'}
                  label={'Amount'}
                  labelStyle={{
                    color: '#002b36',
                    fontSize: 18,
                    marginBottom: -10,
                    marginLeft: 0,
                  }}
                  leftIcon={
                    <Icon
                      name="rupee"
                      type={'font-awesome'}
                      size={22}
                      color="#000"
                    />
                  }
                  placeholderTextColor={'grey'}
                  placeholder={'Enter amount'}
                  value={this.state.fastag_fastag_recharge_icici_amount
                    .toString()
                    .replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,')}
                  onChangeText={(text) =>
                    this.setState({fastag_fastag_recharge_icici_amount: text})
                  }
                />
              </View>
            )}
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getFastagRechargePage() {
    let {
      fastag_fastag_recharge_user_list,
      fastag_fastag_recharge_name,
      fastag_fastag_recharge_mobile_number,
      fastag_fastag_recharge_address,
      fastag_fastag_recharge_vehicle_number,
      fastag_fastag_recharge_fastag_number,
      fastag_fastag_recharge_vehicle_class_list,
      fastag_fastag_recharge_amount,
      fastag_fastag_recharge_user_id,
      fastag_fastag_recharge_user_name,
      fastag_fastag_recharge_vehicle_class_name,
      fastag_fastag_recharge_vehicle_class_id,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Fastag Recharge
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();

                this.setState({buttonLoading: true}, () => {
                  if (
                    fastag_fastag_recharge_name !== '' &&
                    fastag_fastag_recharge_mobile_number.length == 10 &&
                    fastag_fastag_recharge_address !== '' &&
                    fastag_fastag_recharge_vehicle_number !== '' &&
                    fastag_fastag_recharge_fastag_number !== '' &&
                    fastag_fastag_recharge_amount > 0
                  ) {
                    fastagRecharge_fastag({
                      fastag_fastag_recharge_name,
                      fastag_fastag_recharge_mobile_number,
                      fastag_fastag_recharge_address,
                      fastag_fastag_recharge_vehicle_number,
                      fastag_fastag_recharge_fastag_number,

                      fastag_fastag_recharge_amount,
                      fastag_fastag_recharge_user_id,

                      fastag_fastag_recharge_vehicle_class_id,
                    })
                      .then((result) => {
                        if (result.data && result.data.success == true) {
                          this.successAwesomeAlertMessage(
                            'Fastag recharge Request is successful\nPending approval',
                            0,
                          );
                          this.setState({buttonLoading: false});
                        } else if (
                          result.data &&
                          result.data.success == false
                        ) {
                          this.setState({buttonLoading: false});

                          this.errorAwesomeAlertMessage(
                            result.data.message
                              ? result.data.message
                              : 'Something went wrong',
                            0,
                          );
                        }
                      })
                      .catch((err) => {
                        this.setState({buttonLoading: false}, () => {});

                        this.errorAwesomeAlertMessage(
                          'Something went wrong',
                          0,
                        );
                        console.log('Error', err.response);
                      });
                  } else {
                    this.setState({buttonLoading: false}, () => {
                      if (fastag_fastag_recharge_name == '') {
                        this.generalAwesomeAlertMessage('Please enter a name');
                      } else if (
                        fastag_fastag_recharge_mobile_number.length < 10
                      ) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid mobile number',
                        );
                      } else if (fastag_fastag_recharge_address == '') {
                        this.generalAwesomeAlertMessage('Please enter address');
                      } else if (fastag_fastag_recharge_vehicle_number == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter vehicle number',
                        );
                      } else if (fastag_fastag_recharge_fastag_number == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter vehicle number',
                        );
                      } else if (fastag_fastag_recharge_amount < 1) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid amount',
                        );
                      }
                    });
                  }
                });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <View
              style={{
                height: 100,
                width: '95%',
                alignItems: 'flex-start',
                marginTop: 5,
              }}>
              <Text
                style={{fontSize: 14, fontWeight: 'bold', marginBottom: 11}}>
                Select User
              </Text>
              <ModalSelectorInput
                containerStyle={{
                  borderWidth: 1,
                  borderRadius: 3,
                  height: '52%',
                  borderColor: '#c0c0c8',
                }}
                activiy={this.state.mobile_providerListActivity}
                data={this.state.fastag_fastag_recharge_user_list}
                editable={true}
                value={this.state.fastag_fastag_recharge_user_name}
                placeholder={'Select None'}
                keyboardOpen={this.state.keyboardOpen}
                onItemSelect={(value) => {
                  console.log(value);
                  this.setState(
                    {
                      fastag_fastag_recharge_user_name: value.name,
                      fastag_fastag_recharge_user_id: value.id,
                    },
                    () => {
                      if (this.state.fastag_fastag_recharge_user_id == 0) {
                        this.setState({
                          fastag_fastag_recharge_name: '',
                          fastag_fastag_recharge_mobile_number: '',
                          fastag_fastag_recharge_address: '',
                          fastag_fastag_recharge_vehicle_number: '',
                          fastag_fastag_recharge_fastag_number: '',

                          fastag_fastag_recharge_vehicle_class_id: this.state
                            .fastag_fastag_recharge_vehicle_class_id_temp,
                          fastag_fastag_recharge_vehicle_class_name: this.state
                            .fastag_fastag_recharge_vehicle_class_name_temp,
                        });
                      } else {
                        getIndividual_FastagRecharge_UserDetails(
                          this.state.fastag_fastag_recharge_user_id,
                        )
                          .then((result) => {
                            if (result.data && result.data.success == true) {
                              this.setState({
                                fastag_fastag_recharge_name: result.data.name,
                                fastag_fastag_recharge_mobile_number:
                                  result.data.mobile_no,
                                fastag_fastag_recharge_address:
                                  result.data.address,
                                fastag_fastag_recharge_vehicle_number:
                                  result.data.vehicle_no,
                                fastag_fastag_recharge_fastag_number:
                                  result.data.fasttagno,
                                fastag_fastag_recharge_vehicle_class_id:
                                  result.data.vehicleclass_id,
                                fastag_fastag_recharge_vehicle_class_name:
                                  result.data.vehicle_class,
                              });
                            }

                            console.log(result.data);
                          })
                          .catch((err) => {
                            console.log('Error', err.response);
                          });
                      }
                    },
                  );
                }}
              />
            </View>

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              label={'Name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter name'}
              value={this.state.fastag_fastag_recharge_name}
              onChangeText={(text) =>
                this.setState({fastag_fastag_recharge_name: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              maxLength={10}
              label={'Mobile Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter mobile number'}
              value={this.state.fastag_fastag_recharge_mobile_number}
              onChangeText={(text) =>
                this.setState({fastag_fastag_recharge_mobile_number: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              multiline={true}
              numberOfLines={4}
              autoCorrect={false}
              label={'Address'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter address'}
              value={this.state.fastag_fastag_recharge_address}
              onChangeText={(text) =>
                this.setState({fastag_fastag_recharge_address: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              label={'Vehicle Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter vehicle no'}
              value={this.state.fastag_fastag_recharge_vehicle_number}
              onChangeText={(text) =>
                this.setState({fastag_fastag_recharge_vehicle_number: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              label={'Fastag Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter fastag no'}
              value={this.state.fastag_fastag_recharge_fastag_number}
              onChangeText={(text) =>
                this.setState({fastag_fastag_recharge_fastag_number: text})
              }
            />

            <View
              style={{
                height: 100,
                width: '95%',
                alignItems: 'flex-start',
                marginTop: 10,
              }}>
              <Text
                style={{fontSize: 14, fontWeight: 'bold', marginBottom: 11}}>
                Vehicle Class
              </Text>
              <ModalSelectorInput
                containerStyle={{
                  borderWidth: 1,
                  borderRadius: 3,
                  height: '52%',
                  borderColor: '#c0c0c8',
                }}
                activiy={this.state.mobile_regionListActivity}
                data={this.state.fastag_fastag_recharge_vehicle_class_list}
                editable={true}
                value={this.state.fastag_fastag_recharge_vehicle_class_name}
                placeholder={'Choose Option'}
                keyboardOpen={this.state.keyboardOpen}
                onItemSelect={(value) => {
                  this.setState({
                    fastag_fastag_recharge_vehicle_class_name: value.name,
                    fastag_fastag_recharge_vehicle_class_id: value.id,
                  });
                }}
              />
            </View>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                marginTop: 10,
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Amount'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter amount'}
              value={this.state.fastag_fastag_recharge_amount}
              onChangeText={(text) =>
                this.setState({fastag_fastag_recharge_amount: text})
              }
            />
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getTeacherIndRegistrationPage() {
    let {
      teacherind_name,
      teacherind_mobile_number,
      teacherind_address,
      teacherind_email_id,

      teacherind_district,
      teacherind_taluk,
      teacherind_course_name,
      teacherind_institution,
      teacherind_course_semester,
      teacherind_course_tution_for,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              TeacherInd Registration
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();

                this.setState({buttonLoading: true}, () => {
                  if (
                    /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(
                      teacherind_email_id,
                    ) &&
                    teacherind_email_id !== '' &&
                    teacherind_name !== '' &&
                    teacherind_mobile_number.length == 10 &&
                    // teacherind_address !== '' &&
                    //  teacherind_district !== '' &&
                    // teacherind_taluk !== '' &&
                    teacherind_course_name !== '' &&
                    // teacherind_institution !== '' &&
                    teacherind_course_semester !== '' &&
                    teacherind_course_tution_for !== ''
                  ) {
                    teacherIndRegistration({
                      teacherind_name,
                      teacherind_mobile_number,
                      teacherind_address,
                      teacherind_email_id,
                      teacherind_district,
                      teacherind_taluk,
                      teacherind_course_name,
                      teacherind_institution,
                      teacherind_course_semester,
                      teacherind_course_tution_for,
                    })
                      .then((result) => {
                        if (result.data && result.data.success == true) {
                          this.successAwesomeAlertMessage(
                            'TeacherInd Registration Request is successful\nPending approval',
                            0,
                          );
                          this.setState({buttonLoading: false});
                        } else if (
                          result.data &&
                          result.data.success == false
                        ) {
                          this.setState({buttonLoading: false});

                          this.errorAwesomeAlertMessage(
                            result.data.message
                              ? result.data.message
                              : 'Something went wrong',
                            0,
                          );
                        }
                      })
                      .catch((err) => {
                        this.setState({buttonLoading: false}, () => {});

                        this.errorAwesomeAlertMessage(
                          'Something went wrong',
                          0,
                        );
                        console.log('Error', err.response);
                      });
                  } else {
                    this.setState({buttonLoading: false}, () => {
                      if (teacherind_name == '') {
                        this.generalAwesomeAlertMessage('Please enter a name');
                      } else if (teacherind_mobile_number.length < 10) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid mobile number',
                        );
                      }
                      // else if (teacherind_address == '') {
                      //   this.generalAwesomeAlertMessage('Please enter address');
                      // }
                      else if (
                        teacherind_email_id == '' ||
                        /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(
                          teacherind_email_id,
                        ) == false
                      ) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid email address',
                        );
                      }
                      //  else if (teacherind_taluk == '') {
                      //   this.generalAwesomeAlertMessage('Please enter taluk');
                      // }
                      else if (teacherind_course_name == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter course name',
                        );
                      }
                      // else if (teacherind_institution == '') {
                      //   this.generalAwesomeAlertMessage(
                      //     'Please enter institution',
                      //   );
                      // }
                      else if (teacherind_course_semester == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter semester',
                        );
                      } else if (teacherind_course_tution_for == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter tution for subject',
                        );
                      }
                    });
                  }
                });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              label={'Name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter name'}
              value={this.state.teacherind_name}
              onChangeText={(text) => this.setState({teacherind_name: text})}
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              maxLength={10}
              label={'Mobile Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter mobile number'}
              value={this.state.teacherind_mobile_number}
              onChangeText={(text) =>
                this.setState({teacherind_mobile_number: text})
              }
            />

            {/* <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              multiline={true}
              numberOfLines={4}
              autoCorrect={false}
              label={'Address'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter address'}
              value={this.state.teacherind_address}
              onChangeText={(text) => this.setState({teacherind_address: text})}
            /> */}

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              label={'Email Id'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              keyboardType={'email-address'}
              placeholderTextColor={'grey'}
              placeholder={'Enter email id'}
              value={this.state.teacherind_email_id}
              onChangeText={(text) =>
                this.setState({teacherind_email_id: text})
              }
            />
            {/* <View
              style={{
                height: 100,
                width: '95%',
                alignItems: 'flex-start',
                marginTop: 5,
              }}>
              <Text
                style={{fontSize: 14, fontWeight: 'bold', marginBottom: 11}}>
                Select District
              </Text>
              <ModalSelectorInput
                containerStyle={{
                  borderWidth: 1,
                  borderRadius: 3,
                  height: '52%',
                  borderColor: '#c0c0c8',
                }}
                activiy={this.state.mobile_providerListActivity}
                data={this.state.district_list}
                editable={true}
                value={this.state.teacherind_district}
                placeholder={'Select None'}
                keyboardOpen={this.state.keyboardOpen}
                onItemSelect={(value) => {
                  console.log(value);
                  this.setState({
                    teacherind_district: value.name,
                  });
                }}
              />
            </View> */}
            {/* <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                marginTop: 10,
              }}
              autoCorrect={false}
              label={'Taluk'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter taluk'}
              value={this.state.teacherind_taluk}
              onChangeText={(text) => this.setState({teacherind_taluk: text})}
            /> */}

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              label={'Course Name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter course name'}
              value={this.state.teacherind_course_name}
              onChangeText={(text) =>
                this.setState({teacherind_course_name: text})
              }
            />
            {/* <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              label={'Institution'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter Institution name'}
              value={this.state.teacherind_institution}
              onChangeText={(text) =>
                this.setState({teacherind_institution: text})
              }
            /> */}

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              label={'Current Semester'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter current semester'}
              value={this.state.teacherind_course_semester}
              onChangeText={(text) =>
                this.setState({teacherind_course_semester: text})
              }
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              label={'Tution For'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter tution for subject'}
              value={this.state.teacherind_course_tution_for}
              onChangeText={(text) =>
                this.setState({teacherind_course_tution_for: text})
              }
            />
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getNewFastagPage() {
    const {
      kseb_boxDimension,
      kseb_showPassword,
      kseb_Name,
      kseb_consumerId,
      kseb_mobileNumber,
      kseb_dueDate,
      kseb_billNumber,
      kseb_amount,
      kseb_place,
      kseb_date,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              New Fastag
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}></View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          {this.state.fastagLoading == true && (
            <WaveIndicator
              size={150}
              color={'#FF408160'}
              animating={this.props.animating}
              hidesWhenStopped={true}
            />
          )}
          <ScrollView
            style={{paddingBottom: 20, width: '100%'}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
              width: '100%',
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <FlatList
              numColumns={1}
              keyboardShouldPersistTaps={'always'}
              showsVerticalScrollIndicator={false}
              contentContainerStyle={{
                justifyContent: 'center',

                width: '100%',
              }}
              style={{width: '100%'}}
              data={this.state.fastag_newfastag_list}
              keyExtractor={(item, index) => String(index)}
              renderItem={({item, index, separators}) => (
                <TouchableOpacity
                  style={{
                    height: 85,
                    width: '95%',
                    justifyContent: 'center',
                    alignSelf: 'center',
                    alignItems: 'center',
                    borderWidth: 1,
                    borderColor: '#D0D0D0',
                    borderRadius: 4,
                    marginBottom: 15,
                    flexDirection: 'row',
                    paddingVerical: 10,
                    backgroundColor: '#F9FBFB',
                  }}
                  onPress={() => {
                    this.setState(
                      {
                        fastag_newfastag_applyfor: item.vehicle,
                        fastag_newfastag_amount: item.price,
                        fastag_newfastag_service_charge: '35',
                        fastag_newfastag_vehicle_class: item.vehicle_class,
                      },
                      () => {
                        let pageDepth = 54;
                        this.onPressFunction(pageDepth);
                      },
                    );
                  }}>
                  <View
                    style={{
                      flex: 0.5,
                      alignItems: 'center',
                      justifyContent: 'center',
                      width: '100%',
                    }}></View>
                  <View
                    style={{
                      flex: 6,
                      justifyContent: 'center',
                      alignItems: 'flex-start',
                      height: '100%',
                      paddingHorizontal: 5,
                      paddingVertical: 5,
                    }}>
                    <View
                      style={{
                        flex: 4,
                        width: '100%',
                        justifyContent: 'center',
                        alignItems: 'flex-start',
                      }}>
                      <View style={{}}>
                        <Text
                          style={{
                            flexWrap: 'wrap',
                            fontSize: 15.5,
                            fontWeight: 'bold',
                            color: '#545454',
                          }}>
                          {item.vehicle.trim()}
                        </Text>
                      </View>
                    </View>
                    <View
                      style={{
                        flex: 2,
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'flex-start',
                      }}>
                      <View
                        style={{
                          justifyContent: 'flex-start',
                          alignItems: 'center',
                          height: '100%',
                          flexDirection: 'row',
                        }}>
                        <Icon
                          size={11}
                          name={'rupee'}
                          type={'font-awesome'}
                          color={'#5D5D5D'}
                          style={{marginTop: 2}}
                        />
                        <Text
                          style={{
                            flexWrap: 'wrap',
                            fontSize: 13.5,
                            fontWeight: 'bold',
                            color: '#5D5D5D',
                          }}>
                          {item.price}
                        </Text>
                      </View>
                      <View
                        style={{
                          justifyContent: 'center',
                          alignItems: 'center',
                          marginHorizontal: 7,
                        }}>
                        <View
                          style={{
                            height: 6,
                            width: 6,
                            backgroundColor: '#FF798A',
                            borderRadius: 3,
                          }}
                        />
                      </View>
                      <View
                        style={{
                          justifyContent: 'center',
                          alignItems: 'flex-start',
                          height: '100%',
                        }}>
                        <Text
                          style={{
                            flexWrap: 'wrap',
                            fontSize: 13.5,
                            color: 'grey',
                          }}>
                          CLASS : {item.vehicle_class}
                        </Text>
                      </View>
                    </View>
                  </View>
                  <View
                    style={{
                      flex: 1.5,
                      alignItems: 'center',
                      justifyContent: 'center',
                      width: '100%',
                    }}>
                    <Icon
                      size={24}
                      name={'rightcircle'}
                      type={'antdesign'}
                      color={'#70D69E'}
                    />
                  </View>
                </TouchableOpacity>
              )}
              ListEmptyComponent={() => {
                return (
                  <View
                    style={{
                      //  position: "relative",
                      paddingTop: 60,
                      justifyContent: 'center',
                      alignItems: 'center',
                    }}>
                    {!this.state.fastagLoading && (
                      <Text style={{fontSize: 17, color: '#A19D9D'}}>
                        No fastag data available
                      </Text>
                    )}
                  </View>
                );
              }}
            />
          </ScrollView>
        </View>
      </View>
    );
  }

  getCommissionRequestPage_vehicle() {
    const {
      commission_request_vehicle_number,
      commission_request_vehicle_customer_name,
      commission_request_vehicle_policy_number,
      commission_request_vehicle_tp,
      commission_request_vehicle_od,
      commission_request_vehicle_amount,
      commission_request_vehicle_company_id,
      commission_request_vehicle_name,
      commission_request_vehicle_file,
      commission_request_vehicle_file_status,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Commission Request
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();

                this.setState({buttonLoading: true}, () => {
                  if (
                    commission_request_vehicle_number != '' &&
                    commission_request_vehicle_customer_name != '' &&
                    commission_request_vehicle_policy_number != '' &&
                    commission_request_vehicle_tp != '' &&
                    commission_request_vehicle_od != '' &&
                    commission_request_vehicle_amount > 0 &&
                    commission_request_vehicle_file_status == true
                  ) {
                    commission_request_vehicle_postData({
                      commission_request_vehicle_number,
                      commission_request_vehicle_customer_name,
                      commission_request_vehicle_policy_number,
                      commission_request_vehicle_tp,
                      commission_request_vehicle_od,
                      commission_request_vehicle_amount,
                      commission_request_vehicle_company_id,
                      commission_request_vehicle_name,
                      commission_request_vehicle_file,
                    })
                      .then((result) => {
                        console.log(
                          result.data,
                          'kseb bill payment done successfully',
                        );
                        if (result.data && result.data.success == true) {
                          console.log(
                            result.data,
                            'kseb bill payment done successfully',
                          );
                          this.setState(
                            {
                              commission_request_vehicle_company_id: 1,
                              commission_request_vehicle_company_name:
                                'Covernest',
                              commission_request_vehicle_name: 'Two Wheeler',

                              commission_request_vehicle_number: '',
                              commission_request_vehicle_customer_name: '',
                              commission_request_vehicle_policy_number: '',
                              commission_request_vehicle_tp: '',
                              commission_request_vehicle_od: '',
                              commission_request_vehicle_amount: 0,
                              commission_request_vehicle_file: {},
                              commission_request_vehicle_file_status: false,
                            },
                            () => {
                              this.successAwesomeAlertMessage(
                                'Vehicle Insurance Commission request is successful\nPending Approval',
                                0,
                              );

                              //kseb back if needed
                            },
                          );
                        } else if (
                          result.data &&
                          result.data.success == false
                        ) {
                          this.setState({buttonLoading: false});
                          if (
                            result.data.message &&
                            result.data.message !== ''
                          ) {
                            this.errorAwesomeAlertMessage(
                              result.data.message,
                              0,
                            );
                          } else {
                            this.errorAwesomeAlertMessage(
                              'Something went wrong',
                              0,
                            );
                          }
                        }
                        this.setState({buttonLoading: false}, () => {
                          if (
                            result.data &&
                            result.data.success &&
                            result.data.success == true
                          ) {
                            //this.handleBackButtonClick();
                          }
                        });
                      })
                      .catch((err) => {
                        this.setState({buttonLoading: false}, () => {});
                        this.generalAwesomeAlertMessage('Something went wrong');
                        console.log('Error', err);
                      });
                  } else {
                    this.setState({buttonLoading: false}, () => {
                      if (commission_request_vehicle_number == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter vehicle number',
                        );
                      } else if (
                        commission_request_vehicle_customer_name == ''
                      ) {
                        this.generalAwesomeAlertMessage(
                          'Please enter customer name',
                        );
                      } else if (
                        commission_request_vehicle_policy_number == ''
                      ) {
                        this.generalAwesomeAlertMessage(
                          'Please enter customer name',
                        );
                      } else if (commission_request_vehicle_tp == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter customer name',
                        );
                      } else if (commission_request_vehicle_od == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter customer name',
                        );
                      } else if (commission_request_vehicle_amount == 0) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid amount',
                        );
                      } else if (
                        commission_request_vehicle_file_status == false
                      ) {
                        this.generalAwesomeAlertMessage(
                          'Please upload valid insurance document',
                        );
                      }
                    });
                  }
                });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Date'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter benefiary name'}
              value={moment().format('DD-MM-YYYY')}
              editable={false}
              //onChangeText={text => this.setState({ Beneficiaryname: text })}
            />
            <View
              style={{
                height: 100,
                width: '95%',
                alignItems: 'flex-start',
                //marginTop: 20
              }}>
              <Text
                style={{fontSize: 14, fontWeight: 'bold', marginBottom: 11}}>
                Insurance Company
              </Text>
              <ModalSelectorInput
                containerStyle={{
                  borderWidth: 1,
                  borderRadius: 3,
                  height: '55%',
                  borderColor: '#c0c0c8',
                }}
                data={this.state.commission_request_vehicle_company_list}
                editable={true}
                value={this.state.commission_request_vehicle_company_name}
                placeholder={'Choose'}
                keyboardOpen={this.state.keyboardOpen}
                onItemSelect={(value) => {
                  this.setState({
                    commission_request_vehicle_company_id: value.id,
                    commission_request_vehicle_company_name: value.name,
                  });
                }}
              />
            </View>

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                justifyContent: 'center',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Vehicle Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter vehicle no'}
              value={this.state.commission_request_vehicle_number}
              onChangeText={(text) =>
                this.setState({commission_request_vehicle_number: text})
              }
            />
            <View
              style={{
                height: 100,
                width: '95%',
                alignItems: 'flex-start',
                //marginTop: 20
              }}>
              <Text
                style={{fontSize: 14, fontWeight: 'bold', marginBottom: 11}}>
                Vehicle Type
              </Text>
              <ModalSelectorInput
                containerStyle={{
                  borderWidth: 1,
                  borderRadius: 3,
                  height: '55%',
                  borderColor: '#c0c0c8',
                }}
                data={this.state.commission_request_vehicle_name_list}
                editable={true}
                value={this.state.commission_request_vehicle_name}
                placeholder={'Choose'}
                keyboardOpen={this.state.keyboardOpen}
                onItemSelect={(value) => {
                  this.setState({commission_request_vehicle_name: value.name});
                }}
              />
            </View>

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                justifyContent: 'center',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Customer Name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter customer name'}
              value={this.state.commission_request_vehicle_customer_name}
              onChangeText={(text) =>
                this.setState({commission_request_vehicle_customer_name: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                justifyContent: 'center',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Policy Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter policy no'}
              value={this.state.commission_request_vehicle_policy_number}
              onChangeText={(text) =>
                this.setState({commission_request_vehicle_policy_number: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                justifyContent: 'center',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'TP (Third Party Premium)'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter TP (Third Party Premium)'}
              value={this.state.commission_request_vehicle_tp}
              onChangeText={(text) =>
                this.setState({commission_request_vehicle_tp: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                justifyContent: 'center',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'OD (On Damage) Premium'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter OD (On Damage) premium'}
              value={this.state.commission_request_vehicle_od}
              onChangeText={(text) =>
                this.setState({commission_request_vehicle_od: text})
              }
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                justifyContent: 'center',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Amount'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter premium amount'}
              value={this.state.commission_request_vehicle_amount}
              onChangeText={(text) =>
                this.setState({commission_request_vehicle_amount: text})
              }
            />

            <TouchableOpacity
              style={{
                paddingHorizontal: 15,
                //borderWidth: 1,
                borderBottomWidth: 0,
                // borderColor: '#c0c0c8',
                marginTop: 10,
                justifyContent: 'center',
                alignItems: 'center',
                backgroundColor: '#5CC8D8',
                height: 80,
                borderRadius: 8,
                width: '95%',
                flexDirection: 'row',
              }}
              onPress={() => {
                this.fileUploader('insurance_document');
              }}>
              <View
                style={{
                  flex: 1.2,
                  height: '100%',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}>
                <Icon
                  name={
                    this.state.commission_request_vehicle_file_status == true
                      ? 'cloud-check'
                      : 'cloud-upload'
                  }
                  type={'material-community'}
                  size={42}
                  color={'#fff'}
                />
              </View>
              <View
                style={{
                  flex: 6,
                  height: '100%',
                  alignItems: 'center',
                  justifyContent: 'center',
                  paddingHorizontal: 15,
                  paddingVertical: 5,
                }}>
                <View
                  style={{
                    flex: 2.4,
                    width: '100%',
                    alignItems: 'flex-start',
                    justifyContent: 'flex-end',
                  }}>
                  <Text style={{fontSize: 22, color: '#fff'}}>
                    Insurance Document
                  </Text>
                </View>

                <View
                  style={{
                    flex: 2,
                    width: '100%',
                    alignItems: 'flex-start',
                    justifyContent: 'flex-start',
                    paddingTop: 0.5,
                  }}>
                  <Text style={{fontSize: 13, color: '#fff'}}>
                    {'Maximum upload file size: 500 KB'}
                  </Text>
                </View>
              </View>
            </TouchableOpacity>
            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              keyboardType={"numeric"}
              label={"Mobile Number"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter mobile number"}
              value={this.state.kseb_mobileNumber}
              maxLength={10}
              onChangeText={(text) =>
                this.setState({ kseb_mobileNumber: text })
              }
            /> */}
            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              keyboardType={"numeric"}
              label={"Bill Number"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter bill number"}
              value={this.state.kseb_billNumber}
              onChangeText={(text) => this.setState({ kseb_billNumber: text })}
            /> */}

            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Place"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter place"}
              value={this.state.kseb_place}
              onChangeText={(text) => this.setState({ kseb_place: text })}
            /> */}
            {/* <Input
              editable={false}
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                // marginTop: 5
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Due Date"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter due date"}
              value={this.state.kseb_dueDate}
              rightIcon={
                <Icon
                  color="#444"
                  size={20}
                  type="entypo"
                  underlayColor="rgba(255,255,255,0)"
                  name={"calendar"}
                  //name={'eye'}
                  onPress={() =>
                    this.setState({
                      kseb_changeDateOfPayment: !this.state
                        .kseb_changeDateOfPayment,
                    })
                  }
                />
              }
              //onChangeText={text => this.setState({ DateofPayment: text })}
            />
            {this.state.kseb_changeDateOfPayment && (
              <DatePicker
                style={{ backgroundColor: "#fff", width: "100%" }}
                mode="date"
                format="DD-MM-YYYY"
                minimumDate={
                  new Date(
                    parseInt(
                      moment()
                        .format("DD-MM-YYYY")
                        .split("-")[2]
                    ),
                    parseInt(
                      moment()
                        .format("DD-MM-YYYY")
                        .split("-")[1]
                    ) - 1,
                    parseInt(
                      moment()
                        .format("DD-MM-YYYY")
                        .split("-")[0]
                    )
                  )
                }
                date={this.state.kseb_dueDate}
                value={
                  new Date(
                    parseInt(this.state.kseb_dueDate.split("-")[2]),
                    parseInt(this.state.kseb_dueDate.split("-")[1]) - 1,
                    parseInt(this.state.kseb_dueDate.split("-")[0])
                  )
                }
                confirmBtnText={"Confirm"}
                cancelBtnText={"Cancel"}
                showIcon={false}
                onChange={(event, date) => {
                  this.setState({
                    kseb_dueDate: moment(date).format("DD-MM-YYYY"),

                    kseb_changeDateOfPayment: false,
                  });
                }}
                customStyles={{
                  dateInput: {
                    borderWidth: 0,
                    alignItems: "flex-start",
                    //marginLeft: 10,
                  },
                  dateText: {
                    color: "#000",
                    fontSize: 18,
                  },
                  disabled: {
                    backgroundColor: "#ffff",
                  },
                }}
              />
            )} */}

            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft:1
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                marginTop:20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Service Charge"}
              labelStyle={{ color: "#002b36", fontSize: 14, marginBottom: 10 ,marginLeft:0}}
              placeholderTextColor={"grey"}
              placeholder={"Enter service charge"}
              value={this.state.serviceCharge}
              
              onChangeText={text => this.setState({ serviceCharge: text })}
              
            /> */}
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getCommissionRequestPage_health() {
    const {
      commission_request_health_company_id,
      commission_request_health_company_name,
      commission_request_health_customer_name,
      commission_request_health_customer_mobileno,
      commission_request_health_policy_number,
      commission_request_health_amount,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Commission Request
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();

                this.setState({buttonLoading: true}, () => {
                  if (
                    commission_request_health_customer_name != '' &&
                    commission_request_health_customer_mobileno != '' &&
                    commission_request_health_customer_mobileno.length == 10 &&
                    commission_request_health_policy_number != '' &&
                    commission_request_health_amount > 0
                  ) {
                    commission_request_health_postData({
                      commission_request_health_company_id,

                      commission_request_health_customer_name,
                      commission_request_health_customer_mobileno,
                      commission_request_health_policy_number,
                      commission_request_health_amount,
                    })
                      .then((result) => {
                        console.log(
                          result.data,
                          'kseb bill payment done successfully',
                        );
                        if (result.data && result.data.success == true) {
                          console.log(
                            result.data,
                            'kseb bill payment done successfully',
                          );
                          this.setState(
                            {
                              commission_request_health_company_id: 1,
                              commission_request_health_company_name:
                                'RELIGARE HEALTH INSURANCE',
                              commission_request_health_customer_name: '',
                              commission_request_health_customer_mobileno: '',
                              commission_request_health_policy_number: '',
                              commission_request_health_amount: 0,
                            },
                            () => {
                              this.successAwesomeAlertMessage(
                                'Health Insurance Commission request is successful\nPending Approval',
                                0,
                              );

                              //kseb back if needed
                            },
                          );
                        } else if (
                          result.data &&
                          result.data.success == false
                        ) {
                          this.setState({buttonLoading: false});
                          if (
                            result.data.message &&
                            result.data.message !== ''
                          ) {
                            this.errorAwesomeAlertMessage(
                              result.data.message,
                              0,
                            );
                          } else {
                            this.errorAwesomeAlertMessage(
                              'Something went wrong',
                              0,
                            );
                          }
                        }
                        this.setState({buttonLoading: false}, () => {
                          if (
                            result.data &&
                            result.data.success &&
                            result.data.success == true
                          ) {
                            //this.handleBackButtonClick();
                          }
                        });
                      })
                      .catch((err) => {
                        this.setState({buttonLoading: false}, () => {});
                        this.generalAwesomeAlertMessage('Something went wrong');
                        console.log('Error', err);
                      });
                  } else {
                    this.setState({buttonLoading: false}, () => {
                      if (commission_request_health_customer_name == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter customer name',
                        );
                      } else if (
                        commission_request_health_customer_mobileno == '' ||
                        commission_request_health_customer_mobileno !== 10
                      ) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid mobile number',
                        );
                      } else if (
                        commission_request_health_policy_number == ''
                      ) {
                        this.generalAwesomeAlertMessage(
                          'Please enter policy number',
                        );
                      } else if (commission_request_health_amount == 0) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid amount',
                        );
                      }
                    });
                  }
                });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Date'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter benefiary name'}
              value={moment().format('DD-MM-YYYY')}
              editable={false}
              //onChangeText={text => this.setState({ Beneficiaryname: text })}
            />
            <View
              style={{
                height: 100,
                width: '95%',
                alignItems: 'flex-start',
                //marginTop: 20
              }}>
              <Text
                style={{fontSize: 14, fontWeight: 'bold', marginBottom: 11}}>
                Insurance Company
              </Text>
              <ModalSelectorInput
                containerStyle={{
                  borderWidth: 1,
                  borderRadius: 3,
                  height: '55%',
                  borderColor: '#c0c0c8',
                }}
                data={this.state.commission_request_health_company_list}
                editable={true}
                value={this.state.commission_request_health_company_name}
                placeholder={'Choose'}
                keyboardOpen={this.state.keyboardOpen}
                onItemSelect={(value) => {
                  this.setState({
                    commission_request_health_company_id: value.id,
                    commission_request_health_company_name: value.name,
                  });
                }}
              />
            </View>

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                justifyContent: 'center',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Customer Name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter customer name'}
              value={this.state.commission_request_health_customer_name}
              onChangeText={(text) =>
                this.setState({commission_request_health_customer_name: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                justifyContent: 'center',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Mobile Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              maxLength={10}
              placeholderTextColor={'grey'}
              placeholder={'Enter mobile no'}
              value={this.state.commission_request_health_customer_mobileno}
              onChangeText={(text) =>
                this.setState({
                  commission_request_health_customer_mobileno: text,
                })
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                justifyContent: 'center',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Policy Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter policy no'}
              value={this.state.commission_request_health_policy_number}
              onChangeText={(text) =>
                this.setState({commission_request_health_policy_number: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                justifyContent: 'center',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Amount'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter premium amount'}
              value={this.state.commission_request_health_amount}
              onChangeText={(text) =>
                this.setState({commission_request_health_amount: text})
              }
            />
          </ScrollView>
        </View>
      </View>
    );
  }

  getCommissionRequestPage_travel() {
    const {
      commission_request_travel_company_id,
      commission_request_travel_company_name,
      commission_request_travel_customer_name,
      commission_request_travel_customer_mobileno,
      commission_request_travel_policy_number,
      commission_request_travel_amount,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Commission Request
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();

                this.setState({buttonLoading: true}, () => {
                  if (
                    commission_request_travel_customer_name != '' &&
                    commission_request_travel_customer_mobileno != '' &&
                    commission_request_travel_customer_mobileno.length == 10 &&
                    commission_request_travel_policy_number != '' &&
                    commission_request_travel_amount > 0
                  ) {
                    commission_request_travel_postData({
                      commission_request_travel_company_id,

                      commission_request_travel_customer_name,
                      commission_request_travel_customer_mobileno,
                      commission_request_travel_policy_number,
                      commission_request_travel_amount,
                    })
                      .then((result) => {
                        console.log(
                          result.data,
                          'kseb bill payment done successfully',
                        );
                        if (result.data && result.data.success == true) {
                          console.log(
                            result.data,
                            'kseb bill payment done successfully',
                          );
                          this.setState(
                            {
                              commission_request_travel_company_id: 1,
                              commission_request_travel_company_name:
                                'RELIGARE TRAVEL INSURANCE',
                              commission_request_travel_customer_name: '',
                              commission_request_travel_customer_mobileno: '',
                              commission_request_travel_policy_number: '',
                              commission_request_travel_amount: 0,
                            },
                            () => {
                              this.successAwesomeAlertMessage(
                                'Travel Insurance Commission request is successful\nPending Approval',
                                0,
                              );

                              //kseb back if needed
                            },
                          );
                        } else if (
                          result.data &&
                          result.data.success == false
                        ) {
                          this.setState({buttonLoading: false});
                          if (
                            result.data.message &&
                            result.data.message !== ''
                          ) {
                            this.errorAwesomeAlertMessage(
                              result.data.message,
                              0,
                            );
                          } else {
                            this.errorAwesomeAlertMessage(
                              'Something went wrong',
                              0,
                            );
                          }
                        }
                        this.setState({buttonLoading: false}, () => {
                          if (
                            result.data &&
                            result.data.success &&
                            result.data.success == true
                          ) {
                            //this.handleBackButtonClick();
                          }
                        });
                      })
                      .catch((err) => {
                        this.setState({buttonLoading: false}, () => {});
                        this.generalAwesomeAlertMessage('Something went wrong');
                        console.log('Error', err);
                      });
                  } else if (
                    commission_request_travel_customer_mobileno == '' ||
                    commission_request_travel_customer_mobileno !== 10
                  ) {
                    this.generalAwesomeAlertMessage(
                      'Please enter valid mobile number',
                    );
                  } else {
                    this.setState({buttonLoading: false}, () => {
                      if (commission_request_travel_customer_name == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter customer name',
                        );
                      } else if (
                        commission_request_travel_policy_number == ''
                      ) {
                        this.generalAwesomeAlertMessage(
                          'Please enter policy number',
                        );
                      } else if (commission_request_travel_amount == 0) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid amount',
                        );
                      }
                    });
                  }
                });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Date'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter benefiary name'}
              value={moment().format('DD-MM-YYYY')}
              editable={false}
              //onChangeText={text => this.setState({ Beneficiaryname: text })}
            />
            <View
              style={{
                height: 100,
                width: '95%',
                alignItems: 'flex-start',
                //marginTop: 20
              }}>
              <Text
                style={{fontSize: 14, fontWeight: 'bold', marginBottom: 11}}>
                Insurance Company
              </Text>
              <ModalSelectorInput
                containerStyle={{
                  borderWidth: 1,
                  borderRadius: 3,
                  height: '55%',
                  borderColor: '#c0c0c8',
                }}
                data={this.state.commission_request_travel_company_list}
                editable={true}
                value={this.state.commission_request_travel_company_name}
                placeholder={'Choose'}
                keyboardOpen={this.state.keyboardOpen}
                onItemSelect={(value) => {
                  this.setState({
                    commission_request_travel_company_id: value.id,
                    commission_request_travel_company_name: value.name,
                  });
                }}
              />
            </View>

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                justifyContent: 'center',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Customer Name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter customer name'}
              value={this.state.commission_request_travel_customer_name}
              onChangeText={(text) =>
                this.setState({commission_request_travel_customer_name: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                justifyContent: 'center',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              maxLength={10}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Mobile Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter mobile no'}
              value={this.state.commission_request_travel_customer_mobileno}
              onChangeText={(text) =>
                this.setState({
                  commission_request_travel_customer_mobileno: text,
                })
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                justifyContent: 'center',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Policy Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter policy no'}
              value={this.state.commission_request_travel_policy_number}
              onChangeText={(text) =>
                this.setState({commission_request_travel_policy_number: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                justifyContent: 'center',
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Amount'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter premium amount'}
              value={this.state.commission_request_travel_amount}
              onChangeText={(text) =>
                this.setState({commission_request_travel_amount: text})
              }
            />
          </ScrollView>
        </View>
      </View>
    );
  }
  getActivityShow(value) {
    if (value == true) {
      return (
        <BallIndicator
          size={20}
          color={'#4FA8C6'}
          animating={this.props.animating}
          hidesWhenStopped={true}
        />
      );
      // <ActivityIndicator style={{justifyContent:'center',alignItems:'center'}} size={'large'} color={'#4FA8C6'} />;
    } else {
      return null;
    }
  }
  getAddBenficiaryDetailsPage() {
    const {boxDimension, showPassword} = this.state;
    let {
      money_transfer_add_Beneficiaryname,
      money_transfer_add_BeneficiaryAccNo,
      money_transfer_add_BeneficiaryBank,
      money_transfer_add_BeneficiaryBranch,
      money_transfer_add_BeneficiaryIfsc,
      money_transfer_edit_id,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              {this.state.money_transfer_add_edit_mode == 'edit'
                ? 'Edit Beneficiary'
                : 'Add benefiary'}
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();
                this.setState({buttonLoading: true}, () => {
                  if (
                    money_transfer_add_Beneficiaryname !== '' &&
                    money_transfer_add_BeneficiaryAccNo !== '' &&
                    money_transfer_add_BeneficiaryBank !== '' &&
                    money_transfer_add_BeneficiaryBranch !== '' &&
                    money_transfer_add_BeneficiaryIfsc !== ''
                  ) {
                    addBeneficiary_MoneyTransfer({
                      money_transfer_add_Beneficiaryname,
                      money_transfer_add_BeneficiaryAccNo,
                      money_transfer_add_BeneficiaryBank,
                      money_transfer_add_BeneficiaryBranch,
                      money_transfer_add_BeneficiaryIfsc,
                      money_transfer_edit_id:
                        this.state.money_transfer_add_edit_mode == 'edit'
                          ? money_transfer_edit_id
                          : '',
                      money_transfer_add_mode:
                        this.state.money_transfer_add_edit_mode == 'edit'
                          ? 'edit'
                          : 'add',
                    })
                      .then((result) => {
                        if (result.data) {
                          this.setState(
                            {
                              buttonLoading: false,
                              money_transfer_add_Beneficiaryname: '',
                              money_transfer_add_BeneficiaryAccNo: '',
                              money_transfer_add_BeneficiaryBank: '',
                              money_transfer_add_BeneficiaryBranch: '',
                              money_transfer_add_BeneficiaryIfsc: '',
                              money_transfer_edit_id: '',
                              money_transfer_list_showPassword: false,
                              money_transfer_list_keyboardOpen: false,
                              money_transfer_list_boxDimension: 0,
                              money_transfer_list_username: '',
                              money_transfer_list_password: '',
                              money_transfer_list_settingsLoading: false,
                              money_transfer_list_refreshingValue: false,
                              money_transfer_list_modalOpen: false,
                              money_transfer_list_moneyTransferPageType:
                                'Money Transfer',
                              money_transfer_list_moneyTrasferPageEditable: false,
                              money_transfer_list_userData: [],
                              money_transfer_list_searchKey: '',
                              money_transfer_list_tempData: [],
                              money_transfer_list_searching: false,
                              money_transfer_list_searchData: [],
                              money_transfer_list_acccount_balance: '',
                              money_transfer_list_refreshing: true,
                            },
                            () => {
                              if (
                                result.data.response &&
                                result.data.response.length > 0
                              ) {
                                this.setState(
                                  {
                                    money_transfer_list_userData:
                                      result.data.response,
                                  },
                                  () => {
                                    if (
                                      this.state.money_transfer_add_mode ==
                                      'edit'
                                    ) {
                                      //Toast only

                                      this.successAwesomeAlertMessage(
                                        'Edit sucessful',
                                        0,
                                      );
                                    } else {
                                      //Toast only

                                      this.successAwesomeAlertMessage(
                                        'Beneficary has been added',
                                        0,
                                      );
                                    }
                                  },
                                );
                              } else {
                                this.setState(
                                  {
                                    money_transfer_list_userData: [],
                                    money_transfer_list_moneyTrasferPageEditable: false,
                                  },
                                  () => {
                                    //this.handleBackButtonClick();

                                    this.errorAwesomeAlertMessage(
                                      'Something went wrong',
                                      0,
                                    );
                                  },
                                );
                              }
                            },
                          );
                        }
                        this.setState({buttonLoading: false});
                      })
                      .catch((err) => {
                        this.setState({buttonLoading: false}, () => {});

                        console.log('Error', err.response);
                      });
                  } else {
                    this.setState({buttonLoading: false}, () => {
                      if (money_transfer_add_Beneficiaryname == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter beneficiary name',
                        );
                      } else if (money_transfer_add_BeneficiaryAccNo == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter beneficiary account number',
                        );
                      } else if (money_transfer_add_BeneficiaryBank == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter beneficiary bank',
                        );
                      } else if (money_transfer_add_BeneficiaryBranch == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter beneficiary Branch',
                        );
                      } else if (money_transfer_add_BeneficiaryIfsc == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter beneficiary IFSC code',
                        );
                      }
                    });
                  }
                });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Beneficiary Name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter benefiary name'}
              value={this.state.money_transfer_add_Beneficiaryname}
              onChangeText={(text) =>
                this.setState({money_transfer_add_Beneficiaryname: text})
              }
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //  marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Beneficiary Account Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter beneficiary account number'}
              value={this.state.money_transfer_add_BeneficiaryAccNo}
              onChangeText={(text) =>
                this.setState({money_transfer_add_BeneficiaryAccNo: text})
              }
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //  marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Bank name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter bank name'}
              value={this.state.money_transfer_add_BeneficiaryBank}
              onChangeText={(text) =>
                this.setState({money_transfer_add_BeneficiaryBank: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Bank branch'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter bank branch'}
              value={this.state.money_transfer_add_BeneficiaryBranch}
              onChangeText={(text) =>
                this.setState({money_transfer_add_BeneficiaryBranch: text})
              }
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'IFSC code'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter IFSC code'}
              value={this.state.money_transfer_add_BeneficiaryIfsc}
              onChangeText={(text) =>
                this.setState({money_transfer_add_BeneficiaryIfsc: text})
              }
            />
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getSettlementPage() {
    const {boxDimension, showPassword} = this.state;
    let {
      settlement_transfer_amount,
      profile_accno_name,
      profile_accno_no,
      profile_bank_name,
      profile_bank_banch,
      profile_ifsc_code,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Settlement
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();
                this.setState({buttonLoading: true}, () => {
                  if (settlement_transfer_amount > 0) {
                    if (this.state.settlement_transfer_limit > 0) {
                      makeSettlement_Settlement({
                        settlement_transfer_amount,
                      })
                        .then((result) => {
                          if (result.data) {
                            if (
                              result.data.response &&
                              result.data.response == true
                            ) {
                              let message =
                                result.data.message &&
                                result.data.message !== ''
                                  ? result.data.message
                                  : 'Bank settlement is pending';
                              this.successAwesomeAlertMessage(message, 0);
                            } else {
                              let message =
                                result.data.message &&
                                result.data.message !== ''
                                  ? result.data.message
                                  : 'Something went wrong';

                              this.errorAwesomeAlertMessage(message, 0);
                            }
                          }
                          console.log(result.data);
                          this.setState({buttonLoading: false}, () => {
                            // if (
                            //   result.data &&
                            //   result.data.response &&
                            //   result.data.response == true
                            // ) {
                            //   this.handleBackButtonClick();
                            // }
                          });
                        })
                        .catch((err) => {
                          this.setState({buttonLoading: false}, () => {});

                          console.log('Error', err.response);
                        });
                    } else {
                      this.setState({buttonLoading: false});
                      this.errorAwesomeAlertMessage(
                        'Daily settlement limit reached',
                        0,
                      );
                    }
                  } else {
                    this.setState({buttonLoading: false}, () => {
                      if (settlement_transfer_amount < 1) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid amount',
                        );
                      }
                    });
                  }
                });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            showsVerticalScrollIndicator={false}
            scrollEnabled={true}>
            <View
              style={{
                height: 100,
                width: '100%',
                alignItems: 'center',
                justifyContent: 'center',
              }}>
              <Input
                autoCapitalize={'none'}
                inputContainerStyle={{
                  paddingHorizontal: 10,
                  borderWidth: 2,
                  borderRadius: 3,
                  borderColor: '#E0E4E9',
                  marginLeft: 1,
                  backgroundColor: '#F8F9FA',
                }}
                containerStyle={{
                  width: '95%',
                  paddingHorizontal: 0,
                }}
                autoCorrect={false}
                keyboardType={'numeric'}
                // label={"Amount"}
                labelStyle={{
                  color: '#535659',
                  fontSize: 14,
                  marginBottom: 10,
                  marginLeft: 0,
                }}
                placeholderTextColor={'grey'}
                placeholder={'Enter Amount'}
                value={this.state.settlement_transfer_amount}
                onChangeText={(text) =>
                  this.setState({settlement_transfer_amount: text})
                }
              />
            </View>
            <View
              style={{
                height: 140,
                width: '100%',
                backgroundColor: '#fff',
                marginBottom: 10,
                justifyContent: 'center',
                alignItems: 'center',
              }}>
              <View
                style={{
                  height: '70%',
                  width: '95%',
                  backgroundColor: '#FFB800',
                  borderRadius: 8,
                  flexDirection: 'row',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}>
                <View
                  style={{
                    flex: 1,
                    height: '95%',
                    alignItems: 'center',
                    borderRightWidth: 1,
                    borderColor: '#FFCD4C',
                  }}>
                  <View
                    style={{
                      flex: 2,
                      alignItems: 'center',
                      justifyContent: 'center',
                    }}>
                    {this.state.settlement_transfer_status_loading == true && (
                      <ActivityIndicator size={'large'} color={'#fff'} />
                    )}
                    {this.state.settlement_transfer_status_loading == false && (
                      <Text
                        style={{
                          fontSize: 45,
                          fontWeight: 'bold',
                          color: '#001847',
                        }}>
                        {this.state.settlement_transfer_limit}
                      </Text>
                    )}
                  </View>
                  <View
                    style={{
                      flex: 1,
                      alignItems: 'center',
                      justifyContent: 'center',
                    }}>
                    <Text
                      style={{
                        fontSize: 16,
                        color: '#806824',
                        fontWeight: 'bold',
                      }}>
                      current limit
                    </Text>
                  </View>
                </View>
                <View style={{flex: 1, height: '95%', alignItems: 'center'}}>
                  <View
                    style={{
                      flex: 2,
                      alignItems: 'center',
                      justifyContent: 'center',
                    }}>
                    {this.state.settlement_transfer_status_loading == true && (
                      <ActivityIndicator size={'large'} color={'#fff'} />
                    )}
                    {this.state.settlement_transfer_status_loading == false && (
                      <View
                        style={{
                          flexDirection: 'row',
                          flex: 1,
                          alignItems: 'center',
                        }}>
                        <View
                          style={{
                            alignItems: 'flex-end',
                            justifyContent: 'center',
                            paddingRight: 2,
                          }}>
                          <Icon
                            name="rupee"
                            type={'font-awesome'}
                            size={19}
                            color="#001847"
                            containerStyle={{
                              fontSize: 45,
                              fontWeight: 'bold',
                              color: '#001847',
                            }}
                          />
                        </View>

                        <View style={{}}>
                          <Text
                            numberOfLines={1}
                            ellipsizeMode={'tail'}
                            style={{
                              fontSize: 45,
                              fontWeight: 'bold',
                              color: '#001847',
                            }}>
                            {this.state.settlement_transfer_service_charge}
                          </Text>
                        </View>
                      </View>
                    )}
                  </View>

                  <View
                    style={{
                      flex: 1,
                      alignItems: 'center',
                      justifyContent: 'center',
                    }}>
                    <Text
                      style={{
                        fontSize: 16,
                        color: '#806824',
                        fontWeight: 'bold',
                      }}>
                      service charge
                    </Text>
                  </View>
                </View>
              </View>
            </View>
            <View
              style={{
                height: 180,
                width: '100%',
                alignItems: 'center',
                justifyContent: 'flex-start',
              }}>
              {/* profile_accno_name:'',
      profile_accno_no:'',
      profile_bank_name:'',
      profile_bank_banch:'',
      profile_ifsc_code:'', */}
              <View
                style={{
                  height: 170,
                  width: '94%',
                  borderTopWidth: 1,
                  borderLeftWidth: 1,
                  borderRightWidth: 1,
                  borderColor: '#c0c0c8',
                  backgroundColor: '#fff',
                }}>
                <View
                  style={{
                    height: '98%',
                    width: '100%',
                    paddingHorizontal: 5,
                    backgroundColor: 'transparent',
                  }}>
                  <View
                    style={{
                      flex: 2,
                      flexDirection: 'row',
                      backgroundColor: 'transparent',
                      paddingVertical: 2,
                      width: '100%',
                    }}>
                    <View
                      style={{
                        flex: 1,
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'center',
                      }}>
                      <View
                        style={{
                          flex: 1,
                          justifyContent: 'center',
                          alignItems: 'center',
                        }}>
                        <View
                          style={{
                            height: 10,
                            width: 10,
                            backgroundColor: '#EF4041',
                            borderRadius: 5,
                            marginTop: 5,
                          }}
                        />
                      </View>
                      <View
                        style={{flex: 9, overflow: 'hidden', paddingLeft: 5}}>
                        <Text
                          numberOfLines={1}
                          ellipsizeMode={'tail'}
                          style={{
                            fontSize: 24,
                            fontWeight: 'bold',
                            color: '#54565A',
                          }}>
                          {profile_accno_name}
                        </Text>
                      </View>
                    </View>
                  </View>
                  <View
                    style={{
                      flex: 2,
                      flexDirection: 'row',
                      backgroundColor: 'transparent',
                      paddingVertical: 3,
                      paddingRight: 3,
                      paddingLeft: 39,
                    }}>
                    <View style={{flex: 1, alignItems: 'flex-start'}}>
                      <View
                        style={{
                          flex: 5,
                          overflow: 'hidden',
                          paddingVerical: 3,
                        }}>
                        <Text
                          numberOfLines={1}
                          ellipsizeMode={'tail'}
                          style={{
                            alignSelf: 'flex-start',
                            color: '#7B8899',
                            fontWeight: 'bold',
                            paddingVertical: 3,
                          }}>
                          Acc no :
                        </Text>
                      </View>
                      <View style={{flex: 9, overflow: 'hidden'}}>
                        <Text
                          numberOfLines={1}
                          ellipsizeMode={'tail'}
                          style={{
                            fontSize: 16,
                            fontWeight: 'bold',
                            color: '#54565A',
                          }}>
                          {profile_accno_no}
                        </Text>
                      </View>
                    </View>
                    <View style={{flex: 1, alignItems: 'flex-start'}}>
                      <View
                        style={{
                          flex: 5,
                          overflow: 'hidden',
                          paddingVerical: 3,
                        }}>
                        <Text
                          numberOfLines={1}
                          ellipsizeMode={'tail'}
                          style={{
                            alignSelf: 'flex-start',
                            color: '#7B8899',
                            fontWeight: 'bold',
                            paddingVertical: 3,
                          }}>
                          IFSC Code :
                        </Text>
                      </View>
                      <View style={{flex: 9, overflow: 'hidden'}}>
                        <Text
                          numberOfLines={1}
                          ellipsizeMode={'tail'}
                          style={{
                            fontSize: 16,
                            fontWeight: 'bold',
                            color: '#54565A',
                          }}>
                          {profile_ifsc_code}
                        </Text>
                      </View>
                    </View>
                  </View>

                  <View
                    style={{
                      flexDirection: 'row',
                      backgroundColor: 'transparent',
                      paddingLeft: 39,
                      paddingBottom: 5,
                    }}>
                    <View
                      style={{
                        flex: 1,
                        flexDirection: 'row',
                        alignItems: 'center',
                      }}>
                      <View
                        style={{
                          flex: 1,
                          overflow: 'hidden',
                          flexDirection: 'row',
                        }}>
                        <View
                          style={{
                            overflow: 'hidden',
                            alignItems: 'center',
                            maxWidth: '40%',
                            justifyContent: 'center',
                            paddingBottom: 5,
                          }}>
                          <Text
                            numberOfLines={2}
                            ellipsizeMode={'tail'}
                            style={{
                              fontSize: 16,
                              fontWeight: 'bold',
                              color: '#54565A',
                            }}>
                            {profile_bank_name}
                          </Text>
                        </View>
                        <View
                          style={{
                            overflow: 'hidden',
                            alignItems: 'center',
                            justifyContent: 'center',
                            paddingBottom: 5,
                          }}>
                          <Text
                            numberOfLines={2}
                            ellipsizeMode={'tail'}
                            style={{
                              fontSize: 16,
                              fontWeight: 'bold',
                              color: '#54565A',
                            }}>
                            {'  -  '}
                          </Text>
                        </View>
                        <View
                          style={{
                            overflow: 'hidden',
                            alignItems: 'center',
                            maxWidth: '40%',
                            justifyContent: 'center',
                            paddingBottom: 5,
                          }}>
                          <Text
                            numberOfLines={2}
                            ellipsizeMode={'tail'}
                            style={{
                              fontSize: 16,
                              fontWeight: 'bold',
                              color: '#54565A',
                            }}>
                            {profile_bank_banch}
                          </Text>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
                <View
                  style={{
                    height: '2%',
                    width: '100%',
                    backgroundColor: 'red',
                    flexDirection: 'row',
                  }}>
                  <View
                    style={{
                      flex: 3,
                      backgroundColor: '#00BC8B',
                      borderBottomWidth: 1,
                      borderColor: '#00AF81',
                      borderLeftWidth: 1,
                      boderLeftColor: '#EDEDED',
                    }}
                  />
                  <View
                    style={{
                      flex: 2,
                      backgroundColor: '#FF9E01',
                      borderBottomWidth: 1,
                      borderColor: '#ED9301',
                    }}
                  />
                  <View
                    style={{
                      flex: 1,
                      backgroundColor: '#EF3737',
                      borderBottomWidth: 1,
                      borderColor: '#DE3333',
                      borderRightWidth: 1,
                      boderRightColor: '#EDEDED',
                    }}
                  />
                </View>
              </View>
            </View>
          </ScrollView>
          <View
            style={{
              height: 150,
              backgroundColor: '#fff',
              width: '100%',
              alignItems: 'flex-start',
              justifyContent: 'center',
              paddingHorizontal: 15,
            }}>
            <Text
              style={{color: '#999999', fontSize: 16, textAlign: 'justify'}}>
              {'Settlement cut off timings :'}
            </Text>
            <Text
              style={{
                color: '#00000090',
                fontSize: 16,
                fontWeight: 'bold',
                textAlign: 'justify',
                marginBottom: 5,
              }}>
              {'11:00 am, 1:00 pm, 3:00 pm, 5:00 pm'}
            </Text>
            <Text
              style={{color: '#999999', fontSize: 16, textAlign: 'justify'}}>
              {'Note : '}
            </Text>
            <Text
              style={{
                color: '#00000090',
                fontSize: 16,
                fontWeight: 'bold',
                textAlign: 'justify',
              }}>
              {'settlement process is possible only on bank working days'}
            </Text>
          </View>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getWaterAuthorityPaymentPage() {
    const {water_auth_boxDimension, water_auth_showPassword} = this.state;
    const {
      water_auth_Name,
      water_auth_consumerId,
      water_auth_mobileNumber,
      water_auth_dueDate,
      water_auth_billNumber,
      water_auth_consumerNumber,
      water_auth_amount,
      water_auth_section,
      water_auth_date,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
              paddingRight: 5,
              overflow: 'hidden',
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Water Authority Payment
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                if (this.state.water_auth_amount_loading == false) {
                  Keyboard.dismiss();

                  let water_auth_mobileNum = water_auth_mobileNumber.toString();

                  this.setState({buttonLoading: true}, () => {
                    if (
                      //  water_auth_Name !== "" &&
                      // water_auth_consumerId !== "" &&
                      // water_auth_mobileNum.length == 10 &&
                      // water_auth_billNumber !== "" &&
                      water_auth_amount !== '0' &&
                      // water_auth_section !== "" &&
                      water_auth_consumerNumber !== ''
                    ) {
                      WaterAuthoriy_Request_billPayment({
                        // water_auth_date,
                        // water_auth_Name,
                        //water_auth_consumerId,
                        //  water_auth_mobileNum,
                        // water_auth_dueDate,
                        //  water_auth_billNumber,
                        water_auth_amount,
                        //water_auth_section,
                        water_auth_consumerNumber,
                      })
                        .then((result) => {
                          if (result.data && result.data.response == true) {
                            console.log(
                              result.data,
                              'water authority bill payment done successfully',
                            );
                            this.setState(
                              {
                                water_auth_dueDate: water_auth_date,
                                water_auth_Name: '',
                                water_auth_consumerId: '',
                                water_auth_mobileNumber: '',
                                water_auth_billNumber: '',
                                water_auth_amount: '0',
                                water_auth_section: '',
                                water_auth_consumerNumber: '',
                                water_auth_serviceCharge: 0,
                                buttonLoading: false,
                              },
                              () => {
                                this.successAwesomeAlertMessage(
                                  result.data.message &&
                                    result.data.message == ''
                                    ? result.data.message
                                    : 'water authority bill payment done successfully',
                                  0,
                                );
                              },
                            );
                          } else if (
                            result.data &&
                            result.data.response == false
                          ) {
                            this.setState({buttonLoading: false});
                            if (
                              result.data.message &&
                              result.data.message !== ''
                            ) {
                              this.errorAwesomeAlertMessage(
                                result.data.message,
                                0,
                              );
                            } else {
                              this.errorAwesomeAlertMessage(
                                'Something went wrong',
                                0,
                              );
                            }
                          }
                          this.setState({buttonLoading: false}, () => {
                            if (
                              result.data &&
                              result.data.response &&
                              result.data.response == true
                            ) {
                              //this.handleBackButtonClick();
                            }
                          });
                        })
                        .catch((err) => {
                          this.setState({buttonLoading: false}, () => {});
                          this.errorAwesomeAlertMessage(
                            'Something went wrong',
                            0,
                          );
                          console.log('Error', err.response);
                        });
                    } else {
                      this.setState({buttonLoading: false}, () => {
                        // if (water_auth_Name == "") {
                        //   alert("Please enter a name");
                        // } else if (water_auth_consumerId == "") {
                        //   alert("Please enter a consumer ID");
                        // } else if (water_auth_mobileNum.length < 10) {
                        //   this.generalAwesomeAlertMessage("Please enter valid mobile number");
                        // } else if (water_auth_billNumber == "") {
                        //   this.generalAwesomeAlertMessage("Please enter  bill number");
                        // } else
                        if (water_auth_consumerNumber == '') {
                          this.generalAwesomeAlertMessage(
                            'Please enter consumer id',
                          );
                        }
                        // else if (water_auth_section == "") {
                        //   this.generalAwesomeAlertMessage("Please enter section");
                        // }
                        else if (water_auth_amount == '0') {
                          this.generalAwesomeAlertMessage(
                            'Please enter valid consumer id',
                          );
                        }
                      });
                    }
                  });
                } else {
                  //Mahagram.Toast("Fetching amount from server");
                }
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Date'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter benefiary name'}
              value={moment().format('DD-MM-YYYY')}
              editable={false}
              //onChangeText={text => this.setState({ Beneficiaryname: text })}
            />
            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                //marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Name"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter name"}
              value={this.state.water_auth_Name}
              onChangeText={(text) => this.setState({ water_auth_Name: text })}
            /> */}

            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Consumer Id"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter consumer ID"}
              value={this.state.water_auth_consumerId}
              onChangeText={(text) =>
                this.setState({ water_auth_consumerId: text }, () => {
                  this.doFetchAmount(this.state.water_auth_consumerId, "kwa");
                })
              }
            /> */}
            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                //marginTop: 20
              }}
              autoCorrect={false}
              keyboardType={"numeric"}
              maxLength={10}
              label={"Mobile Number"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter mobile number"}
              value={this.state.water_auth_mobileNumber}
              onChangeText={(text) =>
                this.setState({ water_auth_mobileNumber: text })
              }
            /> */}

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              maxLength={10}
              keyboardType={'numeric'}
              label={'Consumer Id'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter consumer id'}
              value={this.state.water_auth_consumerNumber}
              onChangeText={(text) => {
                if (
                  this.state.water_auth_consumerNumber.toString().length <= 10
                ) {
                  this.setState(
                    {water_auth_consumerNumber: text, water_auth_amount: '0'},
                    () => {
                      // this.doFetchAmount(
                      //   this.state.water_auth_consumerNumber,
                      //   'kwa',
                      // );
                    },
                  );
                }
              }}
              rightIcon={this.getActivityShow(
                this.state.water_auth_amount_loading,
              )}
            />

            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              keyboardType={"numeric"}
              label={"Bill Number"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter bill number"}
              value={this.state.water_auth_billNumber}
              onChangeText={(text) =>
                this.setState({ water_auth_billNumber: text })
              }
            /> */}

            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Section"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter section"}
              value={this.state.water_auth_section}
              onChangeText={(text) =>
                this.setState({ water_auth_section: text })
              }
            />
            <Input
              editable={false}
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Due Date"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter due date"}
              value={this.state.water_auth_dueDate}
              rightIcon={
                <Icon
                  color="#444"
                  size={20}
                  type="entypo"
                  underlayColor="rgba(255,255,255,0)"
                  name={"calendar"}
                  //name={'eye'}
                  onPress={() =>
                    this.setState({
                      water_auth_changeDateOfPayment: !this.state
                        .water_auth_changeDateOfPayment,
                    })
                  }
                />
              }
              //onChangeText={text => this.setState({ DateofPayment: text })}
            />
            {this.state.water_auth_changeDateOfPayment && (
              <DatePicker
                style={{ backgroundColor: "#fff", width: "100%" }}
                mode="date"
                format="DD-MM-YYYY"
                minimumDate={
                  new Date(
                    parseInt(
                      moment()
                        .format("DD-MM-YYYY")
                        .split("-")[2]
                    ),
                    parseInt(
                      moment()
                        .format("DD-MM-YYYY")
                        .split("-")[1]
                    ) - 1,
                    parseInt(
                      moment()
                        .format("DD-MM-YYYY")
                        .split("-")[0]
                    )
                  )
                }
                date={this.state.water_auth_dueDate}
                value={
                  new Date(
                    parseInt(this.state.water_auth_dueDate.split("-")[2]),
                    parseInt(this.state.water_auth_dueDate.split("-")[1]) - 1,
                    parseInt(this.state.water_auth_dueDate.split("-")[0])
                  )
                }
                confirmBtnText={"Confirm"}
                cancelBtnText={"Cancel"}
                showIcon={false}
                onChange={(event, date) => {
                  this.setState({
                    water_auth_dueDate: moment(date).format("DD-MM-YYYY"),

                    water_auth_changeDateOfPayment: false,
                  });
                }}
                customStyles={{
                  dateInput: {
                    borderWidth: 0,
                    alignItems: "flex-start",
                    //marginLeft: 10,
                  },
                  dateText: {
                    color: "#000",
                    fontSize: 18,
                  },
                  disabled: {
                    backgroundColor: "#ffff",
                  },
                }}
              />
            )} */}
            <View
              style={{
                marginBottom: 25,
                width: '100%',
                alignItems: 'flex-start',
                justifyContent: 'center',
                paddingHorizontal: 10,
              }}>
              <TouchableOpacity
                onPress={() => {
                  if (
                    this.state.water_auth_consumerNumber.toString().length == 10
                  ) {
                    this.doFetchAmount(
                      this.state.water_auth_consumerNumber,
                      'kwa',
                    );
                  } else {
                    this.generalAwesomeAlertMessage(
                      'Please enter valid consumer id',
                    );
                  }
                }}
                style={{
                  padding: 7,
                  backgroundColor: '#00BC86',
                  borderRadius: 6,
                  flexDirection: 'row',
                  alignSelf: 'flex-start',
                }}>
                <View style={{justifyContent: 'center', alignItems: 'center'}}>
                  <Icon
                    color="#fff"
                    size={20}
                    type="material-community"
                    name={'cloud-download'}
                    //name={'eye'}
                  />
                </View>
                <Text
                  style={{
                    fontSize: 16,
                    paddingLeft: 7,
                    paddingRight: 10,
                    color: '#fff',
                    fontWeight: 'bold',
                  }}>
                  Get Amount
                </Text>
              </TouchableOpacity>
            </View>
            <Input
              editable={false}
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderBottomWidth: 0,
                //borderRadius: 3,
                // borderColor: '#c0c0c8',
                // marginLeft: 1,
              }}
              containerStyle={{
                width: '90%',
                paddingHorizontal: 0,
                // marginTop: 5
              }}
              inputStyle={{fontSize: 35, fontWeight: 'bold'}}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Amount'}
              labelStyle={{
                color: '#002b36',
                fontSize: 18,
                marginBottom: -10,
                marginLeft: 0,
              }}
              leftIcon={
                <Icon
                  name="rupee"
                  type={'font-awesome'}
                  size={22}
                  color="#000"
                />
              }
              placeholderTextColor={'grey'}
              placeholder={'Enter amount'}
              value={this.state.water_auth_amount
                .toString()
                .replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,')}
              onChangeText={(text) => this.setState({water_auth_amount: text})}
            />
            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft:1
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                marginTop:20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Service Charge"}
              labelStyle={{ color: "#002b36", fontSize: 14, marginBottom: 10 ,marginLeft:0}}
              placeholderTextColor={"grey"}
              placeholder={"Enter service charge"}
              value={this.state.Beneficiaryname}
              
              onChangeText={text => this.setState({ Beneficiaryname: text })}
              
            /> */}
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getTransferToBeneficiary() {
    const {
      money_transfer_transfer_boxDimension,
      money_transfer_transfer_showPassword,
    } = this.state;
    let {
      money_transfer_transfer_Beneficiaryname,
      money_transfer_transfer_BeneficiaryAccNo,
      money_transfer_transfer_BeneficiaryBank,
      money_transfer_transfer_BeneficiaryBranch,
      money_transfer_transfer_BeneficiaryIfsc,
      money_transfer_transfer_amount,
      money_transfer_transfer_sender_name,
      money_transfer_transfer_sender_mobile_no,
      money_transfer_transfer_purpose,
      money_transfer_transfer_ServiceCharge,
      money_transfer_transfer_id,
      money_transfer_transfer_changeDateOfPayment,
      money_transfer_transfer_DateofPayment,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Transfer To Beneficiary
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();
                console.log('111');
                this.setState({buttonLoading: true}, () => {
                  if (
                    money_transfer_transfer_Beneficiaryname !== '' &&
                    money_transfer_transfer_BeneficiaryAccNo !== '' &&
                    money_transfer_transfer_BeneficiaryBank !== '' &&
                    money_transfer_transfer_BeneficiaryBranch !== '' &&
                    money_transfer_transfer_BeneficiaryIfsc !== '' &&
                    money_transfer_transfer_sender_name !== '' &&
                    money_transfer_transfer_sender_mobile_no.length == 10 &&
                    money_transfer_transfer_amount > 0
                    // &&
                    // purpose !== ""
                  ) {
                    console.log('here');
                    moneyTransferRequest_MoneyTransfer({
                      money_transfer_transfer_Beneficiaryname,
                      money_transfer_transfer_BeneficiaryAccNo,
                      money_transfer_transfer_BeneficiaryBank,
                      money_transfer_transfer_BeneficiaryBranch,
                      money_transfer_transfer_BeneficiaryIfsc,
                      money_transfer_transfer_amount,
                      money_transfer_transfer_sender_name,
                      money_transfer_transfer_sender_mobile_no,
                      money_transfer_transfer_purpose,
                      money_transfer_transfer_ServiceCharge,
                      money_transfer_transfer_id,
                      money_transfer_transfer_DateofPayment,
                    })
                      .then((result) => {
                        console.log(String(result.data), 'resuaaalt');
                        //this.getPer(String(result.data));
                        this.setState({buttonLoading: false}, () => {
                          if (result.data.response == false) {
                            this.errorAwesomeAlertMessage(
                              result.data.message && result.data.message !== ''
                                ? result.data.message
                                : 'Something went wrong',
                              0,
                            );
                          } else {
                            if (result.data.lastData) {
                              this.setState(
                                {
                                  money_transfer_invoice_data:
                                    result.data.lastData,
                                },
                                () => {
                                  let pageDepth = 30;
                                  this.onPressFunction(pageDepth);
                                },
                              );
                            } else {
                              this.successAwesomeAlertMessage(
                                'Transfer request is successful\nPending Approval',
                                0,
                              );
                            }
                          }
                        });
                      })
                      .catch((err) => {
                        this.setState({buttonLoading: false}, () => {
                          this.errorAwesomeAlertMessage(
                            'Something went wrong',
                            0,
                          );
                        });

                        console.log('Error', err.response);
                      });
                  } else {
                    console.log('here123');
                    this.setState({buttonLoading: false}, () => {});

                    if (money_transfer_transfer_amount < 1) {
                      this.generalAwesomeAlertMessage(
                        'Please enter transfer amount',
                      );
                    }
                    if (money_transfer_transfer_sender_name == '') {
                      this.generalAwesomeAlertMessage(
                        'Please enter sender name',
                      );
                    }
                    if (money_transfer_transfer_sender_mobile_no.length != 10) {
                      this.generalAwesomeAlertMessage(
                        'Please enter valid sender mobile number',
                      );
                    }

                    // else if(purpose=='')
                    // {alert("Please enter your purpose");

                    // }
                    // else if(ServiceCharge==''){
                    //   alert("Please enter beneficiary name");
                    // }
                  }
                });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              editable={false}
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Beneficiary Name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={''}
              value={this.state.money_transfer_transfer_Beneficiaryname}
              onChangeText={(text) =>
                this.setState({money_transfer_transfer_Beneficiaryname: text})
              }
            />
            <Input
              editable={false}
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Beneficiary Account Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={''}
              value={this.state.money_transfer_transfer_BeneficiaryAccNo}
              onChangeText={(text) =>
                this.setState({
                  money_transfer_transfer_BeneficiaryAccNo: text,
                })
              }
            />

            <Input
              editable={false}
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Date of Payment'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter date of payment'}
              value={this.state.money_transfer_transfer_DateofPayment}
              rightIcon={
                <Icon
                  color="#444"
                  size={20}
                  type="entypo"
                  underlayColor="rgba(255,255,255,0)"
                  name={'calendar'}
                  //name={'eye'}
                  onPress={() =>
                    this.setState({
                      money_transfer_transfer_changeDateOfPayment: !this.state
                        .money_transfer_transfer_changeDateOfPayment,
                    })
                  }
                />
              }
              //onChangeText={text => this.setState({ DateofPayment: text })}
            />
            {this.state.money_transfer_transfer_changeDateOfPayment && (
              <DatePicker
                style={{backgroundColor: '#fff', width: '100%'}}
                mode="date"
                format="DD-MM-YYYY"
                minimumDate={
                  new Date(
                    parseInt(moment().format('DD-MM-YYYY').split('-')[2]),
                    parseInt(moment().format('DD-MM-YYYY').split('-')[1]) - 1,
                    parseInt(moment().format('DD-MM-YYYY').split('-')[0]),
                  )
                }
                date={this.state.money_transfer_transfer_DateofPayment}
                value={
                  new Date(
                    parseInt(
                      this.state.money_transfer_transfer_DateofPayment.split(
                        '-',
                      )[2],
                    ),
                    parseInt(
                      this.state.money_transfer_transfer_DateofPayment.split(
                        '-',
                      )[1],
                    ) - 1,
                    parseInt(
                      this.state.money_transfer_transfer_DateofPayment.split(
                        '-',
                      )[0],
                    ),
                  )
                }
                confirmBtnText={'Confirm'}
                cancelBtnText={'Cancel'}
                showIcon={false}
                onChange={(event, date) => {
                  this.setState({
                    money_transfer_transfer_DateofPayment: moment(date).format(
                      'DD-MM-YYYY',
                    ),

                    money_transfer_transfer_changeDateOfPayment: false,
                  });
                }}
                customStyles={{
                  dateInput: {
                    borderWidth: 0,
                    alignItems: 'flex-start',
                    //marginLeft: 10,
                  },
                  dateText: {
                    color: '#000',
                    fontSize: 18,
                  },
                  disabled: {
                    backgroundColor: '#ffff',
                  },
                }}
              />
            )}

            <Input
              editable={false}
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Bank Name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={''}
              value={this.state.money_transfer_transfer_BeneficiaryBank}
              onChangeText={(text) =>
                this.setState({money_transfer_transfer_BeneficiaryBank: text})
              }
            />
            <Input
              editable={false}
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Bank Branch'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={''}
              value={this.state.money_transfer_transfer_BeneficiaryBranch}
              onChangeText={(text) =>
                this.setState({
                  money_transfer_transfer_BeneficiaryBranch: text,
                })
              }
            />
            <Input
              editable={false}
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'IFSC Code'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={''}
              value={this.state.money_transfer_transfer_BeneficiaryIfsc}
              onChangeText={(text) =>
                this.setState({money_transfer_transfer_BeneficiaryIfsc: text})
              }
            />
            <Input
              editable={this.state.money_transfer_transfer_sender_name==''?true:false}
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Sender Name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter sender name'}
              value={this.state.money_transfer_transfer_sender_name}
              onChangeText={(text) =>
                this.setState({money_transfer_transfer_sender_name: text})
              }
            />
            <Input
                editable={false}
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 20
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Sender Mobile no.'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              maxLength={10}
              placeholderTextColor={'grey'}
              placeholder={'Enter sender mobile number'}
              value={this.state.money_transfer_transfer_sender_mobile_no}
              onChangeText={(text) =>
                this.setState({money_transfer_transfer_sender_mobile_no: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Amount'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter amount'}
              value={this.state.money_transfer_transfer_amount}
              onChangeText={(text) =>
                this.setState({money_transfer_transfer_amount: text})
              }
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Purpose'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter purpose'}
              value={this.state.money_transfer_transfer_purpose}
              onChangeText={(text) =>
                this.setState({money_transfer_transfer_purpose: text})
              }
            />
            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#002b36",
                marginLeft: 1
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Service Charge"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0
              }}
              placeholderTextColor={"#BFBEBE"}
              placeholder={"Enter service charge"}
              value={this.state.ServiceCharge}
              defaultValue={'0'}
              onChangeText={text => this.setState({ ServiceCharge: text })}
            /> */}
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getBsnlPaymentPage() {
    const {bsnl_boxDimension, bsnl_showPassword} = this.state;
    const {
      bsnl_dueDate,
      bsnl_Name,
      bsnl_mobileNumber,
      bsnl_landlineWthCode,
      bsnl_accountNumber,
      bsnl_selectedOperator,
      bsnl_selectedOperatorList,
      bsnl_amount,
      bsnl_date,
      bsnl_connectionType,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              BSNL Payment
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                if (this.state.bsnl_amount_loading == false) {
                  Keyboard.dismiss();

                  let bsnl_mobileNum = bsnl_mobileNumber.toString();

                  this.setState({buttonLoading: true}, () => {
                    if (
                      //  bsnl_Name !== "" &&
                      // bsnl_mobileNum.length == 10 &&
                      bsnl_landlineWthCode !== '' &&
                      bsnl_accountNumber !== '' &&
                      // bsnl_selectedOperator !== "" &&
                      bsnl_amount !== '0' &&
                      bsnl_connectionType !== ''
                    ) {
                      bsnl_Multi_billPayment({
                        //  bsnl_dueDate,
                        //  bsnl_Name,
                        //   bsnl_mobileNum,
                        bsnl_landlineWthCode,
                        bsnl_accountNumber,
                        //bsnl_selectedOperator,
                        bsnl_amount,
                        // bsnl_date,
                        bsnl_connectionType,
                      })
                        .then((result) => {
                          if (result.data && result.data.response == true) {
                            console.log(
                              result.data,
                              'bsnl payment done successfully',
                            );
                            this.setState(
                              {
                                bsnl_dueDate: moment().format('DD-MM-YYYY'),
                                bsnl_Name: '',
                                bsnl_mobileNumber: '',
                                bsnl_landlineWthCode: '',
                                bsnl_accountNumber: '',
                                bsnl_selectedOperator: '',
                                bsnl_amount: '0',
                                bsnl_date: moment().format('DD-MM-YYYY'),
                                bsnl_connectionType: 'Landline Individual',
                                buttonLoading: false,
                              },
                              () => {
                                this.successAwesomeAlertMessage(
                                  result.data.message &&
                                    result.data.message == ''
                                    ? result.data.message
                                    : 'Bsnl payment done successfully',
                                  0,
                                );
                              },
                            );
                          } else if (
                            result.data &&
                            result.data.response == false
                          ) {
                            this.setState({buttonLoading: false});
                            if (
                              result.data.message &&
                              result.data.message !== ''
                            ) {
                              this.errorAwesomeAlertMessage(
                                result.data.message &&
                                  result.data.message !== ''
                                  ? result.data.message
                                  : 'Something went wrong',
                                0,
                              );
                            } else {
                              this.errorAwesomeAlertMessage(
                                'Something went wrong',
                                0,
                              );
                            }
                          }
                          this.setState({buttonLoading: false}, () => {
                            if (
                              result.data &&
                              result.data.response &&
                              result.data.response == true
                            ) {
                              //this.handleBackButtonClick();
                            }
                          });
                        })
                        .catch((err) => {
                          this.setState({buttonLoading: false}, () => {});
                          this.errorAwesomeAlertMessage(
                            'Something went wrong',
                            0,
                          );
                          console.log('Error', err.response);
                        });
                    } else {
                      this.setState({buttonLoading: false}, () => {
                        // if (bsnl_Name == "") {
                        //   alert("Please enter a name");
                        // } else if (bsnl_mobileNum.length < 10) {
                        //   this.generalAwesomeAlertMessage("Please enter valid mobile number");
                        // } else if (bsnl_selectedOperator == "") {
                        //   alert("Please select an operator");
                        // } else
                        if (bsnl_landlineWthCode == '') {
                          this.generalAwesomeAlertMessage(
                            'Please enter your landline number',
                          );
                        } else if (bsnl_accountNumber == '') {
                          this.generalAwesomeAlertMessage(
                            'Please enter your account number',
                          );
                        } else if (bsnl_connectionType == '') {
                          this.generalAwesomeAlertMessage(
                            'Please enter your connection type ',
                          );
                        } else if (bsnl_amount == '0') {
                          this.generalAwesomeAlertMessage(
                            'Please enter valid landline number',
                          );
                        }
                      });
                    }
                  });
                } else {
                  // Mahagram.Toast("Fetching amount from server");
                }
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Date'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter benefiary name'}
              value={moment().format('DD-MM-YYYY')}
              editable={false}
              //onChangeText={text => this.setState({ Beneficiaryname: text })}
            />
            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Name"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter name"}
              value={this.state.bsnl_Name}
              onChangeText={(text) => this.setState({ bsnl_Name: text })}
            /> */}

            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              maxLength={10}
              keyboardType={"numeric"}
              label={"Mobile Number"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter mobile number"}
              value={this.state.bsnl_mobileNumber}
              onChangeText={(text) =>
                this.setState({ bsnl_mobileNumber: text })
              }
            /> */}

            {/* <View
              style={{
                height: 100,
                width: "95%",
                alignItems: "flex-start",
                //marginTop: 20
              }}
            >
              <Text
                style={{ fontSize: 14, fontWeight: "bold", marginBottom: 11 }}
              >
                Select Operator
              </Text>
              <ModalSelectorInput
                containerStyle={{
                  borderWidth: 1,
                  borderRadius: 3,
                  height: "55%",
                  borderColor: "#c0c0c8",
                }}
                data={this.state.bsnl_selectedOperatorList}
                editable={true}
                value={this.state.bsnl_selectedOperator}
                placeholder={"Select an operator"}
                keyboardOpen={this.state.keyboardOpen}
                onItemSelect={(value) => {
                  this.setState({ bsnl_selectedOperator: value.name });
                }}
              />
            </View> */}

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                marginTop: 10,
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Landline Number (With STD Code)'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              maxLength={11}
              placeholderTextColor={'grey'}
              placeholder={'Enter landline number'}
              value={this.state.bsnl_landlineWthCode}
              onChangeText={(text) => {
                if (bsnl_landlineWthCode.toString().length <= 11) {
                  this.setState(
                    {bsnl_landlineWthCode: text, bsnl_amount: '0'},
                    () => {
                      // this.doFetchAmount(this.state.bsnl_landlineWthCode, 'tele');
                    },
                  );
                }
              }}
              rightIcon={this.getActivityShow(this.state.bsnl_amount_loading)}
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Account Number (10 digits)'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter account number'}
              value={this.state.bsnl_accountNumber}
              maxLength={10}
              onChangeText={(text) => this.setState({bsnl_accountNumber: text})}
            />
            <View
              style={{
                height: 80,
                width: '95%',
                alignItems: 'flex-start',
                // marginTop: 20
              }}>
              <ModalDropDownMenu
                initialValue={'Landline Individual'}
                LabelpaddingBottom={10}
                list={['Landline Individual', 'Landline Corporate']}
                label={'Connection Type'}
                value={this.state.bsnl_connectionType}
                dropDownLayoutHeight={50}
                showLabel={true}
                // paddingLeft={-5}
                //dropDownWidth={'95%'}
                optionalColor={'black'}
                editable={true}
                textColor={'#4D4B4B'}
                onSelectAnOption={(index) => {
                  if (index == 0) {
                    this.setState({
                      bsnl_connectionType: 'Landline Individual',
                    });
                  } else if (index == 1) {
                    this.setState({
                      bsnl_selectedOperator: 'Landline Corporate',
                    });
                  }
                }}
              />
            </View>

            {/* <Input
              editable={false}
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                marginTop: 20,
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Due Date"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter due date"}
              value={this.state.bsnl_dueDate}
              rightIcon={
                <Icon
                  color="#444"
                  size={20}
                  type="entypo"
                  underlayColor="rgba(255,255,255,0)"
                  name={"calendar"}
                  //name={'eye'}
                  onPress={() =>
                    this.setState({
                      bsnl_changeDateOfPayment: !this.state
                        .bsnl_changeDateOfPayment,
                    })
                  }
                />
              }
              //onChangeText={text => this.setState({ DateofPayment: text })}
            />
            {this.state.bsnl_changeDateOfPayment && (
              <DatePicker
                style={{ backgroundColor: "#fff", width: "100%" }}
                mode="date"
                format="DD-MM-YYYY"
                minimumDate={
                  new Date(
                    parseInt(
                      moment()
                        .format("DD-MM-YYYY")
                        .split("-")[2]
                    ),
                    parseInt(
                      moment()
                        .format("DD-MM-YYYY")
                        .split("-")[1]
                    ) - 1,
                    parseInt(
                      moment()
                        .format("DD-MM-YYYY")
                        .split("-")[0]
                    )
                  )
                }
                date={this.state.bsnl_dueDate}
                value={
                  new Date(
                    parseInt(this.state.bsnl_dueDate.split("-")[2]),
                    parseInt(this.state.bsnl_dueDate.split("-")[1]) - 1,
                    parseInt(this.state.bsnl_dueDate.split("-")[0])
                  )
                }
                confirmBtnText={"Confirm"}
                cancelBtnText={"Cancel"}
                showIcon={false}
                onChange={(event, date) => {
                  this.setState({
                    bsnl_dueDate: moment(date).format("DD-MM-YYYY"),

                    bsnl_changeDateOfPayment: false,
                  });
                }}
                customStyles={{
                  dateInput: {
                    borderWidth: 0,
                    alignItems: "flex-start",
                    //marginLeft: 10,
                  },
                  dateText: {
                    color: "#000",
                    fontSize: 18,
                  },
                  disabled: {
                    backgroundColor: "#ffff",
                  },
                }}
              />
            )} */}

            <View
              style={{
                marginTop: 30,
                marginBottom: 25,
                width: '100%',
                alignItems: 'flex-start',
                justifyContent: 'center',
                paddingHorizontal: 10,
              }}>
              <TouchableOpacity
                onPress={() => {
                  if (bsnl_landlineWthCode.toString().length == 11) {
                    this.doFetchAmount(this.state.bsnl_landlineWthCode, 'tele');
                  } else {
                    this.generalAwesomeAlertMessage(
                      'Please enter valid landline number',
                    );
                  }
                }}
                style={{
                  padding: 7,
                  backgroundColor: '#00BC86',
                  borderRadius: 6,
                  flexDirection: 'row',
                  alignSelf: 'flex-start',
                }}>
                <View style={{justifyContent: 'center', alignItems: 'center'}}>
                  <Icon
                    color="#fff"
                    size={20}
                    type="material-community"
                    name={'cloud-download'}
                    //name={'eye'}
                  />
                </View>
                <Text
                  style={{
                    fontSize: 16,
                    paddingLeft: 7,
                    paddingRight: 10,
                    color: '#fff',
                    fontWeight: 'bold',
                  }}>
                  Get Amount
                </Text>
              </TouchableOpacity>
            </View>
            <Input
              editable={false}
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderBottomWidth: 0,
                //borderRadius: 3,
                // borderColor: '#c0c0c8',
                // marginLeft: 1,
              }}
              containerStyle={{
                width: '90%',
                paddingHorizontal: 0,
              }}
              inputStyle={{fontSize: 35, fontWeight: 'bold'}}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Amount'}
              labelStyle={{
                color: '#002b36',
                fontSize: 18,
                marginBottom: -10,
                marginLeft: 0,
              }}
              leftIcon={
                <Icon
                  name="rupee"
                  type={'font-awesome'}
                  size={22}
                  color="#000"
                />
              }
              placeholderTextColor={'grey'}
              placeholder={'Enter amount'}
              value={this.state.bsnl_amount
                .toString()
                .replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,')}
              onChangeText={(text) => this.setState({bsnl_amount: text})}
            />

            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Service Charge"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter service charge"}
              value={this.state.Beneficiaryname}
              onChangeText={text => this.setState({ Beneficiaryname: text })}
            /> */}
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getAsianetPaymentPage() {
    const {
      asianet_boxDimension,
      asianet_showPassword,
      asianet_customerName,
      asianet_mobileNumber,
      asianet_address,
      asianet_subscriberId,
      asianet_amount,
      asianet_type,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Asianet Payment
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();

                let asianet_mobileNum = asianet_mobileNumber.toString();

                this.setState({buttonLoading: true}, () => {
                  if (
                    asianet_customerName !== '' &&
                    asianet_mobileNum.length == 10 &&
                    asianet_address !== '' &&
                    asianet_amount > 0 &&
                    asianet_subscriberId !== ''
                  ) {
                    asianet_payment_billPayment({
                      asianet_customerName,
                      asianet_mobileNum,
                      asianet_address,
                      asianet_amount,
                      asianet_subscriberId,
                      asianet_type,
                    })
                      .then((result) => {
                        if (result.data.response == false) {
                          this.errorAwesomeAlertMessage(
                            result.data.message && result.data.message !== ''
                              ? result.data.message
                              : 'Something went wrong',
                            0,
                          );
                        } else {
                          this.setState({buttonLoading: false}, () => {
                            //this.handleBackButtonClick();
                          });
                          this.successAwesomeAlertMessage(
                            'Asiant payment request done successfully\nPending approval',
                            0,
                          );
                        }
                        this.setState({buttonLoading: false}, () => {});
                      })
                      .catch((err) => {
                        this.setState({buttonLoading: false}, () => {});

                        this.errorAwesomeAlertMessage(
                          'Something went wrong',
                          0,
                        );
                        console.log('Error', err.response);
                      });
                  } else {
                    this.setState({buttonLoading: false}, () => {
                      if (asianet_customerName == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter customer name',
                        );
                      } else if (asianet_mobileNum.length < 10) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid mobile number',
                        );
                      } else if (asianet_address == '') {
                        this.generalAwesomeAlertMessage('Please enter address');
                      } else if (asianet_subscriberId == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter a subscriber ID',
                        );
                      } else if (asianet_amount < 1) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid amount',
                        );
                      }
                    });
                  }
                });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Customer Name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter Customer name'}
              value={this.state.asianet_customerName}
              autoCompleteType={'name'}
              onChangeText={(text) =>
                this.setState({asianet_customerName: text})
              }
              maxLength={30}
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 20
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Mobile Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter mobile number'}
              value={this.state.asianet_mobileNumber}
              autoCompleteType={'tel'}
              maxLength={10}
              onChangeText={(text) =>
                this.setState({asianet_mobileNumber: text})
              }
            />
            <View
              style={{
                height: 80,
                width: '95%',
                alignItems: 'flex-start',
                // marginTop: 20
              }}>
              <ModalDropDownMenu
                initialValue={'Broadband'}
                LabelpaddingBottom={10}
                list={['Broadband', 'Digital TV']}
                label={'Type'}
                value={this.state.asianet_type}
                dropDownLayoutHeight={50}
                showLabel={true}
                // paddingLeft={-5}
                //dropDownWidth={'95%'}
                optionalColor={'black'}
                editable={true}
                textColor={'#4D4B4B'}
                onSelectAnOption={(index) => {
                  if (index == 0) {
                    this.setState({
                      asianet_type: 'Broadband',
                    });
                  } else if (index == 1) {
                    this.setState({
                      asianet_type: 'Digital TV',
                    });
                  }
                }}
              />
            </View>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
                textAlignVertical: 'top',
              }}
              inputStyle={{textAlignVertical: 'top'}}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                marginTop: 25,
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Address'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter  address'}
              numberOfLines={3}
              multiline={true}
              autoCompleteType={'street-address'}
              value={this.state.asianet_address}
              onChangeText={(text) => this.setState({asianet_address: text})}
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 20
              }}
              autoCorrect={false}
              keyboardType={'default'}
              label={'Subscriber ID'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter subscriber ID'}
              value={this.state.asianet_subscriberId}
              onChangeText={(text) =>
                this.setState({asianet_subscriberId: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                //marginTop: 20
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Amount'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter amount'}
              value={this.state.asianet_amount}
              onChangeText={(text) => this.setState({asianet_amount: text})}
            />

            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft:1
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                marginTop:20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Service Charge"}
              labelStyle={{ color: "#002b36", fontSize: 14, marginBottom: 10 ,marginLeft:0}}
              placeholderTextColor={"grey"}
              placeholder={"Enter service charge"}
              value={this.state.Beneficiaryname}
              
              onChangeText={text => this.setState({ Beneficiaryname: text })}
              
            /> */}
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getMobilePaymentPage() {
    let {
      mobile_mobileNumber,
      mobile_regionName,
      mobile_providerName,
      mobile_amount,
      mobile_providerId,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Mobile Recharge
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();

                let mobile_mobileNum = mobile_mobileNumber.toString();

                this.setState({buttonLoading: true}, () => {
                  if (
                    mobile_regionName !== '' &&
                    mobile_amount > 0 &&
                    mobile_providerName !== '' &&
                    mobile_mobileNum.length == 10
                  ) {
                    mobileRechargeRequest_MobileDthRecharge({
                      mobile_regionName,
                      mobile_amount,
                      mobile_providerId,
                      mobile_mobileNum,
                    })
                      .then((result) => {
                        if (result.data && result.data.response == true) {
                          if (
                            result.data.recharge_response &&
                            result.data.recharge_response !== ''
                          )
                            var mobile_recharge_response = JSON.parse(
                              result.data.recharge_response,
                            );
                          if (
                            mobile_recharge_response.Response &&
                            mobile_recharge_response.StatusCode == '1'
                          ) {
                            if (
                              mobile_recharge_response.Response.Status ==
                                'SUCCESS' ||
                              mobile_recharge_response.Response.Status ==
                                'PENDING'
                            ) {
                              console.log(
                                result.data,
                                'moible recharge done successfully',
                              );
                              this.setState(
                                {
                                  mobile_mobileNumber: 0,
                                  mobile_providerName: '',
                                  mobile_regionName: 'Kerala',
                                  mobile_amount: 0,
                                  buttonLoading: false,
                                },
                                () => {
                                  this.successAwesomeAlertMessage(
                                    mobile_recharge_response.Response
                                      .TransactionID
                                      ? mobile_recharge_response.Response
                                          .Message
                                        ? mobile_recharge_response.Response
                                            .Message +
                                          '\nTransaction ID is ' +
                                          mobile_recharge_response.Response
                                            .TransactionID
                                        : 'Mobile recharge request successful' +
                                          '\nTransaction ID is ' +
                                          mobile_recharge_response.Response
                                            .TransactionID
                                      : 'Recharge Successful',
                                    0,
                                  );
                                },
                              );
                            } else {
                              this.setState({buttonLoading: false});

                              this.errorAwesomeAlertMessage(
                                mobile_recharge_response.Response.Message
                                  ? mobile_recharge_response.Response.Message
                                  : 'Recharge failed',
                                0,
                              );
                            }
                          } else {
                            if (mobile_recharge_response.StatusCode == '0') {
                              this.setState({buttonLoading: false});

                              this.errorAwesomeAlertMessage(
                                mobile_recharge_response.ErrorMessage
                                  ? mobile_recharge_response.ErrorMessage
                                  : 'Please try again later',
                                0,
                              );
                            }
                          }
                        } else if (
                          result.data &&
                          result.data.response == false
                        ) {
                          this.setState({buttonLoading: false});

                          this.errorAwesomeAlertMessage(
                            result.data.message
                              ? result.data.message
                              : 'Something went wrong',
                            0,
                          );
                        }
                      })
                      .catch((err) => {
                        this.setState({buttonLoading: false}, () => {});

                        this.errorAwesomeAlertMessage(
                          'Something went wrong',
                          0,
                        );
                        console.log('Error', err.response);
                      });
                  } else {
                    this.setState({buttonLoading: false}, () => {
                      if (mobile_mobileNum.length < 10) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid mobile number',
                        );
                      } else if (mobile_providerName == '') {
                        this.generalAwesomeAlertMessage(
                          'Please select a Operator',
                        );
                      } else if (mobile_regionName == '') {
                        this.generalAwesomeAlertMessage(
                          'Please select a region',
                        );
                      } else if (mobile_amount < 1) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid amount',
                        );
                      }
                    });
                  }
                });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              maxLength={10}
              label={'Enter your mobile number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter mobile number'}
              value={this.state.mobile_mobileNumber}
              onChangeText={(text) =>
                this.setState({mobile_mobileNumber: text})
              }
            />

            <View
              style={{
                height: 100,
                width: '95%',
                alignItems: 'flex-start',
                marginTop: 5,
              }}>
              <Text
                style={{fontSize: 14, fontWeight: 'bold', marginBottom: 11}}>
                Select Operator
              </Text>
              <ModalSelectorInput
                containerStyle={{
                  borderWidth: 1,
                  borderRadius: 3,
                  height: '52%',
                  borderColor: '#c0c0c8',
                }}
                activiy={this.state.mobile_providerListActivity}
                data={this.state.mobile_providerList}
                editable={true}
                value={this.state.mobile_providerName}
                placeholder={'Select an Operator'}
                keyboardOpen={this.state.keyboardOpen}
                onItemSelect={(value) => {
                  this.setState({
                    mobile_providerName: value.name,
                    mobile_providerId: value.id,
                  });
                }}
              />
            </View>

            {/* <View
            style={{
              height: 80,
              width: "95%",
              alignItems: "flex-start",
              marginTop: 20
            }}
          >
            <ModalDropDownMenu
              initialValue={"Select Account"}
              LabelpaddingBottom={10}
              list={["SBI", "FEDERAL"]}
              label={"Select Provider"}
              value={this.state.file_type_name}
              dropDownLayoutHeight={300}
              showLabel={true}
              // paddingLeft={-5}
              //dropDownWidth={'95%'}
              editable={true}
              textColor={"#4D4B4B"}
              onSelectAnOption={index => {}}
            />
          </View> */}
            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#002b36",
                marginLeft:1
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                marginTop:20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Confirm Prepaid Card Number"}
              labelStyle={{ color: "#002b36", fontSize: 14, marginBottom: 10 ,marginLeft:0}}
              placeholderTextColor={"#BFBEBE"}
              placeholder={"Re-Enter prepaid card number "}
              value={this.state.confirmprepaidCardNumber}
              
              onChangeText={text => this.setState({ confirmprepaidCardNumber: text })}
              
            /> */}

            <View
              style={{
                height: 100,
                width: '95%',
                alignItems: 'flex-start',
                marginTop: 10,
              }}>
              <Text
                style={{fontSize: 14, fontWeight: 'bold', marginBottom: 11}}>
                Select Region
              </Text>
              <ModalSelectorInput
                containerStyle={{
                  borderWidth: 1,
                  borderRadius: 3,
                  height: '52%',
                  borderColor: '#c0c0c8',
                }}
                activiy={this.state.mobile_regionListActivity}
                data={this.state.mobile_regionList}
                editable={true}
                value={this.state.mobile_regionName}
                placeholder={'Select a region'}
                keyboardOpen={this.state.keyboardOpen}
                onItemSelect={(value) => {
                  this.setState({mobile_regionName: value.name});
                }}
              />
            </View>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                marginTop: 10,
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Enter Amount'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter amount'}
              value={this.state.mobile_amount}
              onChangeText={(text) => this.setState({mobile_amount: text})}
            />
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getDthPaymentPage() {
    let {
      dth_customerId,
      dth_amount,
      dth_DthName,
      dth_DthProviderId,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Dth Recharge
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();

                this.setState({buttonLoading: true}, () => {
                  if (
                    dth_customerId !== '' &&
                    dth_amount > 0 &&
                    dth_DthName !== ''
                  ) {
                    DthRechargeRequest_MobileDthRecharge({
                      dth_customerId,
                      dth_amount,
                      dth_DthProviderId,
                    })
                      .then((result) => {
                        if (result.data && result.data.response == true) {
                          if (
                            result.data.recharge_response &&
                            result.data.recharge_response !== ''
                          )
                            var dth_recharge_response = JSON.parse(
                              result.data.recharge_response,
                            );
                          if (
                            dth_recharge_response.Response &&
                            dth_recharge_response.StatusCode == '1'
                          ) {
                            if (
                              dth_recharge_response.Response.Status ==
                                'SUCCESS' ||
                              dth_recharge_response.Response.Status == 'PENDING'
                            ) {
                              console.log(
                                result.data,
                                'Dth recharge done successfully',
                              );
                              this.setState(
                                {
                                  dth_DthName: '',
                                  dth_customerId: '',
                                  dth_amount: 0,
                                  buttonLoading: false,
                                },
                                () => {
                                  this.successAwesomeAlertMessage(
                                    dth_recharge_response.Response.TransactionID
                                      ? dth_recharge_response.Response.Message
                                        ? dth_recharge_response.Response
                                            .Message +
                                          '\nTransaction ID is ' +
                                          dth_recharge_response.Response
                                            .TransactionID
                                        : 'Dth payment request successful' +
                                          '\nTransaction ID is ' +
                                          dth_recharge_response.Response
                                            .TransactionID
                                      : 'Recharge Successful',
                                    0,
                                  );
                                },
                              );
                            } else {
                              this.setState({buttonLoading: false});

                              this.errorAwesomeAlertMessage(
                                dth_recharge_response.Response.Message
                                  ? dth_recharge_response.Response.Message
                                  : 'Recharge failed',
                                0,
                              );
                            }
                          } else {
                            this.setState({buttonLoading: false});
                            if (dth_recharge_response.StatusCode == '0') {
                              this.errorAwesomeAlertMessage(
                                dth_recharge_response.ErrorMessage
                                  ? dth_recharge_response.ErrorMessage
                                  : 'Please try again later',
                                0,
                              );
                            }
                          }
                        } else if (
                          result.data &&
                          result.data.response == false
                        ) {
                          this.setState({buttonLoading: false});

                          this.errorAwesomeAlertMessage(
                            result.data.message
                              ? result.data.message
                              : 'Something went wrong',
                            0,
                          );
                        }
                      })
                      .catch((err) => {
                        this.setState({buttonLoading: false}, () => {});

                        this.errorAwesomeAlertMessage(
                          'Something went wrong',
                          0,
                        );
                        console.log('Error', err.response);
                      });
                  } else {
                    this.setState({buttonLoading: false}, () => {
                      if (dth_DthName == '') {
                        this.generalAwesomeAlertMessage(
                          'Please select a DTH provider',
                        );
                      } else if (dth_customerId == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid customer ID',
                        );
                      } else if (dth_amount < 1) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid amount',
                        );
                      }
                    });
                  }
                });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <View
              style={{
                height: 100,
                width: '95%',
                alignItems: 'flex-start',
              }}>
              <Text
                style={{fontSize: 14, fontWeight: 'bold', marginBottom: 11}}>
                Select DTH Provider
              </Text>
              <ModalSelectorInput
                containerStyle={{
                  borderWidth: 1,
                  borderRadius: 3,
                  height: '52%',
                  borderColor: '#c0c0c8',
                }}
                data={this.state.dth_DthList}
                editable={true}
                activiy={this.state.dth_providerListActivity}
                value={this.state.dth_DthName}
                placeholder={'Select a DTH provider'}
                keyboardOpen={this.state.keyboardOpen}
                onItemSelect={(value) => {
                  this.setState({
                    dth_DthName: value.name,
                    dth_DthProviderId: value.id,
                  });
                }}
              />
            </View>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                marginTop: 10,
              }}
              autoCorrect={false}
              // keyboardType={"numeric"}
              // maxLength={10}
              label={'Customer ID'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter customer ID'}
              value={this.state.dth_customerId}
              onChangeText={(text) => {
                this.setState({dth_customerId: text}, () => {});
              }}
            />

            {/* <View
            style={{
              height: 80,
              width: "95%",
              alignItems: "flex-start",
              marginTop: 20
            }}
          >
            <ModalDropDownMenu
              initialValue={"Select Account"}
              LabelpaddingBottom={10}
              list={["SBI", "FEDERAL"]}
              label={"Select Provider"}
              value={this.state.file_type_name}
              dropDownLayoutHeight={300}
              showLabel={true}
              // paddingLeft={-5}
              //dropDownWidth={'95%'}
              editable={true}
              textColor={"#4D4B4B"}
              onSelectAnOption={index => {}}
            />
          </View> */}
            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#002b36",
                marginLeft:1
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                marginTop:20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Confirm Prepaid Card Number"}
              labelStyle={{ color: "#002b36", fontSize: 14, marginBottom: 10 ,marginLeft:0}}
              placeholderTextColor={"#BFBEBE"}
              placeholder={"Re-Enter prepaid card number "}
              value={this.state.confirmprepaidCardNumber}
              
              onChangeText={text => this.setState({ confirmprepaidCardNumber: text })}
              
            /> */}

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 7,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                marginTop: 10,
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Enter Amount'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter amount'}
              value={this.state.dth_amount}
              onChangeText={(text) => this.setState({dth_amount: text})}
            />
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }



  getMobileVerificationPageMoneyTransfer()
  {
    const {
      money_transfer_verify_number,
      money_transfer_verify_number_status,
    } = this.state;



    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Mobile Number Verification
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
               
                  Keyboard.dismiss();

                  let mobileNum = money_transfer_verify_number.toString();

                  this.setState({buttonLoading: true}, () => {
                    if (
                      
                    mobileNum.length == 10 
                    
                    ) {
                      verifyNo_MoneyTransfer({
                        mobileno:mobileNum,
                        
                      })
                        .then((result) => {
                          if (result.data && result.data.success == true) {
                            console.log(
                              result.data,
                              'Moblie number verification done successfully',
                            );
                            this.setState({changingPage: true, settingsLoading: true,money_transfer_verify_name:result.data.name}, () => {
                              setTimeout(() => {
                                this.setState({
                                  money_transfer_verify_number_status: true,
                                money_transfer_verify_otp_status:true,
                                  settingsLoading: false,
                                  changingPage: false,
                                },()=>{
                                  Mahagram.Toast('Kyc Verification:'+result.data.kycApply+'\nCurrent limit:'+result.data.remaining_limit)
                                });
                              }, 10);
                            });
                           
                          } else if (
                            result.data &&
                            result.data.success == false
                          ) {
                            this.setState({buttonLoading: false});
                            this.setState({changingPage: true, settingsLoading: true}, () => {
                              setTimeout(() => {
                                this.setState({
                                  money_transfer_verify_number_status: true,
                               
                                  settingsLoading: false,
                                  changingPage: false,
                                });
                              }, 10);
                            });
                          }
                          this.setState({buttonLoading: false}, () => {
                            if (
                              result.data &&
                             
                              result.data.success == true
                            ) {
                              //this.handleBackButtonClick();
                            }
                          });
                        })
                        .catch((err) => {
                          this.setState({buttonLoading: false}, () => {});
                          this.generalAwesomeAlertMessage(
                            'Something went wrong',
                          );
                          console.log('Error', err.response);
                        });
                    } else {
                      this.setState({buttonLoading: false}, () => {
                       
                          if (mobileNum.length < 10) {
                          alert("Please enter valid mobile number");
                        } 
                      });
                    }
                  });

             
                
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
           <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              keyboardType={"numeric"}
              label={"Mobile Number"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter mobile number"}
              value={this.state.money_transfer_verify_number}
              maxLength={10}
              onChangeText={(text) =>
                this.setState({ money_transfer_verify_number: text })
              }
            />
             

           
          </ScrollView>
        </View>

       
      </View>
    );
  }



  getOTPVerificationPageMoneyTransfer()
  {
    const {
      money_transfer_verify_otp,
      money_transfer_verify_otp_status,
    } = this.state;



    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              OTP Verification
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
               
                  Keyboard.dismiss();

                  let otp = money_transfer_verify_otp.toString();

                  this.setState({buttonLoading: true}, () => {
                    if (
                      
                      otp.length == 6 
                    
                    ) {
                      verifyOTP_MoneyTransfer({
                        mobileno:this.state.money_transfer_verify_number,
                        otp
                        
                      })
                        .then((result) => {
                          if (result.data && result.data.success == true) {
                            console.log(
                              result.data,
                              'OTP verification done successfully',
                            );
                            this.setState({changingPage: true, settingsLoading: true}, () => {
                              setTimeout(() => {
                                this.setState({
                                  money_transfer_verify_number_status: true,
                                money_transfer_verify_otp_status:true,
                                  settingsLoading: false,
                                  changingPage: false,
                                },()=>{
                                  Mahagram.Toast('Kyc Verification:'+result.data.kycApply+'\nCurrent limit:'+result.data.remaining_limit)
                                });
                              }, 10);
                            });
                           
                          } else if (
                            result.data &&
                            result.data.success == false
                          ) {
                            this.setState({buttonLoading: false});
                            if (
                              result.data.message &&
                              result.data.message !== ''
                            ) {
                              this.errorAwesomeAlertMessage(
                                result.data.message,
                                0,
                              );
                            } else {
                              this.errorAwesomeAlertMessage(
                                'Please check the entered OTP',
                                0,
                              );
                            }
                          }
                          this.setState({buttonLoading: false}, () => {
                            if (
                              result.data &&
                             
                              result.data.success == true
                            ) {
                              //this.handleBackButtonClick();
                            }
                          });
                        })
                        .catch((err) => {
                          this.setState({buttonLoading: false}, () => {});
                          this.generalAwesomeAlertMessage(
                            'Something went wrong',
                          );
                          console.log('Error', err.response);
                        });
                    } else {
                      this.setState({buttonLoading: false}, () => {
                       
                          if (otp.length < 6) {
                          alert("Please enter valid mobile number");
                        } 
                      });
                    }
                  });

             
                
              }}
            />


          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
           <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                //marginTop: 5
              }}
              autoCorrect={false}
              keyboardType={"numeric"}
              label={"OTP (One Time Password)"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter OTP"}
              value={this.state.money_transfer_verify_otp}
              maxLength={10}
              onChangeText={(text) =>
                this.setState({ money_transfer_verify_otp: text })
              }
            />
           
           <View
              style={{
                marginBottom: 25,
                width: '100%',
                alignItems: 'flex-start',
                justifyContent: 'center',
                paddingHorizontal: 10,
              }}>
              <TouchableOpacity
                onPress={() => {
                  Mahagram.Toast('Sending OTP Request.Pls wait...')
                  resendOTP_MoneyTransfer({mobileno:this.state.money_transfer_verify_number}).then(result=>{
                    this.generalAwesomeAlertMessage('OTP request has been placed successfully');
                  }) .catch((err) => {
                    this.setState({buttonLoading: false}, () => {});
                    this.generalAwesomeAlertMessage(
                      'Something went wrong',
                    );
                    console.log('Error', err.response);
                  });
                }}
                style={{
                  padding: 7,
                  backgroundColor: '#00BC86',
                  borderRadius: 6,
                  flexDirection: 'row',
                  alignSelf: 'flex-start',
                }}>
                <View style={{justifyContent: 'center', alignItems: 'center'}}>
                  <Icon
                    color="#fff"
                    size={20}
                    type="material-community"
                    name={'refresh'}
                    //name={'eye'}
                  />
                </View>
                <Text
                  style={{
                    fontSize: 16,
                    paddingLeft: 7,
                    paddingRight: 10,
                    color: '#fff',
                    fontWeight: 'bold',
                  }}>
                  Resend OTP
                </Text>
              </TouchableOpacity>
            </View>
           
          </ScrollView>
        </View>

       
      </View>
    );
  }
  getMoneyTransferListPage() {
    const {
      money_transfer_list_boxDimension,
      money_transfer_list_showPassword,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#fff'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Select Beneficiary Account
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'flex-end',
              height: '100%',
              flexDirection: 'row',
            }}>
            <View
              style={{
                height: '100%',
                flex: 0.5,
                justifyContent: 'center',
                alignItems: 'center',
              }}
            />
            <View
              style={{
                height: '100%',
                flex: 1,
                justifyContent: 'center',
                alignItems: 'center',
              }}>
              <Icon
                name={'plus'}
                type={'antdesign'}
                size={22}
                color="#000000a0"
                //color={"#3E4275"}
                //onPress={()=>{this.setState({money_transfer_list_moneyTrasferPageEditable:!this.state.money_transfer_list_moneyTrasferPageEditable})}}
                onPress={() => {
                  let pageDepth = 26;

                  this.onPressFunction(pageDepth);
                }}
              />
            </View>
            <View
              style={{
                height: '100%',
                flex: 1,
                justifyContent: 'center',
                alignItems: 'center',
              }}>
              <Icon
                name={
                  this.state.money_transfer_list_moneyTrasferPageEditable ==
                  true
                    ? 'check'
                    : 'edit'
                }
                type={'antdesign'}
                size={22}
                color="#000000a0"
                //color={"#3E4275"}
                onPress={() => {
                  this.setState({
                    money_transfer_list_moneyTrasferPageEditable: !this.state
                      .money_transfer_list_moneyTrasferPageEditable,
                  });
                }}
              />
            </View>
            <View
              style={{
                height: '100%',
                flex: 0.2,
                justifyContent: 'center',
                alignItems: 'center',
              }}
            />
          </View>
        </View>

        <View
          style={{
            height: normalize(55),
            width: '100%',
            marginTop: 15,

            alignItems: 'center',
          }}>
          <Input
            autoCapitalize={'none'}
            inputContainerStyle={{
              paddingLeft: 0,
              borderWidth: 1,
              borderRadius: 6,
              borderColor: '#EDEDEF',
              backgroundColor: '#EDEDEF',
            }}
            inputStyle={{
              marginLeft: 6,
              fontSize: 18,
              paddingLeft: 0,
              color: '#0C0C0C',
              fontWeight: 'bold',
              justifyContent: 'center',
            }}
            containerStyle={{
              width: '92%',
              paddingHorizontal: 0,
            }}
            autoCorrect={false}
            // keyboardType={'email-address'}
            // label={'Username'}
            labelStyle={{color: '#002b36', fontSize: 14, marginBottom: 10}}
            placeholderTextColor={'#4D4B4B'}
            placeholder={'Search'}
            value={this.state.money_transfer_list_searchKey}
            onChangeText={(text) => {
              this.setState({money_transfer_list_searchKey: text}, () => {
                if (this.state.money_transfer_list_searchKey == '') {
                  this.setState({
                    money_transfer_list_userData: this.state
                      .money_transfer_list_tempData,

                    money_transfer_list_searching: false,
                  });
                } else {
                  let money_transfer_list_data = this.state.money_transfer_list_searchData.filter(
                    (value) => {
                      let searchTerm = `${value.name} ${value.benificiery_name} ${value.account_no} ${value.bank_name} ${value.bank_branch} ${value.ifsc}`;
                      let search = this.state.money_transfer_list_searchKey;
                      if (search && search.length >= 1) {
                        if (
                          searchTerm
                            .toLocaleLowerCase()
                            .includes(search.toLocaleLowerCase())
                        ) {
                          return value;
                        }
                      } else {
                        return value;
                      }
                    },
                  );
                  if (
                    this.state.money_transfer_list_searchKey.length == 1 &&
                    this.state.money_transfer_list_searching == false
                  ) {
                    this.setState(
                      {
                        money_transfer_list_tempData: this.state
                          .money_transfer_list_userData,

                        money_transfer_list_searching: true,
                      },
                      () => {
                        this.setState({
                          money_transfer_list_userData: money_transfer_list_data,
                        });
                      },
                    );
                  } else {
                    this.setState({
                      money_transfer_list_userData: money_transfer_list_data,
                    });
                  }
                }
              });
            }}
            leftIcon={
              <View
                style={{
                  height: 30,
                  width: 30,
                  justifyContent: 'center',
                  alignItems: 'center',
                  paddingLeft: 3,
                }}>
                <Icon
                  name="search"
                  type={'Octicons'}
                  size={22}
                  color="#8a8a8f"
                />
              </View>
            }
            rightIcon={
              <TouchableOpacity
                disabled={!this.state.money_transfer_list_searching}
                style={{
                  height: 30,
                  width: 30,
                  alignItems: 'center',
                  justifyContent: 'center',
                }}
                onPress={() => {
                  this.setState({money_transfer_list_searchKey: ''}, () => {
                    this.setState({
                      money_transfer_list_userData: this.state
                        .money_transfer_list_searchData,
                      money_transfer_list_searching: false,
                    });
                  });
                }}>
                <Icon
                  name={
                    this.state.money_transfer_list_searching
                      ? 'closecircle'
                      : ''
                  }
                  type={'antdesign'}
                  size={22}
                  color="#B8B8C0"
                  //color={"#004482ab"}
                />
              </TouchableOpacity>
            }
            leftIconContainerStyle={{marginLeft: 6}}
            rightIconContainerStyle={{marginRight: 6}}
          />
        </View>
        {/* )} */}

        {/* {this.state.moneyTransferPageType == "Wallet Request" && (
          <Text>Wallet Request></Text>
        )}
        {this.state.moneyTransferPageType == "Money Transfer" && ( */}
        <View
          style={{
            width: '100%',
            flex: 9,
          }}>
          <FlatList
            keyboardShouldPersistTaps={'handled'}
            //  onRefresh={() => {
            // this.setState({ money_transfer_list_refreshingValue: true }, () => {
            //   listBeneficiaryList_MoneyTransfer()
            //     .then(result => {
            //       alert(JSON.stringify(result.data))
            //       this.setState({ money_transfer_list_refreshingValue: false });
            //       if (
            //         result.data.response &&
            //         result.data.response > 0
            //       ) {
            //         this.setState({ money_transfer_list_userData: result.data.response });
            //       } else {
            //         this.setState({ money_transfer_list_userData: [] });
            //       }
            //     })
            //     .catch(err => {
            //       this.setState({ money_transfer_list_refreshingValue: false }, () => {});
            //       console.log("Error", err.response);
            //     });
            // });
            //}}
            // refreshing={this.state.money_transfer_list_refreshingValue}
            numColumns={1}
            showsVerticalScrollIndicator={false}
            contentContainerStyle={{paddingTop: '2%', paddingBottom: 20}}
            data={this.state.money_transfer_list_userData}
            renderItem={({item, index, separators}) => (
              <MoneyTransferComponent
                data={item}
                borderBottom={index == 1 ? 1 : 0}
                deleteLoaderId={this.state.deleteLoaderId}
                disableClick={
                  this.state.money_transfer_list_moneyTrasferPageEditable
                }
                onClickFunction={() => {
                  Keyboard.dismiss();
                  let pageDepth = 27;
                  this.setState(
                    {
                      money_transfer_add_edit_mode: 'edit',
                      money_transfer_transfer_Beneficiaryname: item.name,
                      money_transfer_transfer_BeneficiaryAccNo: item.account_no,
                      money_transfer_transfer_BeneficiaryBank: item.bank_name,
                      money_transfer_transfer_BeneficiaryBranch:
                        item.bank_branch,
                      money_transfer_transfer_BeneficiaryIfsc: item.ifsc,
                      money_transfer_transfer_id: item.id,
                    },
                    () => {
                      this.onPressFunction(pageDepth);
                    },
                  );
                }}
                editFunction={() => {
                  let pageDepth = 26;
                  this.setState(
                    {
                      money_transfer_add_edit_mode: 'edit',
                      money_transfer_add_Beneficiaryname: item.name,
                      money_transfer_add_BeneficiaryAccNo: item.account_no,
                      money_transfer_add_BeneficiaryBank: item.bank_name,
                      money_transfer_add_BeneficiaryBranch: item.bank_branch,
                      money_transfer_add_BeneficiaryIfsc: item.ifsc,
                      money_transfer_edit_id: item.id,
                    },
                    () => {
                      this.onPressFunction(pageDepth);
                    },
                  );
                }}
                deleteItemFunction={() => {
                  if (item.id) {
                    this.setState(
                      {settingsLoading: false, deleteLoaderId: item.id},
                      () => {
                        deleteFromList_MoneyTransfer(item.id)
                          .then((result) => {
                            this.setState({settingsLoading: false});

                            console.log(result.data, 'aaa');
                            if (
                              result.data.response &&
                              result.data.response.length > 0
                            ) {
                              this.setState({
                                money_transfer_list_userData:
                                  result.data.response,
                                deleteLoaderId: '',
                              });
                            } else {
                              this.setState({
                                money_transfer_list_userData: [],
                                money_transfer_list_moneyTrasferPageEditable: false,
                                deleteLoaderId: '',
                              });
                            }
                          })
                          .catch((err) => {
                            this.setState(
                              {settingsLoading: false, deleteLoaderId: ''},
                              () => {},
                            );

                            console.log('Error', err.response);
                          });
                      },
                    );
                  }
                }}
              />
            )}
            ListEmptyComponent={() => {
              return (
                <View
                  style={{
                    //  position: "relative",
                    paddingTop: 60,
                    justifyContent: 'center',
                    alignItems: 'center',
                  }}>
                  {!this.state.settingsLoading && (
                    <Text style={{fontSize: 17, color: '#A19D9D'}}>
                      {this.state.money_transfer_list_searching == true
                        ? 'Search result is empty'
                        : 'Beneficiary list is empty'}
                    </Text>
                  )}
                </View>
              );
            }}
          />
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getWalletRequestPage() {
    const {
      wallet_request_boxDimension,
      wallet_request_showPassword,
    } = this.state;
    let {
      wallet_request_Bankname,
      wallet_request_Amount,
      wallet_request_PaymentMethod,
      wallet_request_type,
      wallet_request_DateofPayment,
      wallet_request_BankReferenceNumber,
      wallet_request_Message,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Wallet Request
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();

                this.setState({buttonLoading: true}, () => {
                  if (
                    wallet_request_Amount > 0 &&
                    wallet_request_type !== '' &&
                    wallet_request_BankReferenceNumber !== ''
                  ) {
                    walletRequest_MoneyTransfer({
                      wallet_request_Amount,

                      wallet_request_type,
                      wallet_request_DateofPayment,
                      wallet_request_BankReferenceNumber,
                      wallet_request_Message,
                    })
                      .then((result) => {
                        this.setState({buttonLoading: false});

                        if (result.data.response == false) {
                          this.errorAwesomeAlertMessage(
                            result.data.message && result.data.message !== ''
                              ? result.data.message
                              : 'Wallet Request failed\nPlease enter correct details',
                            0,
                          );
                        } else {
                          console.log(
                            result.data,
                            'result add/edit beneficiary',
                          );

                          this.successAwesomeAlertMessage(
                            'Wallet Request done successfully\nPending approval',
                            0,
                          );
                        }
                      })
                      .catch((err) => {
                        this.setState({buttonLoading: false}, () => {});

                        console.log('Error', err.response);
                      });
                  } else {
                    this.setState({buttonLoading: false}, () => {
                      if (wallet_request_type == '') {
                        this.generalAwesomeAlertMessage('Please enter type');
                      } else if (wallet_request_BankReferenceNumber == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter bank reference number',
                        );
                      } else if (wallet_request_Amount < 1) {
                        this.generalAwesomeAlertMessage(
                          'Please enter valid amount',
                        );
                      }
                    });
                  }
                });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Bank name"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter bank name"}
              value={this.state.wallet_request_Bankname}
              onChangeText={(text) =>
                this.setState({ wallet_request_Bankname: text })
              }
            /> */}

            {/* <Input
              autoCapitalize={"none"}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: "#c0c0c8",
                marginLeft: 1,
              }}
              containerStyle={{
                width: "95%",
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={"Payment Method"}
              labelStyle={{
                color: "#002b36",
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={"grey"}
              placeholder={"Enter payment method"}
              value={this.state.wallet_request_PaymentMethod}
              onChangeText={(text) =>
                this.setState({ wallet_request_PaymentMethod: text })
              }
            /> */}

            <Input
              editable={false}
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Date of Payment'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter date of payment'}
              value={this.state.wallet_request_DateofPayment}
              rightIcon={
                <Icon
                  color="#444"
                  size={20}
                  type="entypo"
                  underlayColor="rgba(255,255,255,0)"
                  name={'calendar'}
                  //name={'eye'}
                  onPress={() =>
                    this.setState({
                      wallet_request_changeDateOfPayment: !this.state
                        .wallet_request_changeDateOfPayment,
                    })
                  }
                />
              }
              //onChangeText={text => this.setState({ DateofPayment: text })}
            />
            {this.state.wallet_request_changeDateOfPayment && (
              <DatePicker
                style={{backgroundColor: '#fff', width: '100%'}}
                mode="date"
                format="DD-MM-YYYY"
                minimumDate={
                  new Date(
                    parseInt(moment().format('DD-MM-YYYY').split('-')[2]),
                    parseInt(moment().format('DD-MM-YYYY').split('-')[1]) - 1,
                    parseInt(moment().format('DD-MM-YYYY').split('-')[0]),
                  )
                }
                date={this.state.wallet_request_DateofPayment}
                value={
                  new Date(
                    parseInt(
                      this.state.wallet_request_DateofPayment.split('-')[2],
                    ),
                    parseInt(
                      this.state.wallet_request_DateofPayment.split('-')[1],
                    ) - 1,
                    parseInt(
                      this.state.wallet_request_DateofPayment.split('-')[0],
                    ),
                  )
                }
                confirmBtnText={'Confirm'}
                cancelBtnText={'Cancel'}
                showIcon={false}
                onChange={(event, date) => {
                  this.setState({
                    wallet_request_DateofPayment: moment(date).format(
                      'DD-MM-YYYY',
                    ),

                    wallet_request_changeDateOfPayment: false,
                  });
                }}
                customStyles={{
                  dateInput: {
                    borderWidth: 0,
                    alignItems: 'flex-start',
                    //marginLeft: 10,
                  },
                  dateText: {
                    color: '#000',
                    fontSize: 18,
                  },
                  disabled: {
                    backgroundColor: '#ffff',
                  },
                }}
              />
            )}

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Type'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter type'}
              value={this.state.wallet_request_type}
              onChangeText={(text) =>
                this.setState({wallet_request_type: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Bank Reference Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter bank reference number'}
              value={this.state.wallet_request_BankReferenceNumber}
              onChangeText={(text) =>
                this.setState({wallet_request_BankReferenceNumber: text})
              }
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Message/Instructions'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter message/instructions'}
              value={this.state.wallet_request_Message}
              onChangeText={(text) =>
                this.setState({wallet_request_Message: text})
              }
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              keyboardType={'numeric'}
              label={'Amount'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter Amount'}
              value={this.state.wallet_request_Amount}
              onChangeText={(text) =>
                this.setState({wallet_request_Amount: text})
              }
            />
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  getSettlementSetupPage() {
    let {
      settlement_setup_account_name,
      settlement_setup_account_number,
      settlement_setup_bank_name,
      settlement_setup_bank_branch,
      settlement_setup_ifsc_code,
      settlement_setup_upload_image,
      settlement_setup_base64,
    } = this.state;

    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Setup Account Details
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}>
            <MainButton
              activityIndicatorShow={this.state.buttonLoading}
              buttonWidth={'100%'}
              buttonColor={this.props.theme.buttonColor}
              buttonHeight={'100%'}
              fontSize={18}
              buttonTitle={'Submit'}
              borderRadius={8}
              textColor={'#ffff'}
              onButtonPress={() => {
                Keyboard.dismiss();

                this.setState({buttonLoading: true}, () => {
                  if (
                    settlement_setup_account_name !== '' &&
                    settlement_setup_account_number !== '' &&
                    settlement_setup_bank_name !== '' &&
                    settlement_setup_bank_branch !== '' &&
                    settlement_setup_ifsc_code !== '' &&
                    settlement_setup_upload_image !== null
                  ) {
                    settlementSetupValidation({
                      settlement_setup_account_name,
                      settlement_setup_account_number,
                      settlement_setup_bank_name,
                      settlement_setup_bank_branch,
                      settlement_setup_ifsc_code,
                      settlement_setup_base64,
                    })
                      .then((result) => {
                        // this.setState({ buttonLoading: false });
                        // if (result.data.response == true) {
                        //   console.log(
                        //     result.data,
                        //     "result add/edit beneficiary"
                        //   );
                        //   aceAlert(
                        //     "Wallet Request done successfully\nPending approval"
                        //   );
                        // } else {
                        //   aceAlert(
                        //     "Wallet Request failed\nPlease enter correct details"
                        //   );
                        // }
                      })
                      .catch((err) => {
                        this.setState({buttonLoading: false}, () => {});

                        console.log('Error', err.response);
                      });
                  } else {
                    this.setState({buttonLoading: false}, () => {
                      if (settlement_setup_account_name == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter account name',
                        );
                      } else if (settlement_setup_account_number == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter account number',
                        );
                      } else if (settlement_setup_bank_name == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter bank name',
                        );
                      } else if (settlement_setup_bank_branch == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter bank branch',
                        );
                      } else if (settlement_setup_ifsc_code == '') {
                        this.generalAwesomeAlertMessage(
                          'Please enter ifsc code',
                        );
                      } else if (settlement_setup_upload_image == null) {
                        this.generalAwesomeAlertMessage(
                          'Please enter Cheque document image',
                        );
                      }
                    });
                  }
                });
              }}
            />
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <ScrollView
            style={{paddingBottom: 20}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Account Name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter bank name'}
              value={this.state.settlement_setup_account_name}
              onChangeText={(text) =>
                this.setState({settlement_setup_account_name: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Account Number'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter account number'}
              value={this.state.settlement_setup_account_number}
              onChangeText={(text) =>
                this.setState({settlement_setup_account_number: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Bank Name'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter bank name'}
              value={this.state.settlement_setup_bank_name}
              onChangeText={(text) =>
                this.setState({settlement_setup_bank_name: text})
              }
            />

            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'Bank Branch'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter bank branch'}
              value={this.state.settlement_setup_bank_branch}
              onChangeText={(text) =>
                this.setState({settlement_setup_bank_branch: text})
              }
            />
            <Input
              autoCapitalize={'none'}
              inputContainerStyle={{
                paddingHorizontal: 10,
                borderWidth: 1,
                borderRadius: 3,
                borderColor: '#c0c0c8',
                marginLeft: 1,
              }}
              containerStyle={{
                width: '95%',
                paddingHorizontal: 0,
                // marginTop: 20
              }}
              autoCorrect={false}
              // keyboardType={'email-address'}
              label={'IFSC Code'}
              labelStyle={{
                color: '#002b36',
                fontSize: 14,
                marginBottom: 10,
                marginLeft: 0,
              }}
              placeholderTextColor={'grey'}
              placeholder={'Enter ifsc code'}
              value={this.state.settlement_setup_ifsc_code}
              onChangeText={(text) =>
                this.setState({settlement_setup_ifsc_code: text})
              }
            />

            <View
              style={{
                marginTop: 20,
                height: 80,
                width: '95%',
                borderColor: '#c0c0c8',
                borderStyle: 'dashed',
                borderWidth: 2,
                borderRadius: 5,
                flexDirection: 'row',
              }}>
              <View
                style={{
                  flex: 0.6,
                  justifyContent: 'center',
                  alignItems: 'center',
                }}>
                <Icon
                  size={50}
                  name={'upload-to-cloud'}
                  type={'entypo'}
                  color={'#444746'}
                  underlayColor="rgba(255,255,255,0)"
                />
              </View>
              <View
                style={{
                  flex: 3,
                  justifyContent: 'center',
                  alignItems: 'flex-start',
                  overFlow: 'hiden',
                }}>
                {this.state.settlement_setup_upload_image == null && (
                  <Text
                    numberOfLines={1}
                    style={{
                      fontSize: 17,
                      color: '#c0c0c8',
                      fontWeight: 'bold',
                      paddingRight: 10,
                      paddingLeft: 3,
                    }}>
                    {'Cheque Document'}
                  </Text>
                )}
                {this.state.settlement_setup_upload_image == null && (
                  <Text
                    numberOfLines={1}
                    style={{
                      fontSize: 20,
                      color: '#61809E',
                      fontWeight: 'bold',
                      paddingLeft: 3,
                    }}
                    onPress={() => {
                      this.setUploadImage().then((value) => {
                        if (value == true) {
                          this.generalAwesomeAlertMessage(
                            this.state.settlement_setup_upload_image.name,
                            '.',
                            this.state.settlement_setup_upload_image.type,
                            this.state.settlement_setup_upload_image.size,
                          );
                        }
                      });
                    }}>
                    Browse & Upload
                  </Text>
                )}
                {this.state.settlement_setup_upload_image !== null && (
                  <Text
                    numberOfLines={1}
                    style={{
                      fontSize: 17,
                      color: '#6E6D7A',
                      fontWeight: 'bold',
                      paddingRight: 10,
                      paddingLeft: 3,
                    }}>
                    {this.state.settlement_setup_upload_image.name}
                  </Text>
                )}
                {this.state.settlement_setup_upload_image !== null && (
                  <Text
                    style={{
                      fontSize: 20,
                      color: '#61809E',
                      fontWeight: 'bold',
                      paddingLeft: 3,
                    }}
                    onPress={() => {
                      this.setUploadImage().then((value) => {
                        if (value == true) {
                          this.generalAwesomeAlertMessage(
                            this.state.settlement_setup_upload_image.name,
                            '.',
                            this.state.settlement_setup_upload_image.type,
                          );
                        }
                      });
                    }}>
                    Change Image
                  </Text>
                )}
              </View>
            </View>
            <View
              style={{
                width: '95%',
                alignItems: 'center',
                justifyContent: 'center',
              }}>
              <Text
                style={{
                  textAlign: 'center',
                  fontSize: 16,
                  color: 'grey',
                  paddingTop: 20,
                }}>
                Please upload an image file of 'Cheque Document'
              </Text>
              <Text
                style={{
                  textAlign: 'center',
                  fontSize: 16,
                  color: 'grey',
                  paddingBottom: 20,
                }}>
                {'Image Size < 1mb'}
              </Text>
            </View>
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }

  setDefaulValues(pageDepth) {
    if (pageDepth == 10) {
      this.setState({
        // KSEB values
        kseb_showPassword: false,
        kseb_keyboardOpen: false,
        kseb_boxDimension: 0,
        kseb_Beneficiaryname: '',
        kseb_settingsLoading: false,
        kseb_modalOpen: false,
        kseb_moneyTransferPageType: 'Money Transfer',
        kseb_moneyTrasferPageEditable: false,
        kseb_changeDateOfPayment: false,
        kseb_dueDate: moment().format('DD-MM-YYYY'),
        kseb_date: moment().format('DD-MM-YYYY'),
        kseb_Name: '',
        kseb_consumerId: '',
        kseb_mobileNumber: '',
        kseb_billNumber: '',
        kseb_amount: '0',
        kseb_place: '',
        kseb_serviceCharge: 0,
        kseb_amount_loading: false,
      });
    } else if (pageDepth == 11) {
      this.setState({
        // Water Authority values
        water_auth_showPassword: false,
        water_auth_keyboardOpen: false,
        water_auth_boxDimension: 0,
        water_auth_Beneficiaryname: '',
        water_auth_settingsLoading: false,
        water_auth_modalOpen: false,
        water_auth_moneyTransferPageType: 'Money Transfer',
        water_auth_moneyTrasferPageEditable: false,
        water_auth_changeDateOfPayment: false,
        water_auth_dueDate: moment().format('DD-MM-YYYY'),
        water_auth_Name: '',
        water_auth_consumerId: '',
        water_auth_mobileNumber: '',
        water_auth_consumerNumber: '',
        water_auth_billNumber: '',
        water_auth_section: '',
        water_auth_amount: '0',
        water_auth_serviceCharge: 0,
        water_auth_amount_loading: false,
      });
    } else if (pageDepth == 12) {
      this.setState({
        // BSNL values
        bsnl_showPassword: false,
        bsnl_keyboardOpen: false,
        bsnl_boxDimension: 0,
        bsnl_Beneficiaryname: '',
        bsnl_settingsLoading: false,
        bsnl_modalOpen: false,
        bsnl_moneyTransferPageType: 'Money Transfer',
        bsnl_moneyTrasferPageEditable: false,
        bsnl_connectionType: 'Landline Individual',
        bsnl_changeDateOfPayment: false,
        bsnl_dueDate: moment().format('DD-MM-YYYY'),
        bsnl_Name: '',
        bsnl_mobileNumber: '',
        bsnl_landlineWthCode: '',
        bsnl_accountNumber: '',
        bsnl_selectedOperator: '',
        bsnl_selectedOperatorList: [
          {name: 'AIRCEL POSTPAID'},
          {name: 'AIRTEL BROADBAND(DSL)'},
          {name: 'AIRTEL LANDLINE'},
          {name: 'AIRTEL POSTPAID'},
          {name: 'BP-HATHWAY BROADBAND'},
          {name: 'BSNL LANDLINE'},
          {name: 'BSNL POSTPAID'},
          {name: 'CONNECT BROADBAND'},
          {name: 'IDEA POSTPAID'},
          {name: 'JIO POSTPAID'},
          {name: 'MTNL DELHI LANDLINE'},
          {name: 'MTS POSTPAID'},
          {name: 'RELIANCE POSTPAID'},
          {name: 'TAPPP / DITTO TV'},
          {name: 'TATA DOCOMO POSTPAID'},
          {name: 'TATA INDICOM LANDLINE'},
          {name: 'TIKONA POSTPAID'},
          {name: 'VODAFONE POSTPAID'},
        ],
        bsnl_amount: '0',
        bsnl_amount_loading: false,
        bsnl_date: moment().format('DD-MM-YYYY'),
      });
    } else if (pageDepth == 13) {
      this.setState({
        // Asianet valuse
        asianet_showPassword: false,
        asianet_keyboardOpen: false,
        asianet_boxDimension: 0,
        asianet_Beneficiaryname: '',
        asianet_settingsLoading: false,
        asianet_modalOpen: false,
        asianet_moneyTransferPageType: 'Money Transfer',
        asianet_moneyTrasferPageEditable: false,
        asianet_customerName: '',
        asianet_mobileNumber: '',
        asianet_address: '',
        asianet_subscriberId: '',
        asianet_amount: 0,
      });
    } else if (pageDepth == 18) {
      this.setState({
        mobile_mobileNumber: 0,
        mobile_keyboardOpen: false,
        mobile_settingsLoading: false,
        mobile_providerList: [],
        mobile_providerName: '',
        mobile_regionList: [],
        mobile_regionName: 'Kerala',
        mobile_amount: 0,
        mobile_providerId: '',
        mobile_providerListActivity: false,
        mobile_regionListActivity: false,
      });
    } else if (pageDepth == 19) {
      this.setState({
        dth_prepaidCardNumber: '',
        dth_confirmprepaidCardNumber: '',
        dth_file_type_name: '',
        dth_DthList: [],
        dth_DthName: '',
        dth_keyboardOpen: false,
        dth_customerId: '',
        dth_DthProviderId: '',
        dth_amount: 0,
      });
    } else if (pageDepth == 26) {
      this.setState({
        money_transfer_add_showPassword: false,
        money_transfer_add_keyboardOpen: false,
        money_transfer_add_boxDimension: 0,
        money_transfer_add_settingsLoading: false,
        money_transfer_add_modalOpen: false,
        money_transfer_add_moneyTransferPageType: 'Money Transfer',
        money_transfer_add_moneyTrasferPageEditable: false,
        money_transfer_add_Beneficiaryname: '',
        money_transfer_add_BeneficiaryAccNo: '',
        money_transfer_add_BeneficiaryBank: '',
        money_transfer_add_BeneficiaryBranch: '',
        money_transfer_add_BeneficiaryIfsc: '',
        money_transfer_edit_id: '',
      });
    } else if (pageDepth == 27 || pageDepth == 30) {
      this.setState({
        awesomeAlertShow: false,
        money_transfer_transfer_showPassword: false,
        money_transfer_transfer_keyboardOpen: false,
        money_transfer_transfer_boxDimension: 0,
        money_transfer_transfer_settingsLoading: false,
        money_transfer_transfer_modalOpen: false,
        money_transfer_transfer_moneyTransferPageType: 'Money Transfer',
        money_transfer_transfer_moneyTrasferPageEditable: false,
        money_transfer_transfer_Beneficiaryname: '',
        money_transfer_transfer_BeneficiaryAccNo: '',
        money_transfer_transfer_BeneficiaryBank: '',
        money_transfer_transfer_BeneficiaryBranch: '',
        money_transfer_transfer_BeneficiaryIfsc: '',
        money_transfer_transfer_amount: 0,
        money_transfer_transfer_sender_name: '',
        money_transfer_transfer_sender_mobile_no: '',
        money_transfer_transfer_purpose: '',
        money_transfer_transfer_ServiceCharge: 0,
        money_transfer_transfer_id: '',
      });
    } else if (pageDepth == 28) {
      this.setState({awesomeAlertShow: false});
    } else if (pageDepth == 4) {
      this.setState({
        connect_to_micro_atm_amount: 0,
        connect_to_micro_atm_remarks: '',
        connect_to_micro_atm_radio_button_value: 1,
      });
    } else if (pageDepth == 46 || pageDepth == 50 || pageDepth == 52) {
      this.setState({
        //Vehicle Commission Request
        commission_request_vehicle_company_list: [],
        commission_request_vehicle_company_id: 1,
        commission_request_vehicle_company_name: 'Covernest',
        commission_request_vehicle_name: 'Two Wheeler',
        commission_request_vehicle_name_list: [
          {name: 'Two Wheeler'},
          {name: 'Four Wheeler'},
        ],
        commission_request_vehicle_number: '',
        commission_request_vehicle_customer_name: '',
        commission_request_vehicle_policy_number: '',
        commission_request_vehicle_tp: '',
        commission_request_vehicle_od: '',
        commission_request_vehicle_amount: 0,
        commission_request_vehicle_file: {},
        commission_request_vehicle_file_status: false,
        //health Commission Request
        commission_request_health_company_list: [],
        commission_request_health_company_id: 1,
        commission_request_health_company_name: 'RELIGARE HEALTH INSURANCE',
        commission_request_health_customer_name: '',
        commission_request_health_customer_mobileno: '',
        commission_request_health_policy_number: '',
        commission_request_health_amount: 0,
        //Travel Commission Request
        commission_request_travel_company_list: [],
        commission_request_travel_company_id: 1,
        commission_request_travel_company_name: 'RELIGARE TRAVEL INSURANCE',
        commission_request_travel_customer_name: '',
        commission_request_travel_customer_mobileno: '',
        commission_request_travel_policy_number: '',
        commission_request_travel_amount: 0,
      });
    } else if (pageDepth == 48) {
      this.setState({fastag_newfastag_list: []});
    } else if (pageDepth == 49) {
      this.setState({
        fastag_fastag_recharge_user_list: [],
        fastag_fastag_recharge_user_id: 0,
        fafastag_fastag_recharge_user_name: 'Select None',
        fastag_fastag_recharge_name: '',
        fastag_fastag_recharge_mobile_number: '',
        fastag_fastag_recharge_address: '',
        fastag_fastag_recharge_vehicle_number: '',
        fastag_fastag_recharge_fastag_number: '',
        fastag_fastag_recharge_vehicle_class_list: [],
        fastag_fastag_recharge_vehicle_class_id: 0,
        fastag_fastag_recharge_vehicle_class_name: '',
        fastag_fastag_recharge_vehicle_class_id_temp: 0,
        fastag_fastag_recharge_vehicle_class_name_temp: '',
        fastag_fastag_recharge_amount: 0,
      });
    } else if (pageDepth == 54) {
      // this.setState({
      //   fastag_newfastag_applyfor: '',
      //   fastag_newfastag_amount: 0,
      //   fastag_newfastag_service_charge: 0,
      //   fastag_newfastag_vehicle_class: '',
      //   fastag_newfastag_vehicle_number: '',
      //   fastag_newfastag_name: '',
      //   fastag_newfastag_mobile_number: '',
      //   fastag_newfastag_address: '',
      //   fastag_newfastag_fastag_number: '',
      //   fastag_newfastag_paytm_mobile_number: '',
      //   fastag_newfastag_commercial_type: 1,
      //   fastag_newfastag_front_of_rc_file: {},
      //   fastag_newfastag_front_of_rc_file_status: false,
      //   fastag_newfastag_back_of_rc_file: {},
      //   fastag_newfastag_back_of_rc_file_status: false,
      //   fastag_newfastag_fastag_photo_file: null,
      //   fastag_newfastag_fastag_photo_file_status: false,
      // });
    } else if (pageDepth == 68) {
      this.setState({
        teacherind_name: '',
        teacherind_mobile_number: '',
        teacherind_address: '',
        teacherind_email_id: '',

        teacherind_district: 'Alappuzha',
        teacherind_taluk: '',
        teacherind_course_name: '',
        teacherind_institution: '',
        teacherind_course_semester: '',
        teacherind_course_tution_for: '',
      });
    } else if (pageDepth == 72) {
      this.setState({
        kyc_update_name: '',
        kyc_update_mobileno: '',
        kyc_update_address: '',

        kyc_update_proof_type_selected_value: '',
        kyc_update_id_proof_value: '',
        kyc_update_document_file: {},
        kyc_update_document_file_status: false,
      });
    } else if (pageDepth == 73) {
      this.setState({
        fastag_fastag_recharge_icici_name: '',
        fastag_fastag_recharge_icici_mobile_number: '',
        fastag_fastag_recharge_icici_vehicle_number: '',
        fastag_fastag_recharge_icici_bill_number: '',
        fastag_fastag_recharge_icici_vehicle_category_list: [],
        fastag_fastag_recharge_icici_vehicle_category_id: 0,
        fastag_fastag_recharge_icici_vehicle_category_fetch: false,
        fastag_fastag_recharge_icici_vehicle_category_fetch_temp: false,
        fastag_fastag_recharge_icici_vehicle_category_name: '',
        fastag_fastag_recharge_icici_vehicle_category_id_temp: 0,
        fastag_fastag_recharge_icici_vehicle_category_name_temp: '',
        fastag_fastag_recharge_icici_amount: 0,
        fastag_icici_amount_loading: false,
      });
    }
  }

  async fileUploader(value) {
    try {
      let document_type = {};
      if (value == 'insurance_document') {
        document_type = {
          type: [DocumentPicker.types.images, DocumentPicker.types.pdf],
        };
      } else {
        document_type = {
          type: [DocumentPicker.types.images],
        };
      }

      const res = await DocumentPicker.pick(document_type);

      // const fileName=res.uri.replace("content://","")
      // let data=""
      // RNFetchBlob.fs.readStream(fileName,'base64',4095).then((ifstream)=>{
      //   ifstream.open()
      //   ifstream.onData((data)=>{
      //   let base64=`data:${res.type};base64,`+data
      //    this.setState({settlement_setup_base64:base64})
      //   })
      // })
      if (res.size <= 500000) {
        if (value == 'insurance_document') {
          this.setState(
            {
              commission_request_vehicle_file: res,
              commission_request_vehicle_file_status: true,
            },
            () => {
              Mahagram.Toast('File Added');
            },
          );
        } else if (value == 'front_of_rc') {
          this.setState(
            {
              fastag_newfastag_front_of_rc_file: res,
              fastag_newfastag_front_of_rc_file_status: true,
            },
            () => {
              Mahagram.Toast('File Added');
            },
          );
        } else if (value == 'back_of_rc') {
          this.setState(
            {
              fastag_newfastag_back_of_rc_file: res,
              fastag_newfastag_back_of_rc_file_status: true,
            },
            () => {
              Mahagram.Toast('File Added');
            },
          );
        } else if (value == 'fastag_photo') {
          this.setState(
            {
              fastag_newfastag_fastag_photo_file: res,
              fastag_newfastag_fastag_photo_file_status: true,
            },
            () => {
              Mahagram.Toast('File Added');
            },
          );
        } else if (value == 'kyc_update_document') {
          this.setState(
            {
              kyc_update_document_file: res,
              kyc_update_document_file_status: true,
            },
            () => {
              Mahagram.Toast('File Added');
            },
          );
        }
      } else {
        this.generalAwesomeAlertMessage(
          'Document size should not be greater than 500 KB',
        );
      }

      console.log(
        res.uri,
        res.type, // mime type
        res.name,
        res.size,
      );
    } catch (err) {
      if (DocumentPicker.isCancel(err)) {
        // User cancelled the picker, exit any dialogs or menus and move on
        return false;
      } else {
        throw err;
      }
    }
  }

  async setUploadImage() {
    try {
      const res = await DocumentPicker.pick({
        type: [DocumentPicker.types.images],
      });

      // const fileName=res.uri.replace("content://","")
      // let data=""
      // RNFetchBlob.fs.readStream(fileName,'base64',4095).then((ifstream)=>{
      //   ifstream.open()
      //   ifstream.onData((data)=>{
      //   let base64=`data:${res.type};base64,`+data
      //    this.setState({settlement_setup_base64:base64})
      //   })
      // })
      RNFetchBlob.fs.readFile(res.uri, 'base64').then((data) => {
        if (res.size <= 1048576) {
          this.setState(
            {
              settlement_setup_upload_image: res,
              settlement_setup_base64: `data:${res.type};base64,` + data,
            },
            () => {
              return true;
            },
          );
        } else {
          Mahagram.Toast('Please select a smaller image file');
          return false;
        }
      });

      console.log(
        res.uri,
        res.type, // mime type
        res.name,
        res.size,
      );
    } catch (err) {
      if (DocumentPicker.isCancel(err)) {
        // User cancelled the picker, exit any dialogs or menus and move on
        return false;
      } else {
        throw err;
      }
    }
  }

  setCatchError() {
    this.setState({settingsLoading: false}, () => {
      this.setState({reportLoading: false});
      this.errorAwesomeAlertMessage('Something went wrong', 0);
    });

    console.log('Error', err.response);
  }

  setReportData(result) {
    this.setState({settingsLoading: false});
    if (result.data && result.data.success == true) {
      if (result.data.data && Array.isArray(result.data.data)) {
        this.setState(
          {
            historyData: result.data.data,
            searchData: result.data.data,
            mainData: result.data.data,
          },
          () => {
            this.setState({reportLoading: false});
            let credateList = [];
            this.state.historyData.map((value) => {
              if (value.paiddate && value.paiddate !== '') {
                credateList.push(moment(value.paiddate, 'YYYY-MM-DD').toDate());
              }
            });

            let minimum = _.min(
              credateList.map((rec) => {
                return rec;
              }),
            );
            let maximum = _.max(
              credateList.map((rec) => {
                return rec;
              }),
            );
            this.setState(
              {
                fromDate: moment(minimum).format('DD-MM-YYYY'),
                toDate: moment(maximum).format('DD-MM-YYYY'),
                minimumDate: moment(minimum).format('DD-MM-YYYY'),
                maximumDate: moment(maximum).format('DD-MM-YYYY'),
              },
              () => {
                if (this.state.minimumDate == this.state.maximumDate) {
                  this.setState({
                    singleDateInModal: true,
                    singleOption: true,
                  });
                }
              },
            );
          },
        );
      }

      console.log(result.data, 'result ');
    } else {
      this.setState({reportLoading: false});
    }
    this.setState({reportLoading: false});
  }

  setData(result) {
    this.setState({settingsLoading: false});
    if (result.data) {
      if (result.data.data && Array.isArray(result.data.data)) {
        this.setState(
          {
            historyData: result.data.data,
            searchData: result.data.data,
            mainData: result.data.data,
          },
          () => {
            this.setState({reportLoading: false});
            let credateList = [];
            this.state.historyData.map((value) => {
              if (value.credate && value.credate !== '') {
                credateList.push(moment(value.credate, 'DD-MM-YYYY').toDate());
              }
            });

            let minimum = _.min(
              credateList.map((rec) => {
                return rec;
              }),
            );
            let maximum = _.max(
              credateList.map((rec) => {
                return rec;
              }),
            );
            this.setState(
              {
                fromDate: moment(minimum).format('DD-MM-YYYY'),
                toDate: moment(maximum).format('DD-MM-YYYY'),
                minimumDate: moment(minimum).format('DD-MM-YYYY'),
                maximumDate: moment(maximum).format('DD-MM-YYYY'),
              },
              () => {
                if (this.state.minimumDate == this.state.maximumDate) {
                  this.setState({
                    singleDateInModal: true,
                    singleOption: true,
                  });
                }
              },
            );
          },
        );
      }

      console.log(result.data, this.state.historyData, 'result ');
    }
    this.setState({reportLoading: false});
  }

  setHistoryData(result) {
    this.setState({settingsLoading: false});
    if (result.data) {
      console.log(result.data);
      if (result.data.response && Array.isArray(result.data.response)) {
        this.setState(
          {
            historyData: result.data.response,
            searchData: result.data.response,
            mainData: result.data.response,
          },
          () => {
            this.setState({reportLoading: false});
            let credateList = [];
            this.state.historyData.map((value) => {
              credateList.push(moment(value.credate, 'DD-MM-YYYY').toDate());
            });

            let minimum = _.min(
              credateList.map((rec) => {
                return rec;
              }),
            );
            let maximum = _.max(
              credateList.map((rec) => {
                return rec;
              }),
            );
            this.setState(
              {
                fromDate: moment(minimum).format('DD-MM-YYYY'),
                toDate: moment(maximum).format('DD-MM-YYYY'),
                minimumDate: moment(minimum).format('DD-MM-YYYY'),
                maximumDate: moment(maximum).format('DD-MM-YYYY'),
              },
              () => {
                if (this.state.minimumDate == this.state.maximumDate) {
                  this.setState({
                    singleDateInModal: true,
                    singleOption: true,
                  });
                }
              },
            );
          },
        );
      }

      console.log(result.data, 'result ');
    }
    this.setState({reportLoading: false});
  }

  setAllHistoryData(result) {
    this.setState({settingsLoading: false});
    if (result.data) {
      console.log(result.data);
      if (result.data.response && Array.isArray(result.data.response)) {
        this.setState(
          {
            allhistory_historyData: result.data.response,
            allhistory_searchData: result.data.response,
            allhistory_mainData: result.data.response,
          },
          () => {
            this.setState({allhistory_reportLoading: false});
            let credateList = [];
            this.state.allhistory_historyData.map((value) => {
              credateList.push(moment(value.credate, 'DD-MM-YYYY').toDate());
            });

            let minimum = _.min(
              credateList.map((rec) => {
                return rec;
              }),
            );
            let maximum = _.max(
              credateList.map((rec) => {
                return rec;
              }),
            );
            this.setState(
              {
                allhistory_fromDate: moment(minimum).format('DD-MM-YYYY'),
                allhistory_toDate: moment(maximum).format('DD-MM-YYYY'),
                allhistory_minimumDate: moment(minimum).format('DD-MM-YYYY'),
                allhistory_maximumDate: moment(maximum).format('DD-MM-YYYY'),
              },
              () => {
                if (
                  this.state.allhistory_minimumDate ==
                  this.state.allhistory_maximumDate
                ) {
                  this.setState({
                    allhistory_singleDateInModal: true,
                    allhistory_singleOption: true,
                    allhistory_pdf_singleDate_default: true,
                  });
                }
              },
            );
          },
        );
      }

      console.log(result.data, 'result ');
    }
    this.setState({allhistory_reportLoading: false});
  }

  setWalletHistoryData(result) {
    this.setState({settingsLoading: false});
    if (result.data) {
      console.log(result.data);
      if (result.data.response && Array.isArray(result.data.response)) {
        this.setState(
          {
            historyData: result.data.response,
            searchData: result.data.response,
            mainData: result.data.response,
          },
          () => {
            this.setState({reportLoading: false});
            let credateList = [];
            this.state.historyData.map((value) => {
              credateList.push(
                moment(value.date_of_deposit, 'DD-MM-YYYY').toDate(),
              );
            });

            let minimum = _.min(
              credateList.map((rec) => {
                return rec;
              }),
            );
            let maximum = _.max(
              credateList.map((rec) => {
                return rec;
              }),
            );
            this.setState(
              {
                fromDate: moment(minimum).format('DD-MM-YYYY'),
                toDate: moment(maximum).format('DD-MM-YYYY'),
                minimumDate: moment(minimum).format('DD-MM-YYYY'),
                maximumDate: moment(maximum).format('DD-MM-YYYY'),
              },
              () => {
                if (this.state.minimumDate == this.state.maximumDate) {
                  this.setState({
                    singleDateInModal: true,
                    singleOption: true,
                  });
                }
              },
            );
          },
        );
      }

      console.log(result.data, 'result ');
    }
    this.setState({reportLoading: false});
  }

  imageCopy(url) {
    var date = new Date();
    console.log(url.split('://')[1]);
    let FileName =
      'acemoney_invoice' +
      Math.floor(date.getTime() + date.getSeconds() / 2) +
      '.jpg';

    RNFS.copyFile(
      url.split('://')[1],
      RNFS.DownloadDirectoryPath + '/' + FileName,
    )
      .then((success) => {
        Mahagram.Toast('Invoice Download Complete');
      })
      .catch((err) => {
        console.log('Error: ' + err.message);
      });
  }

  getTranasferSuccessPage() {
    const {
      kseb_boxDimension,
      kseb_showPassword,
      kseb_Name,
      kseb_consumerId,
      kseb_mobileNumber,
      kseb_dueDate,
      kseb_billNumber,
      kseb_amount,
      kseb_place,
      kseb_date,
    } = this.state;
    const data = this.state.money_transfer_invoice_data;
    console.log(this.state.money_transfer_invoice_data, 'daaata');
    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              Invoice Summary
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 12,
              // paddingVertical: 10,

              flexDirection: 'row',
            }}>
            <View
              style={{
                flex: 1,
                justifyContent: 'center',
                alignItems: 'flex-end',
                height: '100%',
              }}>
              <TouchableOpacity
                style={{
                  padding: 10,
                  justifyContent: 'center',
                  alignItems: 'center',
                }}
                onPress={() => {
                  this.refs.viewShot.capture().then((uri) => {
                    console.log('do something with ', uri);
                    //this.onShare(uri);
                    this.getPer(uri);
                  });
                }}>
                {this.state.downloadLoader == true ? (
                  <ActivityIndicator size={'small'} color={'#000000a0'} />
                ) : (
                  <Icon
                    size={20}
                    name={'download'}
                    type={'feather'}
                    color={'#000000a0'}
                    underlayColor="rgba(255,255,255,0)"
                  />
                )}
              </TouchableOpacity>
            </View>
            <View
              style={{
                flex: 1,
                justifyContent: 'center',
                alignItems: 'center',
                height: '100%',
              }}>
              <TouchableOpacity
                style={{
                  padding: 10,
                  justifyContent: 'center',
                  alignItems: 'center',
                }}
                onPress={() => {
                  this.refs.viewShot.capture().then((uri) => {
                    console.log('do something with ', uri);
                    this.onShare(uri);
                  });
                }}>
                <Icon
                  size={20}
                  name={'share'}
                  type={'entypo'}
                  color={'#000000a0'}
                  underlayColor="rgba(255,255,255,0)"
                />
              </TouchableOpacity>
            </View>
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
            justifyContent: 'center',
            alignItems: 'center',
          }}>
          <ScrollView
            style={{width: '100%', height: '100%'}}
            contentContainerStyle={{
              alignItems: 'center',
              justifyContent: 'center',
              flex: 1,
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            showsVerticalScrollIndicator={false}
            scrollEnabled={true}>
            <ViewShot
              style={{
                width: '100%',
                justifyContent: 'center',
                alignItems: 'center',
                backgroundColor: '#fff',
              }}
              ref="viewShot"
              options={{format: 'jpg', quality: 0.9}}>
              <View
                style={{
                  height: 500,
                  width: '95%',
                  backgroundColor: '#fff',
                  borderWidth: 1,
                  borderRadius: 9,
                  marginVertical: 10,
                  borderColor: '#c0c0c8',
                }}>
                <View
                  style={{
                    flex: 2,
                    backgroundColor: '#F0F0F0',
                    justifyContent: 'center',
                    alignItems: 'center',
                    borderTopLeftRadius: 9,
                    borderTopRightRadius: 9,
                  }}>
                  <View
                    style={{
                      flex: 1,
                      justifyContent: 'center',
                      alignItems: 'flex-start',
                      width: '100%',
                    }}>
                    <Image
                      style={{
                        width: 120,
                        justifyContent: 'center',
                        height: '100%',
                      }}
                      resizeMode={'contain'}
                      source={require('../../images/acelogo2.png')}
                    />
                  </View>

                  <View
                    style={{
                      flex: 1.5,
                      justifyContent: 'center',
                      alignItems: 'center',
                    }}>
                    <View
                      style={{
                        flex: 1,
                        justifyContent: 'center',
                        alignItems: 'center',
                      }}>
                      <Icon
                        size={45}
                        name={'check'}
                        type={'feather'}
                        color={'#3550A4'}
                        underlayColor="rgba(255,255,255,0)"
                      />
                    </View>
                    <View
                      style={{
                        flex: 1,
                        justifyContent: 'center',
                        alignItems: 'center',
                      }}>
                      <Text style={{fontSize: 16, color: '#3550A4'}}>
                        Transfer Successful
                      </Text>
                    </View>
                  </View>

                  <View style={{flex: 0.2}} />
                </View>
                <View
                  style={{
                    flex: 5,
                    backgroundColor: '#FAFAFA',
                    borderBottomLeftRadius: 9,
                    borderBottomRightRadius: 9,
                  }}>
                  <View
                    style={{
                      flex: 0.32,
                      justifyContent: 'center',
                      alignItems: 'flex-start',
                      paddingHorizontal: 15,
                      width: '100%',
                    }}>
                    <View
                      style={{
                        height: '50%',
                        justifyContent: 'center',
                        alignItems: 'flex-start',
                        borderBottomWidth: 0.6,
                        borderColor: '#CCCED1',
                        width: '100%',
                      }}>
                      <Text
                        style={{
                          fontSize: 15,
                          fontWeight: 'bold',
                          color: '#303232',
                        }}>
                        DETAILS
                      </Text>
                    </View>
                  </View>
                  <View
                    style={{
                      flex: 0.3,
                      justifyContent: 'center',
                      alignItems: 'flex-start',
                      paddingLeft: 15,
                    }}>
                    <View
                      style={{
                        flex: 1,
                        justifyContent: 'center',
                        alignItems: 'center',
                      }}>
                      <View
                        style={{
                          flex: 1,
                          justifyContent: 'center',
                          alignItems: 'center',
                        }}>
                        <View
                          style={{
                            flexDirection: 'row',
                            flex: 1,
                            alignItems: 'center',
                            paddingRight: 25,
                          }}>
                          <View
                            style={{
                              alignItems: 'flex-end',
                              justifyContent: 'center',
                              paddingRight: 2,
                            }}>
                            <Icon
                              name="rupee"
                              type={'font-awesome'}
                              size={18}
                              color="#3A3D3F"
                              containerStyle={{
                                fontSize: 50,
                                fontWeight: 'bold',
                                color: '#111111',
                              }}
                            />
                          </View>

                          <View style={{}}>
                            <Text
                              numberOfLines={1}
                              ellipsizeMode={'tail'}
                              style={{
                                fontSize: 35,
                                fontWeight: 'bold',
                                color: '#3A3D3F',
                              }}>
                              {data.Amount ? data.Amount : 'Nill'}
                            </Text>
                          </View>
                        </View>
                      </View>
                    </View>
                    <View
                      style={{
                        flex: 2,
                        justifyContent: 'center',
                        alignItems: 'center',
                      }}>
                      <Text style={{color: '#959EA2', fontWeight: 'bold'}}>
                        Amount Transfered
                      </Text>
                    </View>
                  </View>
                  <View style={{flex: 0.1, paddingLeft: 15}}>
                    <Text>
                      {data.Datetime
                        ? data.Datetime
                        : moment().format('h:mm a, DD MMMM YYYY')}
                    </Text>
                  </View>
                  <View
                    style={{
                      flex: 0.7,
                      backgroundColor: '#ffff',
                      margin: 10,
                      padding: 10,
                      borderRadius: 6,
                      borderWidth: 1,
                      borderColor: '#c0c0c8',
                    }}>
                    <View style={{flex: 1, width: '100%'}}>
                      <View style={{flex: 1, flexDirection: 'row'}}>
                        <View
                          style={{
                            flex: 1,
                            flexDirection: 'row',
                            alignItems: 'center',
                          }}>
                          <View style={{flex: 5, overflow: 'hidden'}}>
                            <Text
                              numberOfLines={1}
                              ellipsizeMode={'tail'}
                              style={{
                                alignSelf: 'flex-start',
                                color: '#404040',
                              }}>
                              FROM :
                            </Text>
                          </View>
                          <View style={{flex: 9, overflow: 'hidden'}}>
                            <Text
                              numberOfLines={1}
                              ellipsizeMode={'tail'}
                              style={{
                                fontSize: 16,
                                fontWeight: '800',
                                color: '#404040',
                              }}>
                              {data.fromDetails && data.fromDetails.From
                                ? data.fromDetails.From
                                : ''}
                            </Text>
                          </View>
                        </View>
                      </View>
                      <View
                        style={{
                          flex: 1,
                          flexDirection: 'row',
                          alignItems: 'center',
                        }}>
                        <View style={{flex: 5, overflow: 'hidden'}}>
                          <Text
                            numberOfLines={1}
                            ellipsizeMode={'tail'}
                            style={{alignSelf: 'flex-start', color: '#404040'}}>
                            BANK :
                          </Text>
                        </View>
                        <View style={{flex: 9, overflow: 'hidden'}}>
                          <Text
                            numberOfLines={1}
                            ellipsizeMode={'tail'}
                            style={{
                              fontSize: 16,
                              fontWeight: '800',
                              color: '#404040',
                            }}>
                            {data.fromDetails && data.fromDetails.Bank
                              ? data.fromDetails.Bank
                              : ''}
                          </Text>
                        </View>
                      </View>
                    </View>
                    <View
                      style={{
                        marginVertical: 8,
                        borderColor: '#c0c0c8',
                        borderWidth: StyleSheet.hairlineWidth,
                        justifyContent: 'center',
                      }}
                    />

                    <View
                      style={{
                        flex: 1.5,
                        justifyContent: 'center',
                        alignItems: 'center',
                      }}>
                      <View style={{flex: 1, flexDirection: 'row'}}>
                        <View
                          style={{
                            flex: 1,
                            flexDirection: 'row',
                            alignItems: 'center',
                          }}>
                          <View style={{flex: 5, overflow: 'hidden'}}>
                            <Text
                              numberOfLines={1}
                              ellipsizeMode={'tail'}
                              style={{
                                alignSelf: 'flex-start',
                                color: '#404040',
                              }}>
                              TO :
                            </Text>
                          </View>
                          <View style={{flex: 9, overflow: 'hidden'}}>
                            <Text
                              numberOfLines={1}
                              ellipsizeMode={'tail'}
                              style={{
                                fontSize: 16,
                                fontWeight: '800',
                                color: '#404040',
                              }}>
                              {data.ToDetails && data.ToDetails.To
                                ? data.ToDetails.To
                                : ''}
                            </Text>
                          </View>
                        </View>
                      </View>
                      <View style={{flex: 1, flexDirection: 'row'}}>
                        <View
                          style={{
                            flex: 1,
                            flexDirection: 'row',
                            alignItems: 'center',
                          }}>
                          <View style={{flex: 5, overflow: 'hidden'}}>
                            <Text
                              numberOfLines={1}
                              ellipsizeMode={'tail'}
                              style={{
                                alignSelf: 'flex-start',
                                color: '#404040',
                              }}>
                              A/C NO :
                            </Text>
                          </View>
                          <View style={{flex: 9, overflow: 'hidden'}}>
                            <Text
                              numberOfLines={1}
                              ellipsizeMode={'tail'}
                              style={{
                                fontSize: 16,
                                fontWeight: '800',
                                color: '#404040',
                              }}>
                              {data.ToDetails && data.ToDetails.accountno
                                ? data.ToDetails.accountno
                                : ''}
                            </Text>
                          </View>
                        </View>
                      </View>

                      <View style={{flex: 1, flexDirection: 'row'}}>
                        <View
                          style={{
                            flex: 1,
                            flexDirection: 'row',
                            alignItems: 'center',
                          }}>
                          <View style={{flex: 5, overflow: 'hidden'}}>
                            <Text
                              numberOfLines={1}
                              ellipsizeMode={'tail'}
                              style={{
                                alignSelf: 'flex-start',
                                color: '#404040',
                              }}>
                              BANK :
                            </Text>
                          </View>
                          <View style={{flex: 9, overflow: 'hidden'}}>
                            <Text
                              numberOfLines={1}
                              ellipsizeMode={'tail'}
                              style={{
                                fontSize: 16,
                                fontWeight: '800',
                                color: '#404040',
                              }}>
                              {data.ToDetails && data.ToDetails.Bank
                                ? data.ToDetails.Bank
                                : ''}
                            </Text>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </ViewShot>
          </ScrollView>
        </View>
      </View>
    );
  }

  getBCCertificatePage() {
    const {
      kseb_boxDimension,
      kseb_showPassword,
      kseb_Name,
      kseb_consumerId,
      kseb_mobileNumber,
      kseb_dueDate,
      kseb_billNumber,
      kseb_amount,
      kseb_place,
      kseb_date,
    } = this.state;
    const source = {uri: this.state.bcCertificateUrl, cache: true};
    const data = this.state.money_transfer_invoice_data;
    console.log(this.state.money_transfer_invoice_data, 'daaata');
    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.setState(
                  {
                    settingsLoading: true,
                    changingPage: true,
                  },
                  () => {
                    setTimeout(() => {
                      this.setState({
                        showBCPage: false,
                        showDashboard: false,
                        showDashboard: false,
                        settingsLoading: false,
                        changingPage: false,
                      });
                    }, 100);
                  },
                );
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text numberOfLines={1} style={{fontSize: 18, color: '#00000090'}}>
              BC Certificate
            </Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 12,
              // paddingVertical: 10,

              flexDirection: 'row',
            }}>
            <View
              style={{
                flex: 1,
                justifyContent: 'center',
                alignItems: 'flex-end',
                height: '100%',
              }}>
              <TouchableOpacity
                style={{
                  padding: 10,
                  justifyContent: 'center',
                  alignItems: 'center',
                }}
                onPress={() => {
                  this.setState(
                    {pdf_download_loading: true, pdf_share_loading: false},
                    () => {
                      this.pdfDownload('download', 'bc_certificate');
                    },
                  );
                }}>
                {this.state.pdf_download_loading == true ? (
                  <ActivityIndicator size={'small'} color={'#000000a0'} />
                ) : (
                  <Icon
                    size={20}
                    name={'download'}
                    type={'feather'}
                    color={'#000000a0'}
                    underlayColor="rgba(255,255,255,0)"
                  />
                )}
              </TouchableOpacity>
            </View>
            <View
              style={{
                flex: 1,
                justifyContent: 'center',
                alignItems: 'center',
                height: '100%',
              }}>
              <TouchableOpacity
                style={{
                  padding: 10,
                  justifyContent: 'center',
                  alignItems: 'center',
                }}
                onPress={() => {
                  this.setState(
                    {pdf_download_loading: false, pdf_share_loading: true},
                    () => {
                      this.pdfDownload('share', 'bc_certificate');
                    },
                  );
                }}>
                {this.state.pdf_share_loading == true ? (
                  <ActivityIndicator size={'small'} color={'#000000a0'} />
                ) : (
                  <Icon
                    size={20}
                    name={'share'}
                    type={'entypo'}
                    color={'#000000a0'}
                    underlayColor="rgba(255,255,255,0)"
                  />
                )}
              </TouchableOpacity>
            </View>
          </View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
            justifyContent: 'center',
            alignItems: 'center',
          }}>
          <View style={styles.container}>
            {this.state.bcCertificateUrl !== '' && (
              <Pdf
                source={source}
                onLoadComplete={(numberOfPages, filePath) => {
                  console.log(`number of pages: ${numberOfPages}`);
                }}
                onPageChanged={(page, numberOfPages) => {
                  console.log(`current page: ${page}`);
                }}
                onError={(error) => {
                  console.log(error);
                }}
                onPressLink={(uri) => {
                  console.log(`Link presse: ${uri}`);
                }}
                style={styles.pdf}
              />
            )}
          </View>
        </View>
      </View>
    );
  }

  getDashboardPage() {
    let {profile_data} = this.state;
    return (
      <View style={{flex: 1, width: '100%', backgroundColor: '#00000090'}}>
        <View
          style={{
            height: normalize(45),
            width: '100%',
            backgroundColor: '#Ffff',
            borderBottomWidth: 0,
            borderTopWidth: 0,
            borderColor: '#c0c0c8',
            flexDirection: 'row',
          }}>
          <View
            style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
            <Icon
              size={30}
              name={'arrowleft'}
              type={'antdesign'}
              color={'#00000090'}
              underlayColor="rgba(255,255,255,0)"
              onPress={() => {
                this.handleBackButtonClick();
              }}
            />
          </View>
          <View
            style={{
              flex: 4,
              justifyContent: 'center',
              alignItems: 'flex-start',
              paddingLeft: 15,
            }}>
            <Text style={{fontSize: 18, color: '#00000090'}}>Dashboard</Text>
          </View>
          <View
            style={{
              flex: 2,
              justifyContent: 'center',
              alignItems: 'center',
              height: '100%',
              paddingHorizontal: 9,
              paddingVertical: 10,
            }}></View>
        </View>

        <View
          style={{
            flex: 11,
            width: '100%',
            backgroundColor: '#fff',
          }}>
          <LinearGradient
            //colors={[item.color1, item.color2]}
            colors={['#237C82', '#3FA1A0']}
            start={{x: 0, y: 0}}
            end={{x: 1, y: 0}}
            style={{
              height: 120,
              alignSelf: 'center',
              alignItems: 'center',
              justifyContent: 'center',
              backgroundColor: '#03BAE5',
              width: '95%',
              //paddingHorizontal:20,
              // paddingVertical:20,
              borderWidth: 0,
              borderRadius: 8,
              marginVertical: 20,
              flexDirection: 'row',
            }}>
            <View
              style={{
                flex: 1.5,
                alignItems: 'center',
                justifyContent: 'center',
              }}>
              <Icon
                size={60}
                name={'users'}
                type={'feather'}
                color={'#fff'}
                underlayColor="rgba(255,255,255,0)"
              />
            </View>
            <View
              style={{
                flex: 4,
                alignItems: 'flex-start',
                justifyContent: 'center',
                //paddingLeft: 10,
              }}>
              {this.state.balanceLoading == true ? (
                <View
                  style={{
                    flexDirection: 'row',
                    justifyContent: 'center',
                    alignItems: 'center',
                    // marginBottom: 6,
                  }}>
                  <ActivityIndicator size={'small'} color={'#fff'} />
                  <Text
                    numberOfLines={1}
                    ellipsizeMode={'tail'}
                    style={{
                      paddingHorizontal: 4,
                      fontSize: 28,
                      fontWeight: 'bold',
                      color: 'white',
                      alignSelf: 'center',
                    }}>
                    {''}
                  </Text>
                </View>
              ) : (
                <View
                  style={{
                    flexDirection: 'row',
                    justifyContent: 'center',
                    alignItems: 'center',
                    // marginBottom: 6,
                  }}>
                  <Icon
                    name="rupee"
                    type={'font-awesome'}
                    size={21}
                    color="#fff"
                    containerStyle={{
                      justifyContent: 'center',
                      alignSelf: 'center',
                      //paddingTop: 2,
                    }}
                  />
                  <Text
                    numberOfLines={1}
                    ellipsizeMode={'tail'}
                    style={{
                      paddingHorizontal: 4,
                      fontSize: 28,
                      fontWeight: 'bold',
                      color: '#fff',
                      alignSelf: 'center',
                    }}>
                    {this.state.dashboard_balance
                      .toString()
                      .replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,')}
                  </Text>
                </View>
              )}
              <View>
                <Text
                  numberOfLines={1}
                  ellipsizeMode={'tail'}
                  style={{
                    paddingHorizontal: 2,
                    fontSize: 14,
                    fontWeight: '500',
                    color: '#fff',
                    alignSelf: 'center',
                  }}>
                  Total Balance
                </Text>
              </View>
            </View>
          </LinearGradient>

          <ScrollView
            style={{paddingBottom: 20, width: '100%'}}
            contentContainerStyle={{
              alignItems: 'center',
              paddingVertical: 20,
              width: '100%',
            }}
            ref={(ref) => (this.scrollView = ref)}
            // onContentSizeChange={(contentWidth, contentHeight)=>{
            //     console.log(this.state.locationX,this.state.locationY)
            //     this.scrollView.scrollTo({x: this.state.locationX, y: this.state.locationY, animated:true})
            // }}

            // {...this._panResponder.panHandlers}
            scrollEnabled={true}>
            <FlatList
              numColumns={1}
              keyboardShouldPersistTaps={'always'}
              showsVerticalScrollIndicator={false}
              contentContainerStyle={{
                justifyContent: 'center',

                width: '100%',
              }}
              style={{width: '100%'}}
              data={this.state.dashBoardList_dashboard}
              keyExtractor={(item, index) => String(index)}
              renderItem={({item, index, separators}) => (
                <View
                  style={{
                    width: '94%',
                    backgroundColor: '#fff',
                    marginBottom: 20,
                    alignSelf: 'center',
                    borderRadius: 8,
                    shadowColor: '#c0c0c8',
                    shadowOffset: {
                      width: 2,
                      height: 2,
                    },
                    shadowOpacity: 0.2,
                    shadowRadius: 2,
                    elevation: 4,
                    borderWidth: 0.2,
                    borderColor: '#F1F1F1',
                  }}>
                  <View style={{}}>
                    <View
                      style={{
                        height: 80,
                        width: '100%',
                        flexDirection: 'row',
                        backgroundColor: '#FAFAFA',
                        borderTopLeftRadius: 8,
                        borderTopRightRadius: 8,
                      }}>
                      <View
                        style={{
                          flex: 1,
                          alignItems: 'center',
                          justifyContent: 'center',
                        }}>
                        <Icon
                          size={55}
                          name={'user-circle'}
                          type={'font-awesome'}
                          color={'#F1F1F1'}
                          underlayColor="rgba(255,255,255,0)"
                        />
                      </View>
                      <View
                        style={{
                          flex: 3.5,
                          alignItems: 'flex-start',
                          justifyContent: 'center',
                        }}>
                        <Text
                          style={{
                            paddingLeft: 5,
                            fontSize: 25,
                            color: '#594F57',
                            fontWeight: 'bold',
                          }}>
                          {item.firstname}
                        </Text>
                      </View>
                    </View>
                    <TouchableOpacity
                      style={{height: 70, width: '100%', flexDirection: 'row'}}
                      onPress={() => {
                        Linking.openURL(`tel:${item.number}`);
                      }}>
                      <View
                        style={{
                          flex: 1,
                          alignItems: 'center',
                          justifyContent: 'center',
                        }}>
                        <Icon
                          size={30}
                          name={'shirtsinbulk'}
                          type={'font-awesome'}
                          color={'#A5A5A5'}
                          underlayColor="rgba(255,255,255,0)"
                        />
                      </View>
                      <View
                        style={{
                          flex: 5,
                          alignItems: 'flex-start',
                          justifyContent: 'center',
                        }}>
                        <Text
                          style={{
                            paddingLeft: 5,
                            fontSize: 14,
                            color: '#A8A8A8',
                          }}>
                          BALANCE
                        </Text>
                        <View
                          style={{
                            flexDirection: 'row',
                            justifyContent: 'center',
                            alignItems: 'center',
                            // marginBottom: 6,
                          }}>
                          <Icon
                            name="rupee"
                            type={'font-awesome'}
                            size={16.5}
                            color="#A8A8A8"
                            containerStyle={{
                              justifyContent: 'center',
                              alignSelf: 'center',
                              //paddingTop: 2,
                            }}
                          />
                          <Text
                            numberOfLines={1}
                            ellipsizeMode={'tail'}
                            style={{
                              paddingHorizontal: 4,
                              fontSize: 21,
                              fontWeight: 'bold',
                              color: '#A8A8A8',
                              alignSelf: 'center',
                            }}>
                            {item.balance}
                          </Text>
                        </View>
                      </View>
                    </TouchableOpacity>
                    {/* {item.mobileno2 && (
                      <TouchableOpacity
                        style={{height: 70, width: '100%', flexDirection: 'row'}}
                        onPress={() => {
                          Linking.openURL(`tel:${item.mobileno2}`);
                        }}>
                        <View
                          style={{
                            flex: 1,
                            alignItems: 'center',
                            justifyContent: 'center',
                          }}>
                          <Icon
                            size={30}
                            name={'phone'}
                            type={'font-awesome'}
                            color={'#A5A5A5'}
                            underlayColor="rgba(255,255,255,0)"
                          />
                        </View>
                        <View
                          style={{
                            flex: 5,
                            alignItems: 'flex-start',
                            justifyContent: 'center',
                          }}>
                          <Text
                            style={{
                              paddingLeft: 5,
                              fontSize: 14,
                              color: '#A8A8A8',
                            }}>
                            MOBILE
                          </Text>
                          <Text
                            style={{
                              paddingLeft: 5,
                              fontSize: 17,
                              color: '#242424',
                            }}>
                            {item.mobileno2}
                          </Text>
                        </View>
                      </TouchableOpacity>
                    )} */}
                  </View>
                  <View
                    style={{
                      flex: 1,
                      width: '100%',
                      paddingVertical: 10,
                      backgroundColor: '#fafafa',
                      borderBottomLeftRadius: 8,
                      borderBottomRightRadius: 8,
                      alignItems: 'flex-end',
                      // paddingRight:5
                    }}>
                    <View
                      style={{
                        width: '100%',
                        alignItems: 'flex-end',
                        justifyContent: 'center',
                        paddingHorizontal: 10,
                      }}>
                      <TouchableOpacity
                        onPress={() => {
                          
                          this.setState(
                            {changingPage: true, settingsLoading: true},
                            () => {
                              setTimeout(() => {
                                this.setState({
                                  showDashboardHistory: true,
                                  settingsLoading: false,
                                  changingPage: false,
                                  refreshing: false,
                                  refreshingValue: false,
                                  historyData: [],
                                  searchKey: '',
                                  searchData: [],
                                  tempData: [],
                                  searching: false,
                                  modalOpen: false,
                                  fromDate: '',
                                  fromDatePicker: false,
                                  toDate: '',
                                  toDatePicker: false,
                                  minimumDate: '',
                                  maximumDate: '',
                                  tempFromDate: '',
                                  tempToDate: '',
                                  filteredData: [],
                                  settingFilter: false,
                                  keyboardOpen: false,
                                  type: 'BOTH',
                                  tempType: 'BOTH',
                                  tempData: [],
                                  mainData: [],
                                  singleDateInModal: false,
                                  singleDatePicker: false,
                                  singleOption: false,
                                  singleOption_tempSingleDate: '',
                                  singleOption_tempFromDate: '',
                                  singleOption_tempTODate: '',
                                  reportLoading:true
                                
                                  
                                },()=>{
                                  this.getDashboardAgentHistory(item["sl.no"])
                                });
                              });
                            },
                            100,
                          );
                        }}
                        style={{
                          padding: 7,
                          backgroundColor: '#00BC86',
                          borderRadius: 6,
                          flexDirection: 'row',
                          // alignSelf: 'flex-start',
                        }}>
                        <View
                          style={{
                            justifyContent: 'center',
                            alignItems: 'center',
                          }}>
                          <Icon
                            color="#fff"
                            size={20}
                            type="material-community"
                            name={'file-document'}
                            //name={'eye'}
                          />
                        </View>
                        <Text
                          style={{
                            fontSize: 16,
                            paddingLeft: 7,
                            paddingRight: 10,
                            color: '#fff',
                            fontWeight: 'bold',
                          }}>
                          Transaction History
                        </Text>
                      </TouchableOpacity>
                    </View>

                    {/* <FlatList
                      style={{width: '100%'}}
                      keyboardShouldPersistTaps={'always'}
                      showsVerticalScrollIndicator={false}
                      contentContainerStyle={{
                        width: '100%',
                      }}
                      data={item.description}
                      keyExtractor={(item, index) => String(index)}
                      renderItem={({item, index, separators}) => (
                        <View style={{flexDirection: 'row', paddingVertical: 5,paddingHorizontal:5}}>
                          <View
                            style={{
                              flex: 1,
                              alignItems: 'flex-start',
                              justifyContent: 'center',
                            }}>
                            <Icon
                              size={30}
                              name={'dot-single'}
                              type={'entypo'}
                              color={'#9C9A9D'}
                              underlayColor="rgba(255,255,255,0)"
                            />
                          </View>
                          <View
                            style={{
                              flex: 10,
                              alignItems: 'flex-start',
                              justifyContent: 'center',
                            }}>
                            <Text
                              style={{
                                paddingLeft: 5,
                                fontSize: 15,
                                color: '#9C9A9D',
                              }}>
                              {item.about}
                            </Text>
                          </View>
                        </View>
                      )}
                    /> */}
                  </View>
                </View>
              )}
              ListEmptyComponent={() => {
                return (
                  <View
                    style={{
                      //  position: "relative",
                      paddingTop: 60,
                      justifyContent: 'center',
                      alignItems: 'center',
                    }}>
                    {!this.state.fastagLoading && (
                      <Text style={{fontSize: 17, color: '#A19D9D'}}>
                        No agents found
                      </Text>
                    )}
                  </View>
                );
              }}
            />
          </ScrollView>
        </View>

        {/* <View
        style={{
          flex:this.state.keyboardOpen?1.5:0.8,
          width: "100%",
          backgroundColor:'#00000090',
          alignItems: "center",
          justifyContent: "center"
        }}
      >
        <MainButton
          activityIndicatorShow={this.state.settingsLoading}
          buttonWidth={"100%"}
          buttonColor={this.props.theme.buttonColor}
          buttonHeight={'100%'}
          fontSize={18}
          buttonTitle={"Submit"}
          textColor={"#ffff"}
          onButtonPress={() => {
            Keyboard.dismiss();
            this.setState({changingPage:true,settingsLoading:true,},()=>{
              if (
                    this.state.name !== "" &&
                    this.state.mobile.length==10
                  ) {
                   stepOne({
                  name:this.state.name,mobile:this.state.mobile
                })
                  .then(result => {
                    

                    if (result.data.success==true) {
                     this.setState({previousDepth:this.state.pageDepth,},()=>{
                      this.setState({pageDepth:2,settingsLoading:false,changingPage:false,name:'',mobile:'',insertedId:result.data &&result.data.data  && result.data.data.inserted_id?result.data.data.inserted_id:''})
                     })
                    }
                    else{
                      this.setState({settingsLoading:false,changingPage:false})
                      aceAlert('Please enter correct details')
                    }
                  })
                  .catch(err => {
                    this.setState({ settingsLoading: false ,changingPage:false}, () => {});
               
                    console.log("Error", err.response);
                  });
              } else {
                this.setState({ settingsLoading: false ,changingPage:false}, () => {
                  if (this.state.name == "") {
                    alert("Please enter name");
                  } else if (this.state.mobile.length<10) {
                    alert("Please enter mobile number");
                  } 
                })
              
              }
            
            })
            // this.setState({ settingsLoading: true }, () => {
            //   if (
            //     this.state.name !== "" &&
            //     this.state.mobile.length==10
            //   ) {
            //     stepOne({
            //       name:this.state.name,mobile:this.state.mobile
            //     })
            //       .then(result => {
            //         this.setState({ settingsLoading: false });

            //         if (result.data.success==true) {
            //           console.log(result.data, "result add/edit beneficiary");
            //           aceAlert('Wallet Request done successfully\nPending approval')
            //           NavigatorService.pop()
            //         }
            //         else{
            //           aceAlert('Wallet Request failed\nPlease enter correct details')
            //         }
            //       })
            //       .catch(err => {
            //         this.setState({ settingsLoading: false }, () => {});
               
            //         console.log("Error", err.response);
            //       });
            //   } else {
            //     this.setState({ settingsLoading: false }, () => {
            //       if (this.state.name == "") {
            //         alert("Please enter name");
            //       } else if (this.state.mobile<10) {
            //         alert("Please enter mobile number");
            //       } 
            //     });
            //   }
            // });
          }}
        ></MainButton>
      </View> */}
      </View>
    );
  }
  // setContactsData() {
  //   return [
  //     {
  //       name: 'Mithul',
  //       mobileno: '8590030747',

  //       description: [{about: 'General Enquires'}],
  //     },
  //     {
  //       name: 'Anupama',
  //       mobileno: '9961562848',
  //       description: [{about: 'Kerala GOVT , MVD Services'},],
  //     },
  //     {
  //       name: 'Meera',
  //       mobileno: '7034678363',
  //       description: [
  //         {about: 'Mobile & DTH, Acemoney Portal Services'},

  //       ],
  //     },
  //     {
  //       name: 'Rubiya',
  //       mobileno: '8157954534',
  //       description: [{about: 'Billpayments , Pancard'},],
  //     },
  //     {
  //       name: 'Manesh',
  //       mobileno: '7510515801',
  //       description: [
  //         {about: 'Insurance for taxi vehicles , onlinepolicy.com queries'},
  //       ],
  //     },
  //     {
  //       name: 'Roy',
  //       mobileno: '9544456667',
  //       description: [
  //         {about: 'Insurance for taxi vehicles , onlinepolicy.com queries'},
  //       ],
  //     },
  //   ];
  // }

  setPaymentData() {
    if (this.state.pageDepth == 6) {
      return [
        {
          name: 'KSEB Bill Payment',
          color1: '#E25241',
          color2: '#f0b670',
          data: [
            {
              data_name: 'Payment',
              iconName: 'check-square',
              iconType: 'font-awesome',
              finish: false,
              pageDepth: 10,
            },
            {
              data_name: 'Payment History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: true,
              pageDepth: 14,
            },
          ],
        },
        {
          name: 'Water Authority Bill Payment',
          color1: '#6cae5b',
          color2: '#98C05C',
          data: [
            {
              data_name: 'Payment',
              iconName: 'check-square',
              iconType: 'font-awesome',
              finish: false,
              pageDepth: 11,
            },
            {
              data_name: 'Payment History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: true,
              pageDepth: 15,
            },
          ],
        },
        {
          name: 'BSNL Bill Payment',
          color1: '#F29C38',
          color2: '#f9cd46',
          data: [
            {
              data_name: 'Payment',
              iconName: 'check-square',
              iconType: 'font-awesome',
              finish: false,
              pageDepth: 12,
            },
            {
              data_name: 'Payment History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: true,
              pageDepth: 16,
            },
          ],
        },
        {
          name: 'Asianet Bill Payment',
          color1: '#D73964',
          color2: '#e25142',
          data: [
            {
              data_name: 'Payment',
              iconName: 'check-square',
              iconType: 'font-awesome',
              finish: false,
              pageDepth: 13,
            },
            {
              data_name: 'Payment History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: true,
              pageDepth: 17,
            },
          ],
        },
      ];
    } else if (this.state.pageDepth == 7) {
      return [
        {
          name: 'Mobile Recharge',
          color1: '#E25241',
          color2: '#f0b670',
          data: [
            {
              data_name: 'Payment',
              iconName: 'check-square',
              iconType: 'font-awesome',
              finish: false,
              pageDepth: 18,
            },
            {
              data_name: 'Payment History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: true,
              pageDepth: 20,
            },
          ],
        },
        {
          name: 'Dth Recharge',
          color1: '#6cae5b',
          color2: '#98C05C',
          data: [
            {
              data_name: 'Payment',
              iconName: 'check-square',
              iconType: 'font-awesome',
              finish: false,
              pageDepth: 19,
            },
            {
              data_name: 'Payment History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: true,
              pageDepth: 21,
            },
          ],
        },
      ];
    } else if (this.state.pageDepth == 8) {
      return [
        {
          name: 'Transfer To Beneficiary',
          color1: '#E25241',
          color2: '#f0b670',
          data: [
            {
              data_name: 'Transfer Amount',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 22,
            },
            {
              data_name: 'Transfer History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: false,
              pageDepth: 24,
            },
            {
              data_name: 'Update KYC',
              iconName: 'plus-circle',
              iconType: 'feather',
              finish: true,
              pageDepth: 72,
            },
          ],
        },
        {
          name: 'Wallet Services',
          color1: '#6cae5b',
          color2: '#98C05C',
          data: [
            {
              data_name: 'Wallet Request',
              iconName: 'form',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 23,
            },
            {
              data_name: 'Wallet Transaction History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: true,
              pageDepth: 25,
            },
          ],
        },
      ];
    } else if (this.state.pageDepth == 9) {
      return [
        {
          name: 'Bank Settlement',
          color1: '#E25241',
          color2: '#f0b670',
          data: [
            {
              data_name: 'Settle Amount',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 28,
            },
            {
              data_name: 'Settlement History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: true,
              pageDepth: 29,
            },
          ],
        },
      ];
    } else if (this.state.pageDepth == 31) {
      return [
        {
          name: 'Vehicle Insurances',
          color1: '#E25241',
          color2: '#f0b670',
          data: [
            {
              data_name: 'Private Car',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 33,
            },
            {
              data_name: 'Two Wheeler',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 34,
            },
            {
              data_name: 'Personal Accident Policy',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 35,
            },
            {
              data_name: 'Commission Request',
              iconName: 'plus-circle',
              iconType: 'feather',
              finish: false,
              pageDepth: 46,
            },
            {
              data_name: 'Commission History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: true,
              pageDepth: 47,
            },
          ],
        },
        {
          name: 'Health Insurances',
          color1: '#E25241',
          color2: '#f0b670',
          data: [
            {
              data_name: 'Religare Health Insurance',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 43,
            },
            {
              data_name: 'New India Assurance',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 44,
            },
            {
              data_name: 'Commission Request',
              iconName: 'plus-circle',
              iconType: 'feather',
              finish: false,
              pageDepth: 50,
            },
            {
              data_name: 'Commission History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: true,
              pageDepth: 51,
            },
          ],
        },
        {
          name: 'Travel Insurances',
          color1: '#E25241',
          color2: '#f0b670',
          data: [
            {
              data_name: 'Religare Travel Insurance',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 45,
            },
            {
              data_name: 'Commission Request',
              iconName: 'plus-circle',
              iconType: 'feather',
              finish: false,
              pageDepth: 52,
            },
            {
              data_name: 'Commission History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: true,
              pageDepth: 53,
            },
          ],
        },
      ];
    } else if (this.state.pageDepth == 36) {
      return [
        {
          name: 'Aeps Options',
          color1: '#E25241',
          color2: '#f0b670',
          data: [
            {
              data_name: 'Connect To AEPS Device',
              iconName: 'plus-circle',
              iconType: 'feather',
              finish: false,
              pageDepth: 70,
            },
            {
              data_name: 'AEPS Transaction History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: true,
              pageDepth: 71,
            },
          ],
        },
      ];
    } else if (this.state.pageDepth == 37) {
      return [
        {
          name: 'Fastag Registration',
          color1: '#E25241',
          color2: '#f0b670',
          data: [
            {
              data_name: 'New Fastag',
              iconName: 'plus-circle',
              iconType: 'feather',
              finish: false,
              pageDepth: 48,
            },
            {
              data_name: 'Fastag Registration History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: true,
              pageDepth: 66,
            },
          ],
        },
        {
          name: 'Fastag Options',
          color1: '#E25241',
          color2: '#f0b670',
          data: [
            {
              data_name: 'Fastag Recharge',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 49,
            },
            {
              data_name: 'Fastag Recharge History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: true,
              pageDepth: 67,
            },
          ],
        },
        {
          name: 'Fastag Options [ ICICI ]',
          color1: '#E25241',
          color2: '#f0b670',
          data: [
            {
              data_name: 'Fastag Recharge',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 73,
            },
            {
              data_name: 'Fastag Recharge History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: true,
              pageDepth: 74,
            },
          ],
        },
      ];
    } else if (this.state.pageDepth == 39) {
      return [
        {
          name: 'TeacherInd Registration',
          color1: '#E25241',
          color2: '#f0b670',
          data: [
            {
              data_name: 'New Registration',
              iconName: 'plus-circle',
              iconType: 'feather',
              finish: false,
              pageDepth: 68,
            },
            {
              data_name: 'Registration History',
              iconName: 'info-with-circle',
              iconType: 'entypo',
              finish: true,
              pageDepth: 69,
            },
          ],
        },
      ];
    } else if (this.state.pageDepth == 38) {
      return [
        {
          name: 'Kshemanidhi Options',
          color1: '#E25241',
          color2: '#f0b670',
          data: [
            {
              data_name: 'Kshemanidhi Motor Workers',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 56,
            },
            {
              data_name: 'Kshemanidhi Tailoring Workers',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 57,
            },
          ],
        },
        {
          name: 'Property Tax Options',
          color1: '#E25241',
          color2: '#f0b670',
          data: [
            {
              data_name: 'Property Tax',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 59,
            },
            {
              data_name: 'Kshemanidhi Tailoring Workers',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 57,
            },
          ],
        },
        {
          name: 'Provided Services',
          color1: '#E25241',
          color2: '#f0b670',
          data: [
            {
              data_name: 'Land Tax',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 58,
            },

            {
              data_name: 'Vehicle Tax',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 60,
            },
            {
              data_name: 'Education - Online Payment',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 61,
            },
            {
              data_name: 'Instant Pancard',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 62,
            },
            {
              data_name: 'Online Shopping',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 63,
            },
            {
              data_name: 'Camera Surveillance',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: false,
              pageDepth: 64,
            },
            {
              data_name: 'Encumbrance Certificate',
              iconName: 'rightsquare',
              iconType: 'antdesign',
              finish: true,
              pageDepth: 65,
            },
          ],
        },
      ];
    }
  }

  openUrlFunction(url) {
    Linking.canOpenURL(url).then((supported) => {
      if (supported) {
        Linking.openURL(url);
      } else {
        Alert.alert('Url unknown');
      }
    });
  }
  mahagramDetails_Mahagram() {
    getMahagramDetails()
      .then((result) => {
        if (result.data && result.data.success == true) {
          if (result.data.data) {
            this.mahagramDataPass_Mahagram(result.data.data);
          }
        } else {
          this.generalAwesomeAlertMessage(
            'You are not authorized.\nContact administrator for activation',
          );
        }
      })
      .catch((err) => {
        this.setCatchError();
      });
  }

  mahagramDetails(latitude, longitude) {
    this.mahagramDataPass(latitude, longitude);

    // getMahagramDetails()
    //   .then((result) => {
    //     if (result.data && result.data.success == true) {
    //       if (result.data.data) {
    //         this.mahagramDataPass(result.data.data);
    //       }
    //     } else {
    //       this.generalAwesomeAlertMessage(
    //         'You are not authorized.\nContact administrator for activation',
    //       );
    //     }
    //   })
    //   .catch((err) => {
    //     this.setCatchError();
    //   });
  }

  errorAwesomeAlertMessage(message, func) {
    this.setState(
      {
        awesomeErrorAlertMessage: message,
      },
      () => {
        this.setState({awesomeErrorAlertShow: true});
      },
    );
  }

  successAwesomeAlertMessage(message, func) {
    this.setState(
      {
        awesomeAlertMessage: message,
      },
      () => {
        this.setState({awesomeAlertShow: true});
      },
    );
  }

  generalAwesomeAlertMessage(message) {
    this.setState(
      {
        awesomeGeneralAlertMessage: message,
      },
      () => {
        this.setState({awesomeGeneralAlertShow: true});
      },
    );
  }

  detailsAwesomeAlertMessage(message, pageDepth) {
    this.setState(
      {
        awesomeDetailsAlertMessage: message,
        awesomeDetailsAlerpageDepth: pageDepth,
      },
      () => {
        this.setState({awesomeDetailsAlertShow: true});
      },
    );
  }

  bluetoothAwesomeAlertMessage(message) {
    this.setState({awesomeBluetoothAlertShow: true});
  }

  doFetchAmount(value, service) {
    if (this.timeout) clearTimeout(this.timeout);
    this.timeout = setTimeout(() => {
      this.setState(
        {
          kseb_amount_loading: true,
          water_auth_amount_loading: true,
          bsnl_amount_loading: true,
          fastag_icici_amount_loading: true,
        },
        () => {
          // Mahagram.Toast("Fetching amount from server...");
          let data = {};
          if (service == 'kseb') {
            data = {service: service, consumer_id: value};
          } else if (service == 'kwa') {
            data = {service: service, consumerno: value};
          } else if (service == 'tele') {
            data = {service: service, landline: value};
          } else if (service == 'fastag') {
            data = {
              service: service,
              vehicleno: value,
              billerid: this.state.fastag_fastag_recharge_icici_vehicle_category_id.toString(),
            };
          }
          getBillAmount(data)
            .then((result) => {
              if (result.data && Array.isArray(result.data)) {
                if (
                  result.data.length > 0 &&
                  result.data[0].reason &&
                  result.data[0].reason.responseCode == '000' &&
                  result.data[0].billerResponse &&
                  result.data[0].billerResponse.tags.length > 0 &&
                  result.data[0].billerResponse.tags[0].value !== ''
                ) {
                  let amt = result.data[0].billerResponse.tags[0].value.split(
                    '=',
                  )[1];
                  if (service == 'kseb') {
                    this.setState({kseb_amount: amt}, () => {
                      this.setState({
                        kseb_amount_loading: false,
                      });
                    });
                  } else if (service == 'kwa') {
                    this.setState({water_auth_amount: amt}, () => {
                      this.setState({
                        water_auth_amount_loading: false,
                      });
                    });
                  } else if (service == 'tele') {
                    this.setState({bsnl_amount: amt}, () => {
                      this.setState({
                        bsnl_amount_loading: false,
                      });
                    });
                  } else if (service == 'fastag') {
                    this.setState(
                      {fastag_fastag_recharge_icici_amount: amt},
                      () => {
                        this.setState({
                          fastag_icici_amount_loading: false,
                        });
                      },
                    );
                  }
                } else {
                  if (
                    result.data.length > 0 &&
                    result.data[0].reason &&
                    result.data[0].reason.responseReason != ''
                  ) {
                    if (service == 'kseb') {
                      Mahagram.Toast(
                        result.data[0].reason.responseReason != ''
                          ? result.data[0].reason.responseReason
                          : 'Unable to fetch Amount',
                      );
                    } else if (service == 'kwa') {
                      Mahagram.Toast(
                        result.data[0].reason.responseReason != ''
                          ? result.data[0].reason.responseReason
                          : 'Unable to fetch Amount',
                      );
                    } else if (service == 'tele') {
                      Mahagram.Toast(
                        result.data[0].reason.responseReason != ''
                          ? result.data[0].reason.responseReason
                          : 'Unable to fetch Amount',
                      );
                    } else if (service == 'fastag') {
                      Mahagram.Toast(
                        result.data[0].reason.responseReason != ''
                          ? result.data[0].reason.responseReason
                          : 'Unable to fetch Amount',
                      );
                    }
                  } else if (
                    result.data.length > 0 &&
                    result.data[0].errorMessages.length > 0 &&
                    result.data[0].errorMessages[0].errorDtl &&
                    result.data[0].errorMessages[0].errorDtl !== ''
                  ) {
                    Mahagram.Toast(result.data[0].errorMessages[0].errorDtl);
                  } else {
                    Mahagram.Toast('Unable to fetch Amount');
                  }
                }
                this.setState({
                  kseb_amount_loading: false,
                  water_auth_amount_loading: false,
                  bsnl_amount_loading: false,
                  fastag_icici_amount_loading: false,
                });
              }
            })
            .catch((err) => {
              this.setState({
                kseb_amount_loading: false,
                water_auth_amount_loading: false,
                bsnl_amount_loading: false,
                fastag_icici_amount_loading: false,
              });
              Mahagram.Toast('Unable to fetch Amount');
            });
        },
        800,
      );
    });
  }

  async mahagramDataPass_Mahagram(data) {
    await Mahagram.show_mahagram(
      data.saltkey,
      data.secretkey,
      data.bcid,
      data.userid,
      data.bcemailid,
      data.phone1,
      data.clientrefid,
    );
  }

  getMahagramAepsData() {
    getMahagramDetails()
      .then((result) => {
        if (result.data && result.data.success == true) {
          if (result.data.data) {
            this.MahagramAEPS(result.data.data);
          }
        } else {
          this.generalAwesomeAlertMessage(
            'You are not authorized.\nContact administrator for activation',
          );
        }
      })
      .catch((err) => {
        this.setCatchError();
      });
  }
  async MahagramAEPS(data) {
    await Mahagram.show_aeps(
      data.saltkey ? data.saltkey : '',
      data.secretkey,
      data.bcid,
      data.userid,
      data.bcemailid,
      data.phone1,
      data.clientrefid,
    );
  }

  async mahagramDataPass(latitude, longitude) {
    this.setState({buttonLoading: false});
    if (this.state.connect_to_micro_atm_radio_button_value == 8) {
      await Mahagram.show(
        parseFloat(latitude),
        parseFloat(longitude),
        this.state.connect_to_micro_atm_username,
        this.state.connect_to_micro_atm_password,
        'this.state.connect_to_micro_atm_mobileno',
        'this.state.connect_to_micro_atm_amount',
        'History Details',
        2,
        this.state.connect_to_micro_atm_radio_button_value,
      );
    } else if (this.state.connect_to_micro_atm_radio_button_value == 3) {
      await Mahagram.show(
        parseFloat(latitude),
        parseFloat(longitude),
        this.state.connect_to_micro_atm_username,
        this.state.connect_to_micro_atm_password,
        this.state.connect_to_micro_atm_mobileno,
        '0',
        this.state.connect_to_micro_atm_remarks !== ''
          ? this.state.connect_to_micro_atm_remarks
          : '',
        1,
        this.state.connect_to_micro_atm_radio_button_value,
      );
    } else {
      await Mahagram.show(
        parseFloat(latitude),
        parseFloat(longitude),
        this.state.connect_to_micro_atm_username,
        this.state.connect_to_micro_atm_password,
        this.state.connect_to_micro_atm_mobileno,
        this.state.connect_to_micro_atm_amount,
        this.state.connect_to_micro_atm_remarks !== ''
          ? this.state.connect_to_micro_atm_remarks
          : '',
        1,
        this.state.connect_to_micro_atm_radio_button_value,
      );
    }
    this.setState({
      connect_to_micro_atm_amount: 0,
      connect_to_micro_atm_remarks: '',
    });
  }

  async locationEnable_Mahagram() {
    try {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
      );
      if (granted === PermissionsAndroid.RESULTS.GRANTED) {
        this.mahagramDetails_Mahagram();
      } else {
        this.generalAwesomeAlertMessage('Location permission denied');
      }
    } catch (err) {
      console.warn(err);
    }
  }
  async locationEnable() {
    try {
      const granted = await PermissionsAndroid.requestMultiple([
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
        PermissionsAndroid.PERMISSIONS.READ_PHONE_STATE,
        PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE,
        PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
      ]).then((result) => {
        if (
          result['android.permission.READ_PHONE_STATE'] &&
          result['android.permission.ACCESS_FINE_LOCATION'] &&
          result['android.permission.READ_EXTERNAL_STORAGE'] &&
          result['android.permission.WRITE_EXTERNAL_STORAGE'] === 'granted'
        ) {
          //this.mahagramDetails();

          Geolocation.getCurrentPosition(
            (position) => {
              console.log(position);
              let longitude = position.coords.longitude;
              let latitude = position.coords.latitude;
              this.mahagramDetails(latitude, longitude);
            },
            (error) => {
              // See error code charts below.
              console.log(error.code, error.message);
            },
            {enableHighAccuracy: true, timeout: 15000, maximumAge: 10000},
          );
        } else if (
          result['android.permission.READ_PHONE_STATE'] &&
          result['android.permission.ACCESS_FINE_LOCATION'] &&
          result['android.permission.READ_EXTERNAL_STORAGE'] &&
          result['android.permission.WRITE_EXTERNAL_STORAGE'] ===
            'never_ask_again'
        ) {
          this.generalAwesomeAlertMessage(
            'Please Go into Settings -> Applications -> APP_NAME -> Permissions and Allow permissions to continue',
          );
        }
      });
      //   if (granted === PermissionsAndroid.RESULTS.GRANTED) {
      //     //this.mahagramDetails();

      //    Geolocation.getCurrentPosition(
      //     (position) => {
      //       console.log(position);
      //       let longitude =position.coords.longitude
      //       let latitude =position.coords.latitude
      //  this.mahagramDetails(latitude,longitude);
      //     },
      //     (error) => {
      //       // See error code charts below.
      //       console.log(error.code, error.message);
      //     },
      //     { enableHighAccuracy: true, timeout: 15000, maximumAge: 10000 }
      // );
      //   } else {
      //     this.generalAwesomeAlertMessage('Location permission denied');
      //   }
      this.setState({buttonLoading: false});
    } catch (err) {
      console.warn(err);
      this.setState({buttonLoading: false});
    }
  }

  async loadBalance() {
    await getAccountBalance()
      .then((result) => {
        console.log(result, 'balance');
        if (result.data) {
          this.setState({settingsLoading: false, editDetails: false}, () => {
            store.dispatch({
              type: 'HOME_PAGE_ACC_BAL',
              payload:
                result.data && result.data.balance ? result.data.balance : '',
            });
            this.setState(
              {
                account_balance:
                  result.data && result.data.balance ? result.data.balance : '',
              },
              () => {},
            );
          });
        } else {
          this.setState({settingsLoading: false}, () => {});
        }
      })
      .catch((err) => {
        this.setState(
          {settingsLoading: false, balanceLoading: false},
          () => {},
        );

        console.log('Error', err.response);
      });
    return true;
  }

  actualDownload = (fromDate, toDate, option) => {
    const {dirs} = RNFetchBlob.fs;
    let file_name =
      'acemoney_transacations_' +
      fromDate +
      '_' +
      toDate +
      '_' +
      Math.floor(new Date().getTime() + new Date().getSeconds() / 2);
    let filePath = null;
    RNFetchBlob.config(
      option == 'download'
        ? {
            fileCache: true,
            addAndroidDownloads: {
              useDownloadManager: true,
              notification: option == 'download' ? true : false,
              mediaScannable: true,
              title: `${file_name}.pdf`,
              path:
                option == 'download'
                  ? `${dirs.DownloadDir}/${file_name}.pdf`
                  : `${dirs.CacheDir}/temp/foo/${file_name}.pdf`,
            },
          }
        : {fileCache: true, appendExt: 'pdf'},
    )
      .fetch(
        'GET',
        apiRoot +
          'api/ledgerPDF/' +
          store.getState().login.agentEmail +
          '/' +
          fromDate +
          '/' +
          toDate,
        {},
      )
      .then((res) => {
        filePath = res.path();
        console.log('The file saved to ', res.path());
        console.log(
          apiRoot +
            'api/ledgerPDF/' +
            store.getState().login.agentEmail +
            '/' +
            fromDate +
            '/' +
            toDate,
        );
        if (option == 'download') {
          Mahagram.Toast(
            `File Download Complete\n${dirs.DownloadDir}/${file_name}.pdf`,
          );
          this.setState({
            allhistory_pdf_download_loading: false,
            allhistory_pdf_share_loading: false,
          });
        } else {
          return res.readFile('base64');
        }
      })

      .then(async (base64Data) => {
        base64Data = (await `data:application/pdf;base64,`) + base64Data;
        console.log('PDF RNF then2', base64Data);

        try {
          await Share.open({
            url: base64Data,
            type: 'application/pdf',
            title:
              'acemoney transaction reciept from ' + fromDate + ' to ' + toDate,
            filename: file_name + '.pdf',
            subject:
              'Acemoney Transaction Reciept From ' + fromDate + ' To ' + toDate,
          });
          // remove the image or pdf from device's storage
          await RNFS.unlink(filePath);
          this.setState({
            allhistory_pdf_download_loading: false,
            allhistory_pdf_share_loading: false,
          });
        } catch (error) {
          this.setState({
            allhistory_pdf_download_loading: false,
            allhistory_pdf_share_loading: false,
          });
          console.log('PDF then2 err', error);
        }
      })
      .catch((e) => {
        this.setState({
          allhistory_pdf_download_loading: false,
          allhistory_pdf_share_loading: false,
        });
        console.log(e);
      });
  };

  async downloadFile(fromDate, toDate, option) {
    try {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
      );
      if (granted === PermissionsAndroid.RESULTS.GRANTED) {
        this.actualDownload(fromDate, toDate, option);
      } else {
        this.setState({
          allhistory_pdf_download_loading: false,
          allhistory_pdf_share_loading: false,
        });
        Alert.alert(
          'Permission Denied!',
          'You need to give storage permission to download the file',
        );
      }
    } catch (err) {
      this.setState({
        allhistory_pdf_download_loading: false,
        allhistory_pdf_share_loading: false,
      });
      console.warn(err);
    }
  }

  onSessionConnect = (event) => {
    event.txndate = moment().format('DD-MM-YYYY HH:mm:ss');
    console.log(event);
    if (store.getState().login.microatm_type == 'mahagram') {
      this.setState({transactionData: event, settingsLoading: true}, () => {
        this.setState({modalRecieptOpen: true}, () => {});
      });
      if (event.txnamount !== '0' && event.bankremarks == 'Successful') {
        mahagramMPosTransfer(event)
          .then((result) => {})
          .catch((err) => {
            AsyncStorage.getItem('micro_atm_failed_data')
              .then((result) => {
                console.log(result, 'async');
                if (result !== null) {
                  let data = JSON.parse(result);
                  data.push(event);
                  AsyncStorage.setItem(
                    'micro_atm_failed_data',
                    JSON.stringify(data),
                  );
                } else {
                  let data = [];
                  data.push(event);

                  AsyncStorage.setItem(
                    'micro_atm_failed_data',
                    JSON.stringify(data),
                  );
                }
              })
              .catch((err) => {
                let data = [];
                data.push(event);

                AsyncStorage.setItem(
                  'micro_atm_failed_data',
                  JSON.stringify(data),
                );
              });
            this.generalAwesomeAlertMessage(
              'Database Updation Failed.\nRe-Sending Data To Server',
            );
          });
      }
    } else {
      this.setState(
        {
          transactionData: event,
          settingsLoading:
            this.state.connect_to_micro_atm_radio_button_value == 1 ||
            this.state.connect_to_micro_atm_radio_button_value == 3
              ? true
              : false,
        },
        () => {
          this.setState(
            {
              modalRecieptOpen_three:
                this.state.connect_to_micro_atm_radio_button_value == 1 ||
                this.state.connect_to_micro_atm_radio_button_value == 3
                  ? true
                  : false,
            },
            () => {
              console.log(event);
              if (
                this.state.connect_to_micro_atm_radio_button_value == 1 &&
                event.response == 'Request Completed' &&
                event.type == '2'
              ) {
                iciciPosTransfer(event)
                  .then((result) => {})
                  .catch((err) => {
                    AsyncStorage.getItem('micro_atm_failed_data')
                      .then((result) => {
                        console.log(result, 'async');
                        if (result !== null) {
                          let data = JSON.parse(result);
                          data.push(event);
                          AsyncStorage.setItem(
                            'micro_atm_failed_data',
                            JSON.stringify(data),
                          );
                        } else {
                          let data = [];
                          data.push(event);

                          AsyncStorage.setItem(
                            'micro_atm_failed_data',
                            JSON.stringify(data),
                          );
                        }
                      })
                      .catch((err) => {
                        let data = [];
                        data.push(event);

                        AsyncStorage.setItem(
                          'micro_atm_failed_data',
                          JSON.stringify(data),
                        );
                      });
                    this.generalAwesomeAlertMessage(
                      'Database Updation Failed.\nRe-Sending Data To Server',
                    );
                  });
              }
            },
          );
        },
      );
    }
  };
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'flex-start',
    alignItems: 'center',
    // marginTop: 25,
  },
  pdf: {
    flex: 1,
    width: Dimensions.get('window').width,
    height: Dimensions.get('window').height,
  },
  wrapper: {},
  slide1: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent',
  },
  slide2: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent',
  },
  slide3: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent',
  },
  text: {
    color: '#fff',
    fontSize: 30,
    fontWeight: 'bold',
  },
});

const mapStateToProps = (state) => ({
  authorization: state.authorization,
  theme: state.theme,
});

export default connect(mapStateToProps)(HomeScreen);

// if (result.data && Array.isArray(result.data)) {
//   if (
//     result.data.length > 0 &&
//     result.data[0].ResponseCode &&
//     result.data[0].ResponseCode == '000' &&
//     result.data[0].BillAmount &&
//     result.data[0].BillAmount !== ''
//   ) {
//     let amt = result.data[0].BillAmount;
//     if (service == 'kseb') {
//       this.setState({kseb_amount: amt}, () => {
//         this.setState({
//           kseb_amount_loading: false,
//         });
//       });
//     } else if (service == 'kwa') {
//       this.setState({water_auth_amount: amt}, () => {
//         this.setState({
//           water_auth_amount_loading: false,
//         });
//       });
//     } else if (service == 'tele') {
//       this.setState({bsnl_amount: amt}, () => {
//         this.setState({
//           bsnl_amount_loading: false,
//         });
//       });
//     }
//   } else {
//     if (
//       result.data.length > 0 &&
//       result.data[0].ResponseMessage !== ''
//     ) {
//       if (service == 'kseb') {
//         Mahagram.Toast(
//           result.data[0].ResponseMessage != ''
//             ? result.data[0].ResponseMessage
//             : 'Unable to fetch Amount',
//         );
//       } else if (service == 'kwa') {
//         Mahagram.Toast(
//           result.data[0].ResponseMessage != ''
//             ? result.data[0].ResponseMessage
//             : 'Unable to fetch Amount',
//         );
//       } else if (service == 'tele') {
//         Mahagram.Toast(
//           result.data[0].ResponseMessage != ''
//             ? result.data[0].ResponseMessage
//             : 'Unable to fetch Amount',
//         );
//       }
//     } else {
//       Mahagram.Toast('Unable to fetch Amount');
//     }

//     this.setState({
//       kseb_amount_loading: false,
//       water_auth_amount_loading: false,
//       bsnl_amount_loading: false,
//     });
//   }
// }
